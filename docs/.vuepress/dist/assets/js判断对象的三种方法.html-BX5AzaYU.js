import{_ as n,o as s,c as a,e as t}from"./app-Be99M-nA.js";const e={},p=t(`<ol><li><p><strong>使用 <code>typeof</code> 和 <code>null</code> 检查</strong>:</p><p><code>typeof</code> 运算符对于对象（包括函数和数组）都会返回 <code>&#39;object&#39;</code>。但是，<code>null</code> 也被认为是一个对象类型，所以需要额外检查。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用 <code>Object.prototype.toString.call()</code></strong>:</p><p>这是一个更精确的方法，可以区分对象、数组、函数和null。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这种方法，只有普通对象会返回 <code>true</code>。如果你希望数组和函数也被认为是对象，你可以进一步修改这个函数。</p></li><li><p><strong>使用 <code>instanceof</code></strong>:</p><p>这个方法可以检查一个对象是否是另一个对象的实例。但是，由于JavaScript的原型继承，这种方法可能不总是很准确。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这会对任何从 <code>Object</code> 构造函数或任何其他构造函数（如 <code>Array</code>、<code>Function</code>）派生出来的对象返回 <code>true</code>。</p></li></ol><p>在大多数情况下，第二种方法 (<code>Object.prototype.toString.call()</code>) 是最准确和最常用的。但选择哪种方法取决于你的具体需求和你希望如何定义&quot;对象&quot;。</p>`,2),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","js判断对象的三种方法.html.vue"]]),d=JSON.parse(`{"path":"/posts/js/js%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95.html","title":"js判断对象的三种方法","lang":"zh-CN","frontmatter":{"title":"js判断对象的三种方法","toc":true,"keywords":["js,js对象判断"],"tags":["javascript"],"categories":["javascript"],"date":"2024-01-23T21:01:21.000Z"},"headers":[],"git":{},"filePathRelative":"posts/js/js判断对象的三种方法.md","excerpt":"<ol>\\n<li>\\n<p><strong>使用 <code>typeof</code> 和 <code>null</code> 检查</strong>:</p>\\n<p><code>typeof</code> 运算符对于对象（包括函数和数组）都会返回 <code>'object'</code>。但是，<code>null</code> 也被认为是一个对象类型，所以需要额外检查。</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">isObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> value <span class=\\"token operator\\">!==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token keyword\\">typeof</span> value <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'object'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>\\n<p><strong>使用 <code>Object.prototype.toString.call()</code></strong>:</p>\\n<p>这是一个更精确的方法，可以区分对象、数组、函数和null。</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">isObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'[object Object]'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div><p>使用这种方法，只有普通对象会返回 <code>true</code>。如果你希望数组和函数也被认为是对象，你可以进一步修改这个函数。</p>\\n</li>\\n</ol>\\n"}`);export{r as comp,d as data};
