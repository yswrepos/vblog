import{_ as n,o as s,c as a,e as t}from"./app-Be99M-nA.js";const p={},e=t(`<p>一般的menus递归我们采用以下函数:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">type</span> Item <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	id       <span class="token builtin">int</span>
	pid      <span class="token builtin">int</span>
	name     <span class="token builtin">string</span>
	children <span class="token punctuation">[</span><span class="token punctuation">]</span>Item
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">genTree</span><span class="token punctuation">(</span>menus <span class="token punctuation">[</span><span class="token punctuation">]</span>Item<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Item <span class="token punctuation">{</span>
	<span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> menus <span class="token punctuation">{</span>
		<span class="token keyword">if</span> i<span class="token punctuation">.</span>pid <span class="token operator">==</span> id <span class="token punctuation">{</span>
			iChildren <span class="token operator">:=</span> <span class="token function">genTree</span><span class="token punctuation">(</span>menus<span class="token punctuation">,</span> i<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
			i<span class="token punctuation">.</span>children <span class="token operator">=</span> iChildren
			items <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> items
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种递归方法在处理大量数据时可能会导致性能问题，尤其是当树的深度非常大时。此外，每次递归调用都会遍历整个 menus 列表，这导致了一些不必要的重复遍历。 减少重复遍历和避免过多递归优化后的函数如下:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">type</span> Item <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	id       <span class="token builtin">int</span>
	pid      <span class="token builtin">int</span>
	name     <span class="token builtin">string</span>
	children <span class="token punctuation">[</span><span class="token punctuation">]</span>Item
<span class="token punctuation">}</span>

<span class="token comment">//  现将原始数据转换为以menu的pid为key的map类型</span>
<span class="token keyword">func</span> <span class="token function">toMapData</span><span class="token punctuation">(</span>menus <span class="token punctuation">[</span><span class="token punctuation">]</span>Item <span class="token punctuation">)</span><span class="token punctuation">{</span>
    childrenMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Item<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> menus <span class="token punctuation">{</span>
        childrenMap<span class="token punctuation">[</span>i<span class="token punctuation">.</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>childrenMap<span class="token punctuation">[</span>i<span class="token punctuation">.</span>pid<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> childrenMap
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">genTree</span><span class="token punctuation">(</span>menus <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Item<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Item <span class="token punctuation">{</span>
    <span class="token keyword">if</span> children<span class="token punctuation">,</span> ok <span class="token operator">:=</span> menus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
        <span class="token keyword">var</span> items <span class="token punctuation">[</span><span class="token punctuation">]</span>Item
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> children <span class="token punctuation">{</span>
            i<span class="token punctuation">.</span>children <span class="token operator">:=</span> <span class="token function">genTree</span><span class="token punctuation">(</span>menus<span class="token punctuation">,</span> i<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
            items <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> items<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> menus <span class="token punctuation">[</span><span class="token punctuation">]</span>Item
    <span class="token function">genTree</span><span class="token punctuation">(</span><span class="token function">toMapData</span><span class="token punctuation">(</span>menus<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法减少了重复的遍历，可能会在处理大型数据集时提供更好的性能。然而，对于小型或中等规模的数据集，原始的递归方法已经足够高效，并且更易于理解和维护。</p>`,5),o=[e];function c(i,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","menus递归的一点点改进.html.vue"]]),d=JSON.parse('{"path":"/posts/go/menus%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E6%94%B9%E8%BF%9B.html","title":"menus递归的一点点改进","lang":"zh-CN","frontmatter":{"layout":"posts","title":"menus递归的一点点改进","date":"2024-01-22T14:47:49.000Z","tags":["go","优化"],"categories":["go"]},"headers":[],"git":{},"filePathRelative":"posts/go/menus递归的一点点改进.md","excerpt":"<p>一般的menus递归我们采用以下函数:</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code>\\n<span class=\\"token keyword\\">type</span> Item <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tid       <span class=\\"token builtin\\">int</span>\\n\\tpid      <span class=\\"token builtin\\">int</span>\\n\\tname     <span class=\\"token builtin\\">string</span>\\n\\tchildren <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>Item\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">genTree</span><span class=\\"token punctuation\\">(</span>menus <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>Item<span class=\\"token punctuation\\">,</span> id <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>Item <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">var</span> items <span class=\\"token operator\\">=</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>Item<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> menus <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> i<span class=\\"token punctuation\\">.</span>pid <span class=\\"token operator\\">==</span> id <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tiChildren <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">genTree</span><span class=\\"token punctuation\\">(</span>menus<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\ti<span class=\\"token punctuation\\">.</span>children <span class=\\"token operator\\">=</span> iChildren\\n\\t\\t\\titems <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>items<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> items\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>"}');export{k as comp,d as data};
