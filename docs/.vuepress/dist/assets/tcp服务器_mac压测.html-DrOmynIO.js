import{_ as n,o as s,c as a,e as t}from"./app-Be99M-nA.js";const p={},e=t(`<p>以下是一个基本的会记录链接数量、记录日志打印并且等到所有日志和连接关闭过后再关闭的TCP服务器:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bufio&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;os/signal&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;syscall&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	mu                sync<span class="token punctuation">.</span>Mutex
	activeConnections <span class="token builtin">int</span>
	logChan           <span class="token keyword">chan</span> <span class="token builtin">string</span>    <span class="token comment">// 用于日志信息的channel</span>
	stopChan          <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 用于通知程序停止的通道</span>
	wg                sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">// 等待所有连接关闭</span>
	logWorkerDone     sync<span class="token punctuation">.</span>WaitGroup <span class="token comment">// 用于等待logWorker完成</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	PORT <span class="token operator">:=</span> <span class="token string">&quot;:9090&quot;</span>
	logChan <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 初始化channel，缓冲大小设置为100</span>
	stopChan <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 初始化stopChan</span>
	<span class="token keyword">go</span> <span class="token function">logWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment">// 启动日志goroutine</span>

	listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		logChan <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Error listening: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> listener<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	logChan <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Listening on %s\\n&quot;</span><span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token function">handleSignals</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>stopChan<span class="token punctuation">:</span>
				<span class="token comment">// 如果stopChan有信号，表示应该关闭服务器</span>
				logChan <span class="token operator">&lt;-</span> <span class="token string">&quot;Shutdown signal received, stopping accept new connections.\\n&quot;</span>
				wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等待所有连接处理完毕</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Waiting for log channel to be closed.&quot;</span><span class="token punctuation">)</span>
				<span class="token function">close</span><span class="token punctuation">(</span>logChan<span class="token punctuation">)</span>
				logWorkerDone<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等待所有日志打印完成</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Server has correctly closed.&quot;</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
				<span class="token comment">// 否则是一个不同的错误</span>
				logChan <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Error accepting: %s\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		connID <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用远程地址作为连接的唯一标识符</span>
		mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		activeConnections<span class="token operator">++</span>
		logChan <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] New connection accepted. Total connections: %d\\n&quot;</span><span class="token punctuation">,</span> connID<span class="token punctuation">,</span> activeConnections<span class="token punctuation">)</span>
		mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 新增一个活动连接</span>
		<span class="token keyword">go</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> connID<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">logWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	logWorkerDone<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> logWorkerDone<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> logMsg <span class="token operator">:=</span> <span class="token keyword">range</span> logChan <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>logMsg<span class="token punctuation">)</span> <span class="token comment">// 串行打印日志消息</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">handleSignals</span><span class="token punctuation">(</span>listener net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	signalChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>signalChan<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Interrupt<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">)</span>

	<span class="token operator">&lt;-</span>signalChan     <span class="token comment">// 等待信号</span>
	<span class="token function">close</span><span class="token punctuation">(</span>stopChan<span class="token punctuation">)</span>  <span class="token comment">// 关闭stopChan通知其他goroutine</span>
	listener<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 关闭监听器</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> connID <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		activeConnections<span class="token operator">--</span>
		logChan <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] Connection closed. Total connections: %d\\n&quot;</span><span class="token punctuation">,</span> connID<span class="token punctuation">,</span> activeConnections<span class="token punctuation">)</span>
		mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		message<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			logChan <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] Error reading: %s\\n&quot;</span><span class="token punctuation">,</span> connID<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		logChan <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] Message received: %s&quot;</span><span class="token punctuation">,</span> connID<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>
		conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;STOP&quot;</span> <span class="token punctuation">{</span>
			logChan <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] TCP server stopping...\\n&quot;</span><span class="token punctuation">,</span> connID<span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tcp压测工具-tcpkali" tabindex="-1"><a class="header-anchor" href="#tcp压测工具-tcpkali"><span>TCP压测工具 tcpkali</span></a></h2><h3 id="nc" tabindex="-1"><a class="header-anchor" href="#nc"><span>nc</span></a></h3><p>在Mac上连接到这个TCP服务器，您可以使用内置的<code>nc</code>（netcat）工具，或者使用任何TCP客户端程序。在终端中，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nc</span> localhost <span class="token number">9090</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会打开一个到本地机器上<code>9090</code>端口的TCP连接。您可以开始发送消息，服务器会将它们回显回来。</p><p>在命令行中使用 echo 命令和管道将消息传递给 nc，然后 nc 会发送这个消息并关闭连接。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;Your message&quot;</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">9090</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个命令中，echo 会发送一个消息，并且输出的结束会关闭管道，这会导致 nc 检测到EOF（文件结束符），然后 nc 会结束连接。</p><p>如果您想要在发送特定数量的数据后关闭连接，您可以使用 head 命令来仅发送输入的前N个字节，如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">head</span> <span class="token parameter variable">-c</span> <span class="token number">100</span> /dev/urandom <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">9090</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会发送随机数据的前100个字节到指定的服务器和端口，然后关闭连接。</p><p>对于一些更复杂的情况，您可能需要编写一个小的脚本来实现更精确的控制。</p><h3 id="tcpkali" tabindex="-1"><a class="header-anchor" href="#tcpkali"><span>tcpkali</span></a></h3><p>为了进行压力测试，您可以使用像<code>wrk</code>或<code>ab</code>（Apache Bench）这样的工具。但是，它们主要用于HTTP服务器。对于TCP服务器，您可能需要使用像<code>tcpkali</code>或<code>tsung</code>这样的专用工具。下面是如何使用<code>tcpkali</code>进行基本压力测试的例子：</p><ol><li>安装<code>tcpkali</code>，在Mac上您可以使用Homebrew：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> tcpkali
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>运行压力测试命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>tcpkali <span class="token parameter variable">-c</span> <span class="token number">100</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;Hello, World!<span class="token entity" title="\\n">\\n</span>&quot;</span> localhost:9090

<span class="token comment"># 每秒钟向服务器发送10条消息。 测试持续时间为60秒。</span>
tcpkali <span class="token parameter variable">-c</span> <span class="token number">1000</span> <span class="token parameter variable">-T</span> 60s --message-rate <span class="token number">10</span> <span class="token parameter variable">--message</span> <span class="token string">&quot;Hello, server!&quot;</span> <span class="token number">192.168</span>.1.100:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个命令会启动100个并发连接到您的TCP服务器，并发送<code>Hello, World!</code>消息。<code>tcpkali</code>会报告每秒钟能够发送和接收的数据量，这是衡量TCP服务器性能的一个指标。</p><p>请注意，高性能服务器设计涉及多方面的内容，包括处理并发连接、资源管理和错误处理。上面的例子是一个起点，您可能需要根据实际需求进行调整。</p>`,22),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","tcp服务器_mac压测.html.vue"]]),r=JSON.parse('{"path":"/posts/go/tcp%E6%9C%8D%E5%8A%A1%E5%99%A8_mac%E5%8E%8B%E6%B5%8B.html","title":"go tcp服务器+mac压测","lang":"zh-CN","frontmatter":{"layout":"posts","title":"go tcp服务器+mac压测","date":"2024-01-24T14:30:49.000Z","tags":["go","tcp"],"categories":["go"]},"headers":[{"level":2,"title":"TCP压测工具 tcpkali","slug":"tcp压测工具-tcpkali","link":"#tcp压测工具-tcpkali","children":[{"level":3,"title":"nc","slug":"nc","link":"#nc","children":[]},{"level":3,"title":"tcpkali","slug":"tcpkali","link":"#tcpkali","children":[]}]}],"git":{},"filePathRelative":"posts/go/tcp服务器+mac压测.md","excerpt":"<p>以下是一个基本的会记录链接数量、记录日志打印并且等到所有日志和连接关闭过后再关闭的TCP服务器:</p>\\n"}');export{k as comp,r as data};
