import{_ as a,o as n,c as s,e}from"./app-Be99M-nA.js";const t="/static/img/posts/gitlab和runner如何配置-1.png",i={},l=e(`<h2 id="gitlab-和-gitlab-runner-简介" tabindex="-1"><a class="header-anchor" href="#gitlab-和-gitlab-runner-简介"><span>gitlab 和 gitlab-runner 简介</span></a></h2><p>GitLab 和 GitLab Runner 是 GitLab CI/CD（持续集成/持续交付）平台中的两个关键组件。</p><h3 id="gitlab" tabindex="-1"><a class="header-anchor" href="#gitlab"><span>GitLab</span></a></h3><p>GitLab 是一个基于 Web 的 Git 仓库管理工具和协作平台。它提供了一个完整的 DevOps 平台，包括代码托管、问题跟踪、持续集成/持续交付、容器注册表、监控和协作等功能。GitLab 具有自托管的优势，你可以在自己的服务器上安装和管理 GitLab 实例，也可以选择 GitLab 提供的托管服务。GitLab 采用 Ruby on Rails 开发，拥有强大的版本控制和代码审查功能，并与许多其他工具和服务集成。</p><h3 id="gitlab-runner" tabindex="-1"><a class="header-anchor" href="#gitlab-runner"><span>Gitlab Runner</span></a></h3><p>GitLab Runner 是一个用于执行 GitLab CI/CD 作业的执行代理。它是一个轻量级的应用程序，可以安装在不同的操作系统上，包括 Linux、Windows 和 macOS。GitLab Runner 负责接收 GitLab 的持续集成/持续交付作业，并在执行过程中与 GitLab 进行通信。它可以在本地计算机、虚拟机、容器等环境中执行作业。GitLab Runner 支持多种执行器，包括 Shell、Docker、Kubernetes 等，使你能够根据需求选择适合的执行环境。它还提供了丰富的配置选项，可以根据项目的需要进行自定义配置。</p><h2 id="搭建gitlab" tabindex="-1"><a class="header-anchor" href="#搭建gitlab"><span>搭建Gitlab</span></a></h2><h3 id="使用docker-run运行gitlab" tabindex="-1"><a class="header-anchor" href="#使用docker-run运行gitlab"><span>使用docker run运行Gitlab</span></a></h3><p>我们可以直接使用Docker来启动一个Gitlab容器：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--hostname</span> <span class="token variable">\${ip}</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--publish</span> <span class="token number">8443</span>:443 <span class="token parameter variable">--publish</span> <span class="token number">8080</span>:80 <span class="token parameter variable">--publish</span> <span class="token number">8022</span>:22 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> /root/docker/gitlab/config:/etc/gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> /root/docker/gitlab/log:/var/log/gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> /root/docker/gitlab/data:/var/opt/gitlab <span class="token punctuation">\\</span>
  gitlab/gitlab-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，容器就运行在后台了，我们可以通过<code>http://\${ip}:8080</code>来访问Gitlab。</p><h3 id="配置gitlab" tabindex="-1"><a class="header-anchor" href="#配置gitlab"><span>配置Gitlab</span></a></h3><p>有的时候我们需要对gitlab配置进行修改，比如修改端口，修改域名等，这时候我们可以通过修改配置文件来实现。 我们可以通过进入容器内部运行<code>gitlab-ctl</code>实现 \`\`\`sh docker exec -it gitlab /bin/bash</p><pre><code>sudo gitlab-ctl reconfigure -external-url &#39;https://gitlab.example.com&#39;
\`\`\`
</code></pre><p>这个操作通常不需要重启，因为gitlab-ctl reconfigure 命令会自动检测配置更改并重新启动相关的服务，以使更改生效。这包括 GitLab Web 服务器、数据库、后台任务处理器等。</p><p>不过有的时候可能需要重启服务，这时可以通过<code>gitlab-ctl restart</code>来重启服务。</p><blockquote><p>比如：gitlab-ctl reconfigure 执行期间出现了错误，或者你对 GitLab 的某些自定义配置进行了更改</p></blockquote><h3 id="使用docker-compose启动gitlab" tabindex="-1"><a class="header-anchor" href="#使用docker-compose启动gitlab"><span>使用docker-compose启动Gitlab</span></a></h3><p>一个典型的docker-compose文件如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">#  docker-compose.yml</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.6&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
 <span class="token key atrule">gitlab</span><span class="token punctuation">:</span>
   <span class="token key atrule">container_name</span><span class="token punctuation">:</span> gitlab
   <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;gitlab/gitlab-ce:latest&#39;</span>
   <span class="token key atrule">hostname</span><span class="token punctuation">:</span> <span class="token string">&#39;\${hostname}&#39;</span>
   <span class="token key atrule">environment</span><span class="token punctuation">:</span>
     <span class="token key atrule">GITLAB_OMNIBUS_CONFIG</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
       external_url &#39;http://\${ip}:8089&#39;
       gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 8022
       nginx[&#39;listen_port&#39;] = 8089</span>
   <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&#39;8089:8089&#39;</span>
     <span class="token punctuation">-</span> <span class="token string">&#39;8022:22&#39;</span>
     <span class="token punctuation">-</span> <span class="token string">&#39;1443:443&#39;</span>
   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&#39;/root/docker/gitlab/config:/etc/gitlab&#39;</span>
     <span class="token punctuation">-</span> <span class="token string">&#39;/root/docker/gitlab/log:/var/log/gitlab&#39;</span>
     <span class="token punctuation">-</span> <span class="token string">&#39;/root/docker/gitlab/data:/var/opt/gitlab&#39;</span>
   <span class="token key atrule">shm_size</span><span class="token punctuation">:</span> <span class="token string">&#39;256m&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述docker-compose文件中我们对<code>external_url</code>和<code>port</code>等参数进行了修改，这样我们就可以通过<code>http://\${ip}:8089</code>来访问Gitlab了。</p><blockquote><p>external_url 是一个配置选项，用于指定 GitLab 实例的外部访问 URL。它定义了用户在浏览器或其他客户端中访问 GitLab 的地址。</p></blockquote><h2 id="搭建gitlab-runner" tabindex="-1"><a class="header-anchor" href="#搭建gitlab-runner"><span>搭建Gitlab-Runner</span></a></h2><p>我们可以直接使用docker run来运行一个Gitlab-Runner服务：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> gitlab-runner <span class="token punctuation">\\</span>
<span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /root/docker/gitlab/gitlab-runner/config:/etc/gitlab-runner <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock  <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /usr/bin/docker:/usr/bin/docker <span class="token punctuation">\\</span>
gitlab/gitlab-runner:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gitlab-runner服务启动以后，我们需要注册gitlab-runner，这样gitlab才能识别到gitlab-runner。 注册gitlab-runner 需要访问gitlab token。我们可以通过以下步骤获取gitlab token：</p><p>gitlab地址-&gt;找到CI/CD-&gt;找到Runners-&gt;注册Runner-&gt;复制token-&gt;拿到token</p><p>拿到token之后我们可以通过两种方法注册gitlab-runner：</p><ul><li><p>进入gitlab-runner容器运行gitlab-runner register 命令 该命令会要求我们输入gitlab地址，token，以及gitlab-runner的描述等信息。</p></li><li><p>通过修改gitlab-runner的配置文件来注册gitlab-runner</p></li><li><p>使用docker重新run一个runner来注册，如下：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-v</span> /root/docker/gitlab/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register <span class="token punctuation">\\</span>
    --non-interactive <span class="token punctuation">\\</span>
    <span class="token parameter variable">--executor</span> <span class="token string">&quot;docker&quot;</span> <span class="token punctuation">\\</span>
    --docker-image alpine:latest <span class="token punctuation">\\</span>
    <span class="token parameter variable">--url</span> <span class="token string">&quot;http://<span class="token variable">\${ip}</span>:8089/&quot;</span> <span class="token punctuation">\\</span>
    --registration-token <span class="token string">&quot;<span class="token variable">\${token}</span>&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> <span class="token string">&quot;common-runner&quot;</span>
    <span class="token parameter variable">--description</span> <span class="token string">&quot;common runner&quot;</span> <span class="token punctuation">\\</span>
    --tag-list <span class="token string">&quot;common&quot;</span> <span class="token punctuation">\\</span>
    --run-untagged<span class="token operator">=</span><span class="token string">&quot;true&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--locked</span><span class="token operator">=</span><span class="token string">&quot;false&quot;</span> <span class="token punctuation">\\</span>
    --access-level<span class="token operator">=</span><span class="token string">&quot;not_protected&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述通过docker直接运行了gitlab-runner register命令，并且直接指定了要配置的参数，这样我们就不必进入容器中配置了，非常方便。 注册号runner后，我们可以在gitlab的CI/CD-&gt;Runners中看到我们刚刚注册的runner了。 <img src="`+t+'" alt=""></p>',31),r=[l];function p(c,o){return n(),s("div",null,r)}const b=a(i,[["render",p],["__file","gitlab和runner如何配置.html.vue"]]),d=JSON.parse('{"path":"/posts/git/gitlab%E5%92%8Crunner%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE.html","title":"gitlab和runner如何配置","lang":"zh-CN","frontmatter":{"title":"gitlab和runner如何配置","date":"2023-10-22T14:57:43.000Z","tags":["gitlab","gitlab-runner","ci/cd","docker"],"categories":"运维"},"headers":[{"level":2,"title":"gitlab 和 gitlab-runner 简介","slug":"gitlab-和-gitlab-runner-简介","link":"#gitlab-和-gitlab-runner-简介","children":[{"level":3,"title":"GitLab","slug":"gitlab","link":"#gitlab","children":[]},{"level":3,"title":"Gitlab Runner","slug":"gitlab-runner","link":"#gitlab-runner","children":[]}]},{"level":2,"title":"搭建Gitlab","slug":"搭建gitlab","link":"#搭建gitlab","children":[{"level":3,"title":"使用docker run运行Gitlab","slug":"使用docker-run运行gitlab","link":"#使用docker-run运行gitlab","children":[]},{"level":3,"title":"配置Gitlab","slug":"配置gitlab","link":"#配置gitlab","children":[]},{"level":3,"title":"使用docker-compose启动Gitlab","slug":"使用docker-compose启动gitlab","link":"#使用docker-compose启动gitlab","children":[]}]},{"level":2,"title":"搭建Gitlab-Runner","slug":"搭建gitlab-runner","link":"#搭建gitlab-runner","children":[]}],"git":{},"filePathRelative":"posts/git/gitlab和runner如何配置.md","excerpt":"<h2>gitlab 和 gitlab-runner 简介</h2>\\n<p>GitLab 和 GitLab Runner 是 GitLab CI/CD（持续集成/持续交付）平台中的两个关键组件。</p>\\n<h3>GitLab</h3>\\n<p>GitLab 是一个基于 Web 的 Git 仓库管理工具和协作平台。它提供了一个完整的 DevOps 平台，包括代码托管、问题跟踪、持续集成/持续交付、容器注册表、监控和协作等功能。GitLab 具有自托管的优势，你可以在自己的服务器上安装和管理 GitLab 实例，也可以选择 GitLab 提供的托管服务。GitLab 采用 Ruby on Rails 开发，拥有强大的版本控制和代码审查功能，并与许多其他工具和服务集成。</p>\\n"}');export{b as comp,d as data};
