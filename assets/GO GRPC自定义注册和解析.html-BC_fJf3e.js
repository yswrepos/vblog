import{_ as n,o as s,c as a,e}from"./app-ATJF5j0V.js";const t={},o=e(`<h2 id="实现自定义注册逻辑-etcd版" tabindex="-1"><a class="header-anchor" href="#实现自定义注册逻辑-etcd版"><span>实现自定义注册逻辑(ETCD版)</span></a></h2><p>实现自定义注册逻辑相对自由，没有接口实现的限制：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> registrar

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	clientv3 <span class="token string">&quot;go.etcd.io/etcd/client/v3&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> EtcdRegistrar <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	client  <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client
	leaseId clientv3<span class="token punctuation">.</span>LeaseID
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewEtcdRegistrar</span><span class="token punctuation">(</span>endpoints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>EtcdRegistrar <span class="token punctuation">{</span>
	cli<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientv3<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
		Endpoints<span class="token punctuation">:</span>   endpoints<span class="token punctuation">,</span>
		DialTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to connect to etcd: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>EtcdRegistrar<span class="token punctuation">{</span>
		client<span class="token punctuation">:</span> cli<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 往etcd注册服务名-地址</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>EtcdRegistrar<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>serviceName <span class="token builtin">string</span><span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">,</span> ttl <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	leaseResp<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Grant</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	r<span class="token punctuation">.</span>leaseId <span class="token operator">=</span> leaseResp<span class="token punctuation">.</span>ID

	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;/%s/%s&quot;</span><span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> clientv3<span class="token punctuation">.</span><span class="token function">WithLease</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>leaseId<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> err
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现自定义解析器-resolver" tabindex="-1"><a class="header-anchor" href="#实现自定义解析器-resolver"><span>实现自定义解析器(Resolver)</span></a></h2><p>要实现 gRPC 中的自定义 <code>Resolver</code>，你需要遵循以下步骤：</p><h3 id="_1-实现-resolver-builder-接口" tabindex="-1"><a class="header-anchor" href="#_1-实现-resolver-builder-接口"><span>1. 实现 <code>resolver.Builder</code> 接口</span></a></h3><h4 id="接口签名" tabindex="-1"><a class="header-anchor" href="#接口签名"><span>接口签名</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Builder creates a resolver that will be used to watch name resolution updates.</span>
<span class="token keyword">type</span> Builder <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// Build creates a new resolver for the given target.</span>
	<span class="token comment">//</span>
	<span class="token comment">// gRPC dial calls Build synchronously, and fails if the returned error is</span>
	<span class="token comment">// not nil.</span>
	<span class="token function">Build</span><span class="token punctuation">(</span>target Target<span class="token punctuation">,</span> cc ClientConn<span class="token punctuation">,</span> opts BuildOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>Resolver<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token comment">// Scheme returns the scheme supported by this resolver.  Scheme is defined</span>
	<span class="token comment">// at https://github.com/grpc/grpc/blob/master/doc/naming.md.  The returned</span>
	<span class="token comment">// string should not contain uppercase characters, as they will not match</span>
	<span class="token comment">// the parsed target&#39;s scheme as defined in RFC 3986.</span>
	<span class="token function">Scheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：<code>Builder</code> 接口用于创建 <code>Resolver</code> 实例。</li><li><strong>方法</strong>： <ul><li><code>Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error)</code>: 根据给定的目标地址、客户端连接接口和构建选项来创建 <code>Resolver</code>。</li><li><code>Scheme() string</code>: 返回这个 <code>Builder</code> 支持的方案（scheme）名称，例如 <code>&quot;myScheme&quot;</code>。</li></ul></li></ul><h3 id="_2-实现-resolver-resolver-接口" tabindex="-1"><a class="header-anchor" href="#_2-实现-resolver-resolver-接口"><span>2. 实现 <code>resolver.Resolver</code> 接口</span></a></h3><h4 id="接口签名-1" tabindex="-1"><a class="header-anchor" href="#接口签名-1"><span>接口签名</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Resolver watches for the updates on the specified target.</span>
<span class="token comment">// Updates include address updates and service config updates.</span>
<span class="token keyword">type</span> Resolver <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// ResolveNow will be called by gRPC to try to resolve the target name</span>
	<span class="token comment">// again. It&#39;s just a hint, resolver can ignore this if it&#39;s not necessary.</span>
	<span class="token comment">//</span>
	<span class="token comment">// It could be called multiple times concurrently.</span>
	<span class="token function">ResolveNow</span><span class="token punctuation">(</span>ResolveNowOptions<span class="token punctuation">)</span>
	<span class="token comment">// Close closes the resolver.</span>
	<span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>目的</strong>：<code>Resolver</code> 接口定义了解析器如何监视目标地址的更新。</li><li><strong>方法</strong>： <ul><li><code>ResolveNow(resolver.ResolveNowOptions)</code>: 当 gRPC 客户端需要立即解析目标地址时，该方法会被调用。</li><li><code>Close()</code>: 当解析器不再需要时，清理资源。</li></ul></li></ul><h3 id="_3-注册自定义-builder" tabindex="-1"><a class="header-anchor" href="#_3-注册自定义-builder"><span>3. 注册自定义 <code>Builder</code></span></a></h3><ul><li><strong>操作</strong>：使用 <code>resolver.Register()</code> 函数注册你的自定义 <code>Builder</code>。</li><li><strong>示例</strong>：<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    resolver<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyResolverBuilder<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="详细叙述每一步的意义" tabindex="-1"><a class="header-anchor" href="#详细叙述每一步的意义"><span>详细叙述每一步的意义：</span></a></h3><h4 id="实现-resolver-builder-接口" tabindex="-1"><a class="header-anchor" href="#实现-resolver-builder-接口"><span>实现 <code>resolver.Builder</code> 接口</span></a></h4><ul><li>这一步是定义如何构建你的自定义解析器的逻辑。<code>Build</code> 方法是创建和初始化 <code>Resolver</code> 实例的关键，它接收目标地址和客户端连接，返回一个 <code>Resolver</code>。<code>Scheme</code> 方法定义了你的解析器将要处理的 URI 方案（scheme），它在 URI 中用于标识使用哪个解析器。</li></ul><h4 id="实现-resolver-resolver-接口" tabindex="-1"><a class="header-anchor" href="#实现-resolver-resolver-接口"><span>实现 <code>resolver.Resolver</code> 接口</span></a></h4><ul><li>这一步是定义解析器的行为。<code>Resolver</code> 负责实际的地址解析逻辑，包括如何响应解析请求和何时更新地址信息。<code>ResolveNow</code> 方法提供了一种机制，让 gRPC 客户端可以要求解析器立即进行解析操作。<code>Close</code> 方法则用于当解析器被废弃时的资源清理工作。</li></ul><h4 id="注册自定义-builder" tabindex="-1"><a class="header-anchor" href="#注册自定义-builder"><span>注册自定义 <code>Builder</code></span></a></h4><ul><li>通过注册过程，你的 <code>Builder</code> 实现被添加到 gRPC 的解析器注册表中。这样，当 gRPC 客户端遇到使用你的方案（scheme）的 URI 时，就会使用你的解析器来处理。注册通常在包的 <code>init</code> 函数中完成，以确保在程序启动时自动进行。</li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> resolver

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	clientv3 <span class="token string">&quot;go.etcd.io/etcd/client/v3&quot;</span>
	<span class="token string">&quot;google.golang.org/grpc/resolver&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> etcdResolver <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	serviceName <span class="token builtin">string</span>
	client      <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewEtcdResolver</span><span class="token punctuation">(</span>endpoints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> serviceName <span class="token builtin">string</span><span class="token punctuation">)</span> resolver<span class="token punctuation">.</span>Builder <span class="token punctuation">{</span>
	cli<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientv3<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
		Endpoints<span class="token punctuation">:</span>   endpoints<span class="token punctuation">,</span>
		DialTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to connect to etcd: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>etcdResolver<span class="token punctuation">{</span>
		serviceName<span class="token punctuation">:</span> serviceName<span class="token punctuation">,</span>
		client<span class="token punctuation">:</span>      cli<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>etcdResolver<span class="token punctuation">)</span> <span class="token function">Build</span><span class="token punctuation">(</span>target resolver<span class="token punctuation">.</span>Target<span class="token punctuation">,</span> cc resolver<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> opts resolver<span class="token punctuation">.</span>BuildOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span>resolver<span class="token punctuation">.</span>Resolver<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	prefix <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;/%s/&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>serviceName<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;prefix&quot;</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> clientv3<span class="token punctuation">.</span><span class="token function">WithPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> addresses <span class="token punctuation">[</span><span class="token punctuation">]</span>resolver<span class="token punctuation">.</span>Address
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> kv <span class="token operator">:=</span> <span class="token keyword">range</span> resp<span class="token punctuation">.</span>Kvs <span class="token punctuation">{</span>
		addr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
		addresses <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>addresses<span class="token punctuation">,</span> resolver<span class="token punctuation">.</span>Address<span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> addr<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 调用resolver.ClientConn通知客户端地址改变</span>
	cc<span class="token punctuation">.</span><span class="token function">UpdateState</span><span class="token punctuation">(</span>resolver<span class="token punctuation">.</span>State<span class="token punctuation">{</span>Addresses<span class="token punctuation">:</span> addresses<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> r<span class="token punctuation">,</span> <span class="token boolean">nil</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>etcdResolver<span class="token punctuation">)</span> <span class="token function">Scheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>                          <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;etcd&quot;</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>etcdResolver<span class="token punctuation">)</span> <span class="token function">ResolveNow</span><span class="token punctuation">(</span>o resolver<span class="token punctuation">.</span>ResolveNowOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>etcdResolver<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resolver-clientconn的作用" tabindex="-1"><a class="header-anchor" href="#resolver-clientconn的作用"><span><code>resolver.ClientConn</code>的作用</span></a></h3><p>在 gRPC 中，<code>ClientConn</code> 接口在自定义解析器的上下文中扮演着重要的角色。这个接口为解析器提供了一种与 gRPC 客户端连接（ClientConn）进行交互的机制。通过这个接口，解析器能够通知 gRPC 客户端关于服务地址或服务配置的任何更新。</p><h3 id="clientconn-接口的作用" tabindex="-1"><a class="header-anchor" href="#clientconn-接口的作用"><span><code>ClientConn</code> 接口的作用</span></a></h3><ol><li><p><strong>更新通知</strong>:</p><ul><li><code>ClientConn</code> 接口包含一组回调函数，这些回调使得解析器能够将服务发现的结果或变化通知给 gRPC 客户端连接。</li><li>例如，当解析器发现新的服务地址时，它可以使用这些回调来更新 gRPC 客户端的连接信息。</li></ul></li><li><p><strong>服务地址和配置管理</strong>:</p><ul><li>解析器通过 <code>ClientConn</code> 接口通知 gRPC 客户端有关服务地址的新信息或变更，以及任何相关的服务配置。</li><li>这包括添加新的服务地址、删除旧的服务地址或更新服务配置。</li></ul></li></ol><h3 id="注释的含义" tabindex="-1"><a class="header-anchor" href="#注释的含义"><span>注释的含义</span></a></h3><p>当注释说“ClientConn contains the callbacks for resolver to notify any updates to the gRPC ClientConn”，这意味着：</p><ul><li><code>ClientConn</code> 接口内部定义了一组回调函数。</li><li>这些回调函数是由解析器调用的，用于将关于服务地址或配置的更新传递给 gRPC 客户端连接。</li><li>解析器利用这些回调来告知 gRPC 客户端它需要知道的任何重要信息，如地址更改、服务配置更新等。</li></ul><h3 id="为什么用回调函数" tabindex="-1"><a class="header-anchor" href="#为什么用回调函数"><span>为什么用回调函数</span></a></h3><p>使用回调函数的设计允许解析器在有新的信息时主动通知 gRPC 客户端，而不是让客户端定期轮询解析器以获取更新。这种推送机制更高效，能够确保 gRPC 客户端及时获得最新的服务信息，从而做出快速响应。</p><p>这个机制对于实现动态服务发现和负载均衡特别重要，因为服务实例可能会经常变化，而客户端需要即时获得这些变化的信息以保持连接的有效性和优化性能。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// ClientConn 包含解析器用来通知 gRPC ClientConn 任何更新的回调函数。</span>
<span class="token comment">//</span>
<span class="token comment">// 这个接口由 gRPC 实现。用户通常不需要全新实现这个接口。像测试这样的情况下，</span>
<span class="token comment">// 新的实现应该嵌入这个接口。这允许 gRPC 向这个接口添加新的方法。</span>
<span class="token keyword">type</span> ClientConn <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token comment">// UpdateState 根据需要更新 ClientConn 的状态。</span>
    <span class="token comment">//</span>
    <span class="token comment">// 如果返回错误，解析器应该再次尝试解析目标。解析器应该使用回退计时器</span>
    <span class="token comment">// 避免对服务器请求过载。如果解析器确信重新解析不会改变结果，</span>
    <span class="token comment">// 比如因为它是基于监视的解析器，返回的错误可以被忽略。</span>
    <span class="token comment">//</span>
    <span class="token comment">// 如果解析出的 State 与上次报告的相同，可以省略调用 UpdateState。</span>
    <span class="token function">UpdateState</span><span class="token punctuation">(</span>State<span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token comment">// ReportError 通知 ClientConn 解析器遇到了错误。ClientConn 将通知负载均衡器，</span>
    <span class="token comment">// 并开始以指数回退的方式调用解析器的 ResolveNow。</span>
    <span class="token function">ReportError</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token comment">// NewAddress 由解析器调用，用于通知 ClientConn 一组新解析出的地址。</span>
    <span class="token comment">// 地址列表应该是完整的解析地址列表。</span>
    <span class="token comment">//</span>
    <span class="token comment">// 已废弃：请改用 UpdateState。</span>
    <span class="token function">NewAddress</span><span class="token punctuation">(</span>addresses <span class="token punctuation">[</span><span class="token punctuation">]</span>Address<span class="token punctuation">)</span>
    <span class="token comment">// NewServiceConfig 由解析器调用，用于通知 ClientConn 一个新的服务配置。</span>
    <span class="token comment">// 服务配置应以 json 字符串形式提供。</span>
    <span class="token comment">//</span>
    <span class="token comment">// 已废弃：请改用 UpdateState。</span>
    <span class="token function">NewServiceConfig</span><span class="token punctuation">(</span>serviceConfig <span class="token builtin">string</span><span class="token punctuation">)</span>
    <span class="token comment">// ParseServiceConfig 解析提供的服务配置，并返回一个提供解析配置的对象。</span>
    <span class="token function">ParseServiceConfig</span><span class="token punctuation">(</span>serviceConfigJSON <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>serviceconfig<span class="token punctuation">.</span>ParseResult
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析器为什么不设计成实现一个接口" tabindex="-1"><a class="header-anchor" href="#解析器为什么不设计成实现一个接口"><span>解析器为什么不设计成实现一个接口</span></a></h2><p>将 <code>resolver.Builder</code> 和 <code>resolver.Resolver</code> 分成两个不同的接口是为了分离关注点，提高代码的模块化和灵活性。这种设计模式允许更清晰地定义每个接口的职责，并使得代码更易于维护和扩展。下面详细解释这样设计的意义：</p><h3 id="_1-分离构建与解析逻辑" tabindex="-1"><a class="header-anchor" href="#_1-分离构建与解析逻辑"><span>1. 分离构建与解析逻辑</span></a></h3><ul><li><strong><code>resolver.Builder</code></strong> 负责创建 <code>resolver.Resolver</code> 的实例。它的主要作用是根据给定的目标地址和构建选项来“构建”或“创建”一个新的解析器。</li><li><strong><code>resolver.Resolver</code></strong> 负责实际的地址解析工作。它需要持续运行，监听地址的变化，并在必要时更新地址信息。</li></ul><p>这种分离确保了解析器的创建和解析逻辑可以独立变化和优化，而不会相互影响。</p><h3 id="_2-提高扩展性和灵活性" tabindex="-1"><a class="header-anchor" href="#_2-提高扩展性和灵活性"><span>2. 提高扩展性和灵活性</span></a></h3><ul><li>通过分开的接口，可以在不修改现有 <code>Resolver</code> 实现的情况下，添加新的 <code>Builder</code> 来支持不同的解析策略或配置。</li><li>这种设计使得添加新的解析器类型或更改解析器的创建逻辑变得更加灵活。</li></ul><h3 id="_3-降低复杂性和提高可维护性" tabindex="-1"><a class="header-anchor" href="#_3-降低复杂性和提高可维护性"><span>3. 降低复杂性和提高可维护性</span></a></h3><ul><li>将复杂的功能分解成更小、更专注的部分，可以降低单个组件的复杂性。</li><li>每个接口专注于一组明确的职责，使得代码更容易理解和维护。</li></ul><h3 id="_4-适应不同的使用场景" tabindex="-1"><a class="header-anchor" href="#_4-适应不同的使用场景"><span>4. 适应不同的使用场景</span></a></h3><ul><li>在某些情况下，可能需要根据运行时的具体条件动态创建不同类型的解析器。<code>Builder</code> 接口允许在运行时根据需要构建适当的 <code>Resolver</code> 实例。</li></ul><h3 id="_5-符合设计模式的最佳实践" tabindex="-1"><a class="header-anchor" href="#_5-符合设计模式的最佳实践"><span>5. 符合设计模式的最佳实践</span></a></h3><ul><li>这种设计模式类似于工厂模式，其中 <code>Builder</code> 充当工厂，负责创建 <code>Resolver</code> 对象。这是一种常见的设计模式，用于创建对象，尤其是在对象的创建过程比较复杂或需要依据不同条件创建不同类型的对象时。</li></ul><p>总的来说，通过将 <code>Builder</code> 和 <code>Resolver</code> 分成两个接口，gRPC 的设计者能够提供一个既灵活又易于管理的解析器架构，使得开发者可以根据自己的需求定制服务发现和地址解析的行为。</p>`,49),p=[o];function c(l,i){return s(),a("div",null,p)}const r=n(t,[["render",c],["__file","GO GRPC自定义注册和解析.html.vue"]]),d=JSON.parse('{"path":"/posts/go/GO%20GRPC%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E5%86%8C%E5%92%8C%E8%A7%A3%E6%9E%90.html","title":"GO GRPC自定义注册和解析","lang":"zh-CN","frontmatter":{"title":"GO GRPC自定义注册和解析","date":"2024-02-29T01:22:48.000Z","tags":["go","grpc","服务发现"],"categories":"go"},"headers":[{"level":2,"title":"实现自定义注册逻辑(ETCD版)","slug":"实现自定义注册逻辑-etcd版","link":"#实现自定义注册逻辑-etcd版","children":[]},{"level":2,"title":"实现自定义解析器(Resolver)","slug":"实现自定义解析器-resolver","link":"#实现自定义解析器-resolver","children":[{"level":3,"title":"1. 实现 resolver.Builder 接口","slug":"_1-实现-resolver-builder-接口","link":"#_1-实现-resolver-builder-接口","children":[]},{"level":3,"title":"2. 实现 resolver.Resolver 接口","slug":"_2-实现-resolver-resolver-接口","link":"#_2-实现-resolver-resolver-接口","children":[]},{"level":3,"title":"3. 注册自定义 Builder","slug":"_3-注册自定义-builder","link":"#_3-注册自定义-builder","children":[]},{"level":3,"title":"详细叙述每一步的意义：","slug":"详细叙述每一步的意义","link":"#详细叙述每一步的意义","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":3,"title":"resolver.ClientConn的作用","slug":"resolver-clientconn的作用","link":"#resolver-clientconn的作用","children":[]},{"level":3,"title":"ClientConn 接口的作用","slug":"clientconn-接口的作用","link":"#clientconn-接口的作用","children":[]},{"level":3,"title":"注释的含义","slug":"注释的含义","link":"#注释的含义","children":[]},{"level":3,"title":"为什么用回调函数","slug":"为什么用回调函数","link":"#为什么用回调函数","children":[]}]},{"level":2,"title":"解析器为什么不设计成实现一个接口","slug":"解析器为什么不设计成实现一个接口","link":"#解析器为什么不设计成实现一个接口","children":[{"level":3,"title":"1. 分离构建与解析逻辑","slug":"_1-分离构建与解析逻辑","link":"#_1-分离构建与解析逻辑","children":[]},{"level":3,"title":"2. 提高扩展性和灵活性","slug":"_2-提高扩展性和灵活性","link":"#_2-提高扩展性和灵活性","children":[]},{"level":3,"title":"3. 降低复杂性和提高可维护性","slug":"_3-降低复杂性和提高可维护性","link":"#_3-降低复杂性和提高可维护性","children":[]},{"level":3,"title":"4. 适应不同的使用场景","slug":"_4-适应不同的使用场景","link":"#_4-适应不同的使用场景","children":[]},{"level":3,"title":"5. 符合设计模式的最佳实践","slug":"_5-符合设计模式的最佳实践","link":"#_5-符合设计模式的最佳实践","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/go/GO GRPC自定义注册和解析.md","excerpt":"<h2>实现自定义注册逻辑(ETCD版)</h2>\\n<p>实现自定义注册逻辑相对自由，没有接口实现的限制：</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> registrar\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"context\\"</span>\\n\\t<span class=\\"token string\\">\\"fmt\\"</span>\\n\\t<span class=\\"token string\\">\\"log\\"</span>\\n\\t<span class=\\"token string\\">\\"time\\"</span>\\n\\n\\tclientv3 <span class=\\"token string\\">\\"go.etcd.io/etcd/client/v3\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">type</span> EtcdRegistrar <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tclient  <span class=\\"token operator\\">*</span>clientv3<span class=\\"token punctuation\\">.</span>Client\\n\\tleaseId clientv3<span class=\\"token punctuation\\">.</span>LeaseID\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">NewEtcdRegistrar</span><span class=\\"token punctuation\\">(</span>endpoints <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span>EtcdRegistrar <span class=\\"token punctuation\\">{</span>\\n\\tcli<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> clientv3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">New</span><span class=\\"token punctuation\\">(</span>clientv3<span class=\\"token punctuation\\">.</span>Config<span class=\\"token punctuation\\">{</span>\\n\\t\\tEndpoints<span class=\\"token punctuation\\">:</span>   endpoints<span class=\\"token punctuation\\">,</span>\\n\\t\\tDialTimeout<span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">5</span> <span class=\\"token operator\\">*</span> time<span class=\\"token punctuation\\">.</span>Second<span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Failed to connect to etcd: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&amp;</span>EtcdRegistrar<span class=\\"token punctuation\\">{</span>\\n\\t\\tclient<span class=\\"token punctuation\\">:</span> cli<span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 往etcd注册服务名-地址</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>r <span class=\\"token operator\\">*</span>EtcdRegistrar<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Register</span><span class=\\"token punctuation\\">(</span>serviceName <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> addr <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> ttl <span class=\\"token builtin\\">int64</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span> <span class=\\"token punctuation\\">{</span>\\n\\tleaseResp<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> r<span class=\\"token punctuation\\">.</span>client<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Grant</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Background</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> ttl<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> err\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tr<span class=\\"token punctuation\\">.</span>leaseId <span class=\\"token operator\\">=</span> leaseResp<span class=\\"token punctuation\\">.</span>ID\\n\\n\\t<span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">=</span> r<span class=\\"token punctuation\\">.</span>client<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Put</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Background</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/%s/%s\\"</span><span class=\\"token punctuation\\">,</span> serviceName<span class=\\"token punctuation\\">,</span> addr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> addr<span class=\\"token punctuation\\">,</span> clientv3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WithLease</span><span class=\\"token punctuation\\">(</span>r<span class=\\"token punctuation\\">.</span>leaseId<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token keyword\\">return</span> err\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>"}');export{r as comp,d as data};
