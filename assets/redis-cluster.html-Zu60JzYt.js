import{_ as n,o as s,c as a,e}from"./app-BLeSCfhf.js";const t={},p=e(`<h2 id="创建网络" tabindex="-1"><a class="header-anchor" href="#创建网络"><span>创建网络</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create redis-cluster-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="启动redis" tabindex="-1"><a class="header-anchor" href="#启动redis"><span>启动redis</span></a></h2><p>创建由3个redis节点</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node1 <span class="token parameter variable">--net</span> redis-cluster-net <span class="token parameter variable">-p</span> <span class="token number">7000</span>:6379 <span class="token parameter variable">-v</span> /docker/redis-cluster/redis-node1:/data redis:6.2 redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> --cluster-enabled <span class="token function">yes</span> --cluster-config-file /data/nodes.conf <span class="token parameter variable">--logfile</span> /data/redis.log --cluster-node-timeout <span class="token number">5000</span> <span class="token parameter variable">--bind</span> <span class="token number">0.0</span>.0.0 <span class="token parameter variable">--requirepass</span> redispwd
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node2 <span class="token parameter variable">--net</span> redis-cluster-net <span class="token parameter variable">-p</span> <span class="token number">7001</span>:6379 <span class="token parameter variable">-v</span> /docker/redis-cluster/redis-node2:/data redis:6.2 redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> --cluster-enabled <span class="token function">yes</span> --cluster-config-file /data/nodes.conf <span class="token parameter variable">--logfile</span> /data/redis.log --cluster-node-timeout <span class="token number">5000</span> <span class="token parameter variable">--bind</span> <span class="token number">0.0</span>.0.0 <span class="token parameter variable">--requirepass</span> redispwd
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node3 <span class="token parameter variable">--net</span> redis-cluster-net <span class="token parameter variable">-p</span> <span class="token number">7002</span>:6379 <span class="token parameter variable">-v</span> /docker/redis-cluster/redis-node3:/data redis:6.2 redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> --cluster-enabled <span class="token function">yes</span> --cluster-config-file /data/nodes.conf <span class="token parameter variable">--logfile</span> /data/redis.log --cluster-node-timeout <span class="token number">5000</span> <span class="token parameter variable">--bind</span> <span class="token number">0.0</span>.0.0 <span class="token parameter variable">--requirepass</span> redispwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建由3个redis-master节点构成的集群" tabindex="-1"><a class="header-anchor" href="#创建由3个redis-master节点构成的集群"><span>创建由3个redis master节点构成的集群</span></a></h2><p>先查看redis节点ip</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect <span class="token parameter variable">-f</span> <span class="token string">&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39;</span> redis-node1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建集群</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--net</span> redis-cluster-net redis:6.2 redis-cli <span class="token parameter variable">--cluster</span> create <span class="token number">172.19</span>.0.3:6379 <span class="token number">172.19</span>.0.4:6379 <span class="token number">172.19</span>.0.5:6379 --cluster-replicas <span class="token number">0</span> <span class="token parameter variable">--a</span> redispwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>--cluster-replicas 0 代表每个节点都没有备用节点 备用节点会复制主节点数据，如果主节点挂掉，会重新启用备用节点升级为master节点</li></ul><h2 id="连接集群查看集群状态" tabindex="-1"><a class="header-anchor" href="#连接集群查看集群状态"><span>连接集群查看集群状态</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--net</span> redis-cluster-net redis redis-cli <span class="token parameter variable">-c</span> <span class="token parameter variable">-h</span> <span class="token number">172.18</span>.0.2 <span class="token parameter variable">-p</span> <span class="token number">6379</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>cluster nodes：这将显示集群中所有节点的详细信息，包括它们的角色（如主节点或从节点）、状态、分片等。 cluster info：提供集群的一般信息。 cluster slots：显示关于键空间分片的信息。</p><h2 id="crc16简介" tabindex="-1"><a class="header-anchor" href="#crc16简介"><span>crc16简介</span></a></h2><p>redis集群校验和 计算crc16校验和与16384（集群的 hash slot 总数）进行模运算，得到的结果决定了 key 应该存储在哪个 hash slot 中。</p><h2 id="使用golang连接" tabindex="-1"><a class="header-anchor" href="#使用golang连接"><span>使用golang连接</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;github.com/go-redis/redis/v8&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> ctx <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	rdb <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewClusterClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>ClusterOptions<span class="token punctuation">{</span>
		Addrs<span class="token punctuation">:</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;172.19.0.3:6379&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;172.19.0.4:6379&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;172.19.0.5:6379&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		Password<span class="token punctuation">:</span> <span class="token string">&quot;redispwd&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> rdb<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;Welcome&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/ping&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> rdb<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;ping&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pong&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		val<span class="token punctuation">,</span> err <span class="token operator">:=</span> rdb<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;ping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
				<span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> val<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker中启动" tabindex="-1"><a class="header-anchor" href="#docker中启动"><span>docker中启动</span></a></h2><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>dockerfile</span></a></h3><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> golang:1.21-alpine <span class="token keyword">as</span> builder </span>

<span class="token instruction"><span class="token keyword">ENV</span> http_proxy http://proxy-addr:proxy-port</span>
<span class="token instruction"><span class="token keyword">ENV</span> https_proxy http://proxy-addr:proxy-port</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token instruction"><span class="token keyword">COPY</span> go.mod go.sum ./</span>

<span class="token instruction"><span class="token keyword">RUN</span> go mod download -x</span>

<span class="token instruction"><span class="token keyword">COPY</span> . . </span>

<span class="token instruction"><span class="token keyword">RUN</span> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o my-gin-web .</span>


<span class="token instruction"><span class="token keyword">FROM</span> alpine:latest</span>

<span class="token instruction"><span class="token keyword">RUN</span> apk --no-cache add ca-certificates</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /root/</span>

<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /app/my-gin-web .</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;./my-gin-web&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构建dockerfile" tabindex="-1"><a class="header-anchor" href="#构建dockerfile"><span>构建dockerfile</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> my-gin-web <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="启动go服务" tabindex="-1"><a class="header-anchor" href="#启动go服务"><span>启动go服务</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">10080</span>:8080 <span class="token parameter variable">--net</span> redis-cluster-net my-gin-web:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25),i=[p];function l(c,o){return s(),a("div",null,i)}const u=n(t,[["render",l],["__file","redis-cluster.html.vue"]]),d=JSON.parse('{"path":"/posts/docker/redis-cluster.html","title":"docker redis集群","lang":"zh-CN","frontmatter":{"title":"docker redis集群","date":"2023-11-26T23:42:02.000Z","tags":null},"headers":[{"level":2,"title":"创建网络","slug":"创建网络","link":"#创建网络","children":[]},{"level":2,"title":"启动redis","slug":"启动redis","link":"#启动redis","children":[]},{"level":2,"title":"创建由3个redis master节点构成的集群","slug":"创建由3个redis-master节点构成的集群","link":"#创建由3个redis-master节点构成的集群","children":[]},{"level":2,"title":"连接集群查看集群状态","slug":"连接集群查看集群状态","link":"#连接集群查看集群状态","children":[]},{"level":2,"title":"crc16简介","slug":"crc16简介","link":"#crc16简介","children":[]},{"level":2,"title":"使用golang连接","slug":"使用golang连接","link":"#使用golang连接","children":[]},{"level":2,"title":"docker中启动","slug":"docker中启动","link":"#docker中启动","children":[{"level":3,"title":"dockerfile","slug":"dockerfile","link":"#dockerfile","children":[]},{"level":3,"title":"构建dockerfile","slug":"构建dockerfile","link":"#构建dockerfile","children":[]},{"level":3,"title":"启动go服务","slug":"启动go服务","link":"#启动go服务","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/docker/redis-cluster.md","excerpt":"<h2>创建网络</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> network create redis-cluster-net\\n</code></pre></div>"}');export{u as comp,d as data};
