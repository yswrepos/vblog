import{_ as n,o as s,c as a,e as t}from"./app-CinGCuEv.js";const p={},e=t(`<h2 id="async的使用" tabindex="-1"><a class="header-anchor" href="#async的使用"><span>@Async的使用</span></a></h2><p>在 Spring Boot 中实现异步操作通常使用 <code>@Async</code> 注解。<code>@Async</code> 注解可以应用于方法级别，用于表示该方法是异步执行的，即方法的调用将在一个单独的线程中执行，而不会阻塞当前线程。</p><p>要启用 Spring Boot 中的异步操作，通常需要以下几个步骤：</p><ol><li><p><strong>在 Spring Boot 应用程序的配置类上启用异步支持</strong>：你需要确保在 Spring Boot 应用程序的配置类上启用异步支持。可以通过在配置类上添加 <code>@EnableAsync</code> 注解来实现。这个注解告诉 Spring Boot 启用异步执行支持。</p></li><li><p><strong>在要执行异步操作的方法上添加 @Async 注解</strong>：你需要在想要异步执行的方法上添加 <code>@Async</code> 注解。这个注解告诉 Spring Boot 将这个方法的调用放在一个独立的线程中执行。</p></li></ol><p>下面是一个简单的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAsync</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSomethingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里执行异步操作</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">&quot;Async operation completed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>MyService</code> 类中的 <code>doSomethingAsync()</code> 方法被标记为异步执行的，因此该方法的调用将在一个独立的线程中执行。<code>@EnableAsync</code> 注解告诉 Spring Boot 启用异步执行支持。</p><p>需要注意的是，为了使 <code>@Async</code> 注解生效，你的 Spring Boot 应用程序必须配置一个合适的线程池。否则，默认情况下，Spring Boot 会使用一个简单的线程池来执行异步方法，但在生产环境中，你可能需要根据自己的需求配置一个定制的线程池。</p><h2 id="async的实现" tabindex="-1"><a class="header-anchor" href="#async的实现"><span>@Async的实现</span></a></h2><p>在 Spring Boot 中，异步操作的底层实现主要依赖于 Spring 框架的 <code>TaskExecutor</code> 接口和线程池来管理异步任务的执行。下面是 Spring Boot 中异步操作的底层实现方式：</p><ol><li><p><strong>TaskExecutor 接口</strong>：<code>TaskExecutor</code> 是 Spring 框架中定义的一个接口，它用于执行任务。<code>TaskExecutor</code> 接口定义了一个 <code>execute()</code> 方法，用于执行给定的任务。Spring Boot 通过 <code>TaskExecutor</code> 来执行异步方法。</p></li><li><p><strong>ThreadPoolTaskExecutor</strong>：Spring Boot 默认使用 <code>ThreadPoolTaskExecutor</code> 类来实现 <code>TaskExecutor</code> 接口。<code>ThreadPoolTaskExecutor</code> 是一个线程池实现，它提供了在多线程环境中执行任务的功能。你可以通过配置来调整线程池的大小、队列容量、拒绝策略等参数，以满足不同的需求。</p></li><li><p><strong>@Async 注解</strong>：Spring Boot 中的 <code>@Async</code> 注解用于标记异步执行的方法。当一个被 <code>@Async</code> 注解标记的方法被调用时，Spring Boot 会将该方法的执行委托给 <code>TaskExecutor</code> 来异步执行，而不是在当前线程中同步执行。</p></li><li><p><strong>CompletableFuture</strong>：在异步方法的返回值类型中，通常使用 <code>CompletableFuture</code> 或者 <code>ListenableFuture</code> 来表示异步操作的结果。<code>CompletableFuture</code> 提供了方便的方法来处理异步操作的结果，比如等待操作完成、处理操作结果、处理异常等。</p></li></ol><p>总的来说，Spring Boot 的异步操作实现基于线程池和 <code>TaskExecutor</code> 接口，在方法被标记为异步执行时，Spring Boot 将会把这些任务委托给线程池中的线程来异步执行，从而提高系统的并发能力和响应性。</p><h2 id="同步等待异步结果" tabindex="-1"><a class="header-anchor" href="#同步等待异步结果"><span>同步等待异步结果</span></a></h2><p>在使用 <code>CompletableFuture</code> 返回异步结果的情况下，调用方可以通过 <code>CompletableFuture</code> 对象来接收异步操作的结果。具体来说，调用方可以使用 <code>CompletableFuture</code> 提供的方法来等待异步操作完成并获取其结果。</p><p>以下是一个示例，展示了如何接收异步操作的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/async-operation&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">performAsyncOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureResult <span class="token operator">=</span> myService<span class="token punctuation">.</span><span class="token function">doSomethingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 使用 CompletableFuture 的 get() 方法等待异步操作完成并获取结果</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> futureResult<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token string">&quot;Result of async operation: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>MyController</code> 类中的 <code>performAsyncOperation()</code> 方法调用了 <code>MyService</code> 中的 <code>doSomethingAsync()</code> 方法，并获取了返回的 <code>CompletableFuture</code> 对象。然后，通过调用 <code>futureResult.get()</code> 方法等待异步操作完成，并获取其结果。</p><p>需要注意的是，<code>CompletableFuture</code> 的 <code>get()</code> 方法是一个阻塞方法，调用它会阻塞当前线程，直到异步操作完成并返回结果。在实际应用中，你可能需要考虑使用 <code>CompletableFuture</code> 提供的其他方法，比如 <code>thenApply()</code>、<code>thenAccept()</code>、<code>thenCompose()</code> 等，来处理异步操作的结果或执行后续的操作，而不是直接调用 <code>get()</code> 方法。</p><h2 id="异步处理执行结果" tabindex="-1"><a class="header-anchor" href="#异步处理执行结果"><span>异步处理执行结果</span></a></h2><p><code>thenApply()</code> 方法是 <code>CompletableFuture</code> 类的一种组合操作，它允许您在异步操作完成后执行一个函数来处理结果。该方法会自动等待异步操作完成，然后将异步操作的结果作为参数传递给指定的函数，并返回一个新的 <code>CompletableFuture</code> 对象，该对象包含函数处理后的结果。</p><p>在 <code>thenApply()</code> 方法中，您无需显式检查异步操作是否完成。<code>thenApply()</code> 方法会在异步操作完成后自动调用指定的函数。因此，您只需要提供一个处理结果的函数，而不必担心异步操作的状态。</p><p>如果您需要在异步操作完成时执行特定的回调函数，您可以使用 <code>thenApply()</code> 的变体 <code>thenApplyAsync()</code> 或 <code>thenAcceptAsync()</code>，并传递一个 <code>Executor</code> 参数来指定回调函数执行的线程池。这样可以确保回调函数在另一个线程中执行，而不会阻塞当前线程。</p><p>下面是一个示例，演示了如何使用 <code>thenApplyAsync()</code> 方法来执行回调函数，并在回调函数中处理异步操作的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个线程池用于执行回调函数</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/async-operation&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">performAsyncOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureResult <span class="token operator">=</span> myService<span class="token punctuation">.</span><span class="token function">doSomethingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 使用 thenApplyAsync() 方法执行回调函数，并指定线程池</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> processedResult <span class="token operator">=</span> futureResult<span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在回调函数中处理异步操作的结果</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Result of async operation: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> processedResult<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>thenApplyAsync()</code> 方法被用来执行回调函数，并传递了一个自定义的线程池 <code>executor</code>。这样，回调函数将在指定的线程池中执行，而不会阻塞当前线程。</p><h2 id="可靠性探讨" tabindex="-1"><a class="header-anchor" href="#可靠性探讨"><span>可靠性探讨</span></a></h2><p>Java 中的异步操作可以说是可靠的，但其可靠性取决于开发人员如何编写和管理异步代码。异步编程通常涉及多线程或者回调机制，这些都需要开发人员小心地处理并发和同步问题，以确保程序的正确性和可靠性。</p><p>以下是确保 Java 异步操作可靠性的一些建议：</p><ol><li><p><strong>线程安全性：</strong> 如果在多个线程之间共享数据，确保共享数据的访问是线程安全的。使用同步机制（如 synchronized 关键字或者 Lock 接口）来保护共享资源的访问，或者使用线程安全的集合类。</p></li><li><p><strong>异常处理：</strong> 在异步操作中及时捕获和处理异常。确保适当地处理异步操作中可能发生的异常，以避免程序出现未捕获的异常导致的不可预料的行为。</p></li><li><p><strong>线程池管理：</strong> 合理配置线程池参数，避免因线程池过大导致资源耗尽，或者过小导致性能不佳。考虑使用有界队列来缓冲任务，以控制系统资源的使用。</p></li><li><p><strong>内存管理：</strong> 确保异步操作不会导致内存泄漏。及时释放不再需要的对象，避免持有对长生命周期对象的引用。</p></li><li><p><strong>并发性能：</strong> 考虑异步操作对系统性能的影响，特别是在高并发场景下。评估并发操作的开销，确保系统在面对高并发负载时能够保持稳定性和可靠性。</p></li><li><p><strong>测试和调试：</strong> 编写充分的单元测试和集成测试来验证异步代码的正确性和稳定性。使用调试工具和日志记录来识别和解决潜在的问题。</p></li></ol><p>总之，Java 中的异步操作可以是可靠的，但是开发人员需要注意并发和同步问题，并采取适当的措施来确保异步操作的正确性和可靠性。</p>`,30),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","java @Async的执行.html.vue"]]),k=JSON.parse('{"path":"/posts/java/java%20@Async%E7%9A%84%E6%89%A7%E8%A1%8C.html","title":"java @Async的执行","lang":"zh-CN","frontmatter":{"title":"java @Async的执行","date":"2024-03-01T10:25:20.000Z","tags":["java","异步"],"categories":"java","description":"@Async的使用 在 Spring Boot 中实现异步操作通常使用 @Async 注解。@Async 注解可以应用于方法级别，用于表示该方法是异步执行的，即方法的调用将在一个单独的线程中执行，而不会阻塞当前线程。 要启用 Spring Boot 中的异步操作，通常需要以下几个步骤： 在 Spring Boot 应用程序的配置类上启用异步支持：你需要...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/java/java%20@Async%E7%9A%84%E6%89%A7%E8%A1%8C.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"java @Async的执行"}],["meta",{"property":"og:description","content":"@Async的使用 在 Spring Boot 中实现异步操作通常使用 @Async 注解。@Async 注解可以应用于方法级别，用于表示该方法是异步执行的，即方法的调用将在一个单独的线程中执行，而不会阻塞当前线程。 要启用 Spring Boot 中的异步操作，通常需要以下几个步骤： 在 Spring Boot 应用程序的配置类上启用异步支持：你需要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"异步"}],["meta",{"property":"article:published_time","content":"2024-03-01T10:25:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java @Async的执行\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-01T10:25:20.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"@Async的使用","slug":"async的使用","link":"#async的使用","children":[]},{"level":2,"title":"@Async的实现","slug":"async的实现","link":"#async的实现","children":[]},{"level":2,"title":"同步等待异步结果","slug":"同步等待异步结果","link":"#同步等待异步结果","children":[]},{"level":2,"title":"异步处理执行结果","slug":"异步处理执行结果","link":"#异步处理执行结果","children":[]},{"level":2,"title":"可靠性探讨","slug":"可靠性探讨","link":"#可靠性探讨","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/java/java @Async的执行.md","excerpt":"<h2>@Async的使用</h2>\\n<p>在 Spring Boot 中实现异步操作通常使用 <code>@Async</code> 注解。<code>@Async</code> 注解可以应用于方法级别，用于表示该方法是异步执行的，即方法的调用将在一个单独的线程中执行，而不会阻塞当前线程。</p>\\n<p>要启用 Spring Boot 中的异步操作，通常需要以下几个步骤：</p>\\n<ol>\\n<li>\\n<p><strong>在 Spring Boot 应用程序的配置类上启用异步支持</strong>：你需要确保在 Spring Boot 应用程序的配置类上启用异步支持。可以通过在配置类上添加 <code>@EnableAsync</code> 注解来实现。这个注解告诉 Spring Boot 启用异步执行支持。</p>\\n</li>\\n<li>\\n<p><strong>在要执行异步操作的方法上添加 @Async 注解</strong>：你需要在想要异步执行的方法上添加 <code>@Async</code> 注解。这个注解告诉 Spring Boot 将这个方法的调用放在一个独立的线程中执行。</p>\\n</li>\\n</ol>\\n<p>下面是一个简单的示例：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>boot<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">SpringApplication</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>boot<span class=\\"token punctuation\\">.</span>autoconfigure<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">SpringBootApplication</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>scheduling<span class=\\"token punctuation\\">.</span>annotation<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">EnableAsync</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>scheduling<span class=\\"token punctuation\\">.</span>annotation<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Async</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token annotation punctuation\\">@SpringBootApplication</span>\\n<span class=\\"token annotation punctuation\\">@EnableAsync</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyApplication</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">SpringApplication</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">MyApplication</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token annotation punctuation\\">@Service</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyService</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Async</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">CompletableFuture</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">doSomethingAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 这里执行异步操作</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">CompletableFuture</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">completedFuture</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Async operation completed\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{r as comp,k as data};
