import{_ as n,o as s,c as a,e}from"./app-ATJF5j0V.js";const p={},t=e(`<h2 id="动态查找入口文件" tabindex="-1"><a class="header-anchor" href="#动态查找入口文件"><span>动态查找入口文件</span></a></h2><h3 id="动态查找以-index-开头的-js-文件" tabindex="-1"><a class="header-anchor" href="#动态查找以-index-开头的-js-文件"><span>动态查找以 <code>index</code> 开头的 <code>.js</code> 文件</span></a></h3><p>要查找 <code>src</code> 目录及其子目录下所有以 <code>index</code> 开头的 <code>.js</code> 文件，我们需要递归地遍历目录。这里是一个使用 Node.js 脚本来实现这个需求的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 递归地查找文件</span>
<span class="token keyword">function</span> <span class="token function">findFiles</span><span class="token punctuation">(</span><span class="token parameter">directory<span class="token punctuation">,</span> pattern</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">withFileTypes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dirent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fullPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> dirent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dirent<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>results<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">findFiles</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 递归查找</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>dirent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> results<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义入口目录和匹配模式</span>
<span class="token keyword">const</span> srcDirectory <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^index.*\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 匹配以 &#39;index&#39; 开头的 .js 文件</span>

<span class="token comment">// 动态构建入口对象</span>
<span class="token keyword">const</span> entryFiles <span class="token operator">=</span> <span class="token function">findFiles</span><span class="token punctuation">(</span>srcDirectory<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> entry <span class="token operator">=</span> entryFiles<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>srcDirectory<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  entries<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> file<span class="token punctuation">;</span>
  <span class="token keyword">return</span> entries<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Webpack 配置</span>
<span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> entry<span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 其他配置...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会递归地查找所有符合模式的文件，并为它们每一个构建一个入口。</p><h3 id="默认的入口文件-index-js-输出为-main-js" tabindex="-1"><a class="header-anchor" href="#默认的入口文件-index-js-输出为-main-js"><span>默认的入口文件 <code>index.js</code> 输出为 <code>main.js</code></span></a></h3><p>当你没有在 webpack 配置中明确指定输出文件的名称时，webpack 使用默认的输出配置。在很多情况下，如果你的入口点是单一的且未指定输出文件名，webpack 会将这个入口点的输出文件命名为 <code>main.js</code>。这是因为 webpack 的默认入口键名是 <code>main</code>。</p><p>如果你想要自定义输出文件名，你可以在 <code>output</code> 配置的 <code>filename</code> 属性中使用占位符，如 <code>[name].js</code>，这样输出文件名就会基于入口点的键名。在上面的例子中，我们已经通过动态构建入口对象并设置 <code>filename: &#39;[name].bundle.js&#39;</code> 来实现了这一点，其中 <code>[name]</code> 会被替换成入口对象键名，从而控制输出文件的名称。</p><h2 id="chunk-bundle的区别" tabindex="-1"><a class="header-anchor" href="#chunk-bundle的区别"><span>chunk bundle的区别</span></a></h2><p>在 webpack 的上下文中，&quot;chunk&quot; 和 &quot;bundle&quot; 是两个核心概念，它们在构建过程中扮演着不同的角色。理解它们之间的区别对于有效地使用 webpack 和优化你的构建输出非常重要。</p><h3 id="chunk" tabindex="-1"><a class="header-anchor" href="#chunk"><span>Chunk</span></a></h3><p>&quot;Chunk&quot; 是 webpack 内部处理模块的一个中间步骤。在 webpack 处理你的应用程序时，它会从一个或多个入口点开始，解析你的项目中的模块依赖关系，这些模块被组织成了多个 chunk。Chunk 是模块的物理或逻辑集合，它们表示了如何将代码分割和组合在一起。</p><p>Chunk 有几种类型：</p><ul><li><strong>入口 Chunk（Entry Chunk）</strong>：对应于一个入口点。它包含了从该入口点开始依赖的所有模块。</li><li><strong>普通 Chunk（Normal Chunk）</strong>：通过代码分割创建的 chunk，可以是由于动态导入（例如，使用 <code>import()</code>）或通过配置分割代码产生的。</li><li><strong>运行时 Chunk（Runtime Chunk）</strong>：包含了 webpack 的运行时和模块加载器的代码，负责加载和解析 chunk。</li><li><strong>供应商 Chunk（Vendor Chunk）</strong>：通常包含来自 <code>node_modules</code> 目录的第三方库。</li></ul><h3 id="bundle" tabindex="-1"><a class="header-anchor" href="#bundle"><span>Bundle</span></a></h3><p>&quot;Bundle&quot; 是 webpack 构建过程的最终产物，是将一个或多个 chunk 经过打包、优化和压缩后生成的文件。每个 bundle 文件都是可以直接在浏览器中加载的资源。简单来说，bundle 是最终被浏览器使用的代码文件，它可能包含了一个或多个 chunk 的代码。</p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h3><ul><li><strong>Chunk</strong> 是 webpack 处理过程中的一个概念，它代表了代码的中间状态。Chunk 描述了不同的代码块如何被组织和分割，它是优化构建结果、实现代码分割和懒加载的关键。</li><li><strong>Bundle</strong> 是最终输出的文件，是可以在浏览器中直接使用的静态资源。每个 bundle 通常包含了一个或多个 chunk 的代码。</li></ul><h3 id="为什么这个区别重要" tabindex="-1"><a class="header-anchor" href="#为什么这个区别重要"><span>为什么这个区别重要</span></a></h3><ul><li><strong>性能优化</strong>：通过理解 chunk 和 bundle 的概念，你可以更好地控制代码的分割和加载，比如通过懒加载来减少初始加载时间，或者将第三方库代码分割到单独的 bundle 中以提高缓存利用率。</li><li><strong>构建配置</strong>：webpack 配置中的很多选项，如 <code>splitChunks</code> 和 <code>runtimeChunk</code>，都是围绕如何生成和管理 chunk 设计的。理解这些概念可以帮助你更有效地配置这些选项，从而优化构建输出。</li></ul><p>总的来说，chunk 是 webpack 内部的代码组织单位，而 bundle 是最终给浏览器使用的输出文件。理解它们之间的区别和联系对于有效地使用 webpack 来说是非常重要的。</p><h2 id="chunks的几个值" tabindex="-1"><a class="header-anchor" href="#chunks的几个值"><span>chunks的几个值</span></a></h2><p>在 webpack 的 <code>splitChunks</code> 配置中，<code>chunks</code> 选项决定了哪些 chunk 会被选中用于优化。设置为 <code>&#39;all&#39;</code> 意味着所有类型的 chunk（包括异步和非异步的）都将被考虑用于分割。这是一个重要的配置，因为它允许 webpack 对入口（initial）、异步（async）和所有导入的模块进行分割，从而优化整个项目的 chunk。</p><h3 id="chunks-all-的具体含义" tabindex="-1"><a class="header-anchor" href="#chunks-all-的具体含义"><span><code>chunks: &#39;all&#39;</code> 的具体含义：</span></a></h3><ul><li><strong><code>&#39;async&#39;</code>（默认值）</strong>：仅分割那些动态导入的模块。这是用于按需加载时的默认行为。</li><li><strong><code>&#39;initial&#39;</code></strong>：仅分割那些初始加载时就需要的模块，即入口点开始的同步导入。</li><li><strong><code>&#39;all&#39;</code></strong>：无论模块是动态还是静态导入，都将进行分割。使用这个选项可以更细致地控制网页的加载时间，通过将第三方库（通常较大且不常改变）分割到独立的 bundle 中，来利用浏览器缓存和减少初始加载时间。</li></ul><p>当设置为 <code>&#39;all&#39;</code> 时，结合 <code>cacheGroups</code> 配置，webpack 会更智能地决定如何最好地分割代码，以便于实现更有效的代码分割策略。例如，你可以将来自 <code>node_modules</code> 的代码分割到一个单独的 bundle 中，同时还可以决定哪些是你的应用代码中需要同步加载的部分，哪些是可以异步加载的部分，从而使得初始页面加载更快，同时提供按需加载的代码分割功能。</p><p>使用 <code>chunks: &#39;all&#39;</code> 配置是优化大型应用加载性能的一个常见策略，它有助于实现精细的资源控制和更高效的浏览器缓存利用。</p><h2 id="commons-chunk解析" tabindex="-1"><a class="header-anchor" href="#commons-chunk解析"><span>commons chunk解析</span></a></h2><p>这段配置定义了一个名为 <code>commons</code> 的 <code>cacheGroup</code>，它是 webpack 的 <code>splitChunks</code> 插件的一部分。<code>splitChunks</code> 插件用于优化代码，通过分割 chunks 来减少加载时间和提升缓存利用率。这个特定的 <code>commons</code> 配置旨在提取和分离那些跨多个入口 chunk 共享的模块。下面是这个配置每个选项的详细解释：</p><h3 id="chunks-initial" tabindex="-1"><a class="header-anchor" href="#chunks-initial"><span><code>chunks: &quot;initial&quot;</code></span></a></h3><ul><li>这个选项指定了插件应该选择哪些 chunks 来寻找共享的模块。设置为 <code>&quot;initial&quot;</code> 意味着只考虑初始加载时需要的 chunks（即那些通过入口点引入的同步加载模块），而不考虑异步加载的模块（如通过 <code>import()</code> 动态导入的模块）。</li></ul><h3 id="minchunks-2" tabindex="-1"><a class="header-anchor" href="#minchunks-2"><span><code>minChunks: 2</code></span></a></h3><ul><li>这个选项指定了一个模块必须被多少个不同的 chunks 引用才能被提取到 <code>commons</code> chunk 中。设置为 <code>2</code> 意味着只有当一个模块至少被两个不同的入口 chunk 引用时，它才会被提取出来。这有助于避免单独为仅被一个入口使用的模块创建额外的 chunk，从而减小总体积。</li></ul><h3 id="maxinitialrequests-5" tabindex="-1"><a class="header-anchor" href="#maxinitialrequests-5"><span><code>maxInitialRequests: 5</code></span></a></h3><ul><li>这个选项限制了每个入口点的初始页面加载时应该产生的最大请求数量。它是为了进一步控制 HTTP 请求的数量，提升页面加载性能。<code>5</code> 表示每个入口点在加载时，最多只能有 5 个并行的请求用于加载初始 chunks。</li></ul><h3 id="minsize-0" tabindex="-1"><a class="header-anchor" href="#minsize-0"><span><code>minSize: 0</code></span></a></h3><ul><li>这个选项指定了被提取的模块的最小大小（以字节为单位）。设置为 <code>0</code> 意味着即使模块很小，也会被提取出来，如果它们满足其他条件（如 <code>minChunks</code>）。这有助于确保即使是非常小的共享模块也能被提取和重用，尽管这可能会导致生成更多的 chunks。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>这个 <code>commons</code> 配置通过识别和提取那些在初始加载时被两个或更多入口共享的模块，帮助减少重复代码和优化代码的加载。它特别关注于初始加载性能，通过限制请求数量和允许提取小模块来提升用户体验。这种配置对于有多个入口点并且有共享依赖的大型应用来说尤其有用。</p><h2 id="使用webpack-bundle-analyzer-分析-bundle" tabindex="-1"><a class="header-anchor" href="#使用webpack-bundle-analyzer-分析-bundle"><span>使用<code>webpack-bundle-analyzer</code> 分析 bundle</span></a></h2><ul><li>使用 <code>webpack-bundle-analyzer</code> 插件来分析你的 bundle。这个工具可以帮助你可视化和理解你的 bundle 包含哪些模块，以及它们是如何被打包在一起的。</li><li>安装 <code>webpack-bundle-analyzer</code> 并在 webpack 配置中添加它，以查看详细的打包信息。</li></ul><h3 id="示例-webpack-bundle-analyzer-配置" tabindex="-1"><a class="header-anchor" href="#示例-webpack-bundle-analyzer-配置"><span>示例 <code>webpack-bundle-analyzer</code> 配置：</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-bundle-analyzer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 其他配置...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 webpack 构建后，<code>webpack-bundle-analyzer</code> 将会在浏览器中打开一个包含你所有 bundle 详细信息的页面，从中你可以看到是否有 <code>lodash</code> 相关的 chunk 被创建，以及它们的大小和包含的模块。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>如果以上步骤仍未能解决问题，可能需要更具体地审查项目的整体配置和代码结构。有时候，问题的根源可能与特定的项目设置或者代码中不易察觉的细节有关。</p><h2 id="webpack-conf-js示例" tabindex="-1"><a class="header-anchor" href="#webpack-conf-js示例"><span>webpack.conf.js示例</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;glob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-bundle-analyzer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 其他配置...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// // 使用 glob 搜索所有以 &#39;index&#39; 开头的 js 文件</span>
<span class="token keyword">const</span> entryFiles <span class="token operator">=</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/**/index*.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> entries <span class="token operator">=</span> entryFiles<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 生成每个入口的键名，去掉 src/ 前缀并将斜杠替换为下划线</span>
  <span class="token comment">// 这是为了确保键名的唯一性和文件名的有效性</span>
  <span class="token keyword">const</span> entryKey <span class="token operator">=</span> file
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// console.log(&quot;entryKey&quot;, entryKey, &quot;file&quot;, file)</span>
  entries<span class="token punctuation">[</span>entryKey<span class="token punctuation">]</span> <span class="token operator">=</span> file<span class="token punctuation">;</span>
  <span class="token keyword">return</span> entries<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span>

<span class="token comment">// entries是个对象</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> entries<span class="token punctuation">,</span>
  <span class="token comment">// entry: &quot;./src/index.js&quot;,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].[contenthash].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&#39;[name].chunk.[contenthash].js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 用于非入口的 chunk 文件</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用 CleanWebpackPlugin</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">runtimeChunk</span><span class="token operator">:</span> <span class="token string">&quot;single&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">commons</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;initial&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> 
          <span class="token literal-property property">maxInitialRequests</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
          <span class="token literal-property property">minSize</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 可以分离出lodash</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]lodash[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 这里打开能分离出vendors-other</span>
          <span class="token comment">// test: /[\\\\/]node_modules[\\\\/]/,</span>
          <span class="token comment">// 现在这样无法分离出lodash之外的vendor（我index.js除了lodash还引用了moment），</span>
          <span class="token comment">// 而是将moment放在了和index.js一起</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span>  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/](?!lodash)[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;vendor-other&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// chunks: &#39;all&#39;, // 这将会自动分割第三方库（node_modules里的库）和你的异步模块到不同的 chunk</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token comment">// src/a.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;a module&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// src/index.js</span>
<span class="token keyword">import</span> name <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
<span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> debounce <span class="token keyword">from</span> <span class="token string">&#39;lodash/debounce&#39;</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;webpack&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The current date and time is: &quot;</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>


<span class="token comment">// src/index-1.js</span>

<span class="token keyword">import</span> name <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;index-1&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","webpack chunk.html.vue"]]),k=JSON.parse(`{"path":"/posts/frontend/webpack%20chunk.html","title":"webpack chunk","lang":"zh-CN","frontmatter":{"title":"webpack chunk","date":"2024-03-27T03:48:36.000Z","tags":["webpack"],"categories":"frontend"},"headers":[{"level":2,"title":"动态查找入口文件","slug":"动态查找入口文件","link":"#动态查找入口文件","children":[{"level":3,"title":"动态查找以 index 开头的 .js 文件","slug":"动态查找以-index-开头的-js-文件","link":"#动态查找以-index-开头的-js-文件","children":[]},{"level":3,"title":"默认的入口文件 index.js 输出为 main.js","slug":"默认的入口文件-index-js-输出为-main-js","link":"#默认的入口文件-index-js-输出为-main-js","children":[]}]},{"level":2,"title":"chunk bundle的区别","slug":"chunk-bundle的区别","link":"#chunk-bundle的区别","children":[{"level":3,"title":"Chunk","slug":"chunk","link":"#chunk","children":[]},{"level":3,"title":"Bundle","slug":"bundle","link":"#bundle","children":[]},{"level":3,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":3,"title":"为什么这个区别重要","slug":"为什么这个区别重要","link":"#为什么这个区别重要","children":[]}]},{"level":2,"title":"chunks的几个值","slug":"chunks的几个值","link":"#chunks的几个值","children":[{"level":3,"title":"chunks: 'all' 的具体含义：","slug":"chunks-all-的具体含义","link":"#chunks-all-的具体含义","children":[]}]},{"level":2,"title":"commons chunk解析","slug":"commons-chunk解析","link":"#commons-chunk解析","children":[{"level":3,"title":"chunks: \\"initial\\"","slug":"chunks-initial","link":"#chunks-initial","children":[]},{"level":3,"title":"minChunks: 2","slug":"minchunks-2","link":"#minchunks-2","children":[]},{"level":3,"title":"maxInitialRequests: 5","slug":"maxinitialrequests-5","link":"#maxinitialrequests-5","children":[]},{"level":3,"title":"minSize: 0","slug":"minsize-0","link":"#minsize-0","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"使用webpack-bundle-analyzer 分析 bundle","slug":"使用webpack-bundle-analyzer-分析-bundle","link":"#使用webpack-bundle-analyzer-分析-bundle","children":[{"level":3,"title":"示例 webpack-bundle-analyzer 配置：","slug":"示例-webpack-bundle-analyzer-配置","link":"#示例-webpack-bundle-analyzer-配置","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]},{"level":2,"title":"webpack.conf.js示例","slug":"webpack-conf-js示例","link":"#webpack-conf-js示例","children":[]}],"git":{"updatedTime":1712253568000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":2}]},"filePathRelative":"posts/frontend/webpack chunk.md","excerpt":"<h2>动态查找入口文件</h2>\\n<h3>动态查找以 <code>index</code> 开头的 <code>.js</code> 文件</h3>\\n<p>要查找 <code>src</code> 目录及其子目录下所有以 <code>index</code> 开头的 <code>.js</code> 文件，我们需要递归地遍历目录。这里是一个使用 Node.js 脚本来实现这个需求的示例：</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> fs <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'fs'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> path <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'path'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 递归地查找文件</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">findFiles</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">directory<span class=\\"token punctuation\\">,</span> pattern</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> results <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> files <span class=\\"token operator\\">=</span> fs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">readdirSync</span><span class=\\"token punctuation\\">(</span>directory<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">withFileTypes</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  files<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">dirent</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> fullPath <span class=\\"token operator\\">=</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span>directory<span class=\\"token punctuation\\">,</span> dirent<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>dirent<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isDirectory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      results <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">...</span>results<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">...</span><span class=\\"token function\\">findFiles</span><span class=\\"token punctuation\\">(</span>fullPath<span class=\\"token punctuation\\">,</span> pattern<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 递归查找</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>pattern<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>dirent<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      results<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>fullPath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> results<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 定义入口目录和匹配模式</span>\\n<span class=\\"token keyword\\">const</span> srcDirectory <span class=\\"token operator\\">=</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'src'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> pattern <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">^index.*\\\\.js$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 匹配以 'index' 开头的 .js 文件</span>\\n\\n<span class=\\"token comment\\">// 动态构建入口对象</span>\\n<span class=\\"token keyword\\">const</span> entryFiles <span class=\\"token operator\\">=</span> <span class=\\"token function\\">findFiles</span><span class=\\"token punctuation\\">(</span>srcDirectory<span class=\\"token punctuation\\">,</span> pattern<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> entry <span class=\\"token operator\\">=</span> entryFiles<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">reduce</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">entries<span class=\\"token punctuation\\">,</span> file</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> name <span class=\\"token operator\\">=</span> file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">replace</span><span class=\\"token punctuation\\">(</span>srcDirectory<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">replace</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">^\\\\/+</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">replace</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.js$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  entries<span class=\\"token punctuation\\">[</span>name<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> file<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> entries<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Webpack 配置</span>\\n<span class=\\"token keyword\\">const</span> webpackConfig <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">entry</span><span class=\\"token operator\\">:</span> entry<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">output</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'[name].bundle.js'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">path</span><span class=\\"token operator\\">:</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'dist'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token comment\\">// 其他配置...</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div><p>这段代码会递归地查找所有符合模式的文件，并为它们每一个构建一个入口。</p>\\n<h3>默认的入口文件 <code>index.js</code> 输出为 <code>main.js</code></h3>\\n<p>当你没有在 webpack 配置中明确指定输出文件的名称时，webpack 使用默认的输出配置。在很多情况下，如果你的入口点是单一的且未指定输出文件名，webpack 会将这个入口点的输出文件命名为 <code>main.js</code>。这是因为 webpack 的默认入口键名是 <code>main</code>。</p>\\n<p>如果你想要自定义输出文件名，你可以在 <code>output</code> 配置的 <code>filename</code> 属性中使用占位符，如 <code>[name].js</code>，这样输出文件名就会基于入口点的键名。在上面的例子中，我们已经通过动态构建入口对象并设置 <code>filename: '[name].bundle.js'</code> 来实现了这一点，其中 <code>[name]</code> 会被替换成入口对象键名，从而控制输出文件的名称。</p>\\n"}`);export{r as comp,k as data};
