import{_ as n,o as s,c as a,e as t}from"./app-BLeSCfhf.js";const p={},o=t(`<h2 id="排序算法介绍和示例" tabindex="-1"><a class="header-anchor" href="#排序算法介绍和示例"><span>排序算法介绍和示例</span></a></h2><p>以下是对冒泡排序、选择排序、插入排序和快速排序的简要介绍，并附带使用Go语言实现的代码示例：</p><h3 id="冒泡排序-bubble-sort" tabindex="-1"><a class="header-anchor" href="#冒泡排序-bubble-sort"><span>冒泡排序（Bubble Sort）：</span></a></h3><p>冒泡排序是一种简单的排序算法，它重复地遍历要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。</p><p><strong>Go语言实现：</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Unsorted array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Sorted array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选择排序-selection-sort" tabindex="-1"><a class="header-anchor" href="#选择排序-selection-sort"><span>选择排序（Selection Sort）：</span></a></h3><p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找最小（或最大）的元素，然后放到已排序序列的末尾。</p><p><strong>Go语言实现：</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        minIndex <span class="token operator">:=</span> i
        <span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                minIndex <span class="token operator">=</span> j
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Unsorted array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
    <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Sorted array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入排序-insertion-sort" tabindex="-1"><a class="header-anchor" href="#插入排序-insertion-sort"><span>插入排序（Insertion Sort）：</span></a></h3><p>插入排序是一种简单直观的排序算法。它的工作原理是构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p><strong>Go语言实现：</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        key <span class="token operator">:=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        j <span class="token operator">:=</span> i <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">for</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Unsorted array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
    <span class="token function">insertionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Sorted array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="快速排序-quick-sort" tabindex="-1"><a class="header-anchor" href="#快速排序-quick-sort"><span>快速排序（Quick Sort）：</span></a></h3><p>快速排序是一种分治思想的排序算法。它的基本思想是通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有元素都比另外一部分的所有元素都小，然后再按此方法对这两部分数据分别进行快速排序。</p><p><strong>Go语言实现：</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> low <span class="token operator">&lt;</span> high <span class="token punctuation">{</span>
        pi <span class="token operator">:=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pi<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    pivot <span class="token operator">:=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span>
    i <span class="token operator">:=</span> low <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> low<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> high<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot <span class="token punctuation">{</span>
            i<span class="token operator">++</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Unsorted array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Sorted array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度"><span>时间复杂度</span></a></h2><p>下面是对冒泡排序、选择排序、插入排序和快速排序的时间复杂度以及如何计算的简要说明：</p><h3 id="冒泡排序-bubble-sort-1" tabindex="-1"><a class="header-anchor" href="#冒泡排序-bubble-sort-1"><span>冒泡排序（Bubble Sort）：</span></a></h3><ul><li>时间复杂度：最好情况下为O(n)，平均和最坏情况下为O(n^2)。</li><li>计算方法：在最好情况下，如果列表已经是有序的，冒泡排序只需遍历一次即可确定列表已排序。在平均和最坏情况下，需要遍历n-1次，每次遍历需要比较n-1次，因此总的比较次数为(n-1) * (n-1) = n^2 - 2n + 1，时间复杂度为O(n^2)。</li></ul><h3 id="选择排序-selection-sort-1" tabindex="-1"><a class="header-anchor" href="#选择排序-selection-sort-1"><span>选择排序（Selection Sort）：</span></a></h3><ul><li>时间复杂度：不管什么情况下，都为O(n^2)。</li><li>计算方法：在选择排序中，每次遍历列表找到最小值需要比较n-1次，总共需要进行n-1次这样的操作。因此，总的比较次数为(n-1) * (n-1) = n^2 - 2n + 1，时间复杂度为O(n^2)。</li></ul><h3 id="插入排序-insertion-sort-1" tabindex="-1"><a class="header-anchor" href="#插入排序-insertion-sort-1"><span>插入排序（Insertion Sort）：</span></a></h3><ul><li>时间复杂度：最好情况下为O(n)，平均和最坏情况下为O(n^2)。</li><li>计算方法：在最好情况下，如果列表已经是有序的，插入排序只需遍历一次即可确定列表已排序。在平均和最坏情况下，需要遍历n-1次，每次遍历最多需要比较n次，因此总的比较次数为(n-1) * n / 2 = (n^2 - n) / 2，时间复杂度为O(n^2)。</li></ul><h3 id="快速排序-quick-sort-1" tabindex="-1"><a class="header-anchor" href="#快速排序-quick-sort-1"><span>快速排序（Quick Sort）：</span></a></h3><ul><li>时间复杂度：平均情况下为O(nlogn)，最坏情况下为O(n^2)。</li><li>计算方法：快速排序采用分治策略，平均情况下每次划分都可以将列表分成两部分，每部分的规模约为原列表的一半，因此需要logn次划分。在每次划分时，需要线性时间来进行比较和交换。因此，总的时间复杂度为O(nlogn)。在最坏情况下，每次划分只能将列表分成一部分和空列表两部分，需要进行n次划分，因此总的时间复杂度为O(n^2)。</li></ul><h2 id="快速排序和归并排序" tabindex="-1"><a class="header-anchor" href="#快速排序和归并排序"><span>快速排序和归并排序</span></a></h2><p>快速排序和归并排序都是常见的高效排序算法，它们的主要区别在于其实现方式和性能特点：</p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别：</span></a></h3><ol><li><p><strong>实现方式</strong>：</p><ul><li>快速排序采用分治策略，通过在数据集合中选择一个基准元素，将数据分割成两个子集，一个子集中的所有元素小于基准元素，另一个子集中的所有元素大于基准元素，然后对这两个子集递归地进行排序。</li><li>归并排序也采用分治策略，但是它的思想是先将数据分割成单个元素的子集，然后逐步合并相邻的子集，并在合并的过程中进行排序。</li></ul></li><li><p><strong>性能特点</strong>：</p><ul><li>快速排序在平均情况下具有较好的性能，时间复杂度为O(nlogn)，但在最坏情况下可能会退化为O(n^2)，例如在每次划分时选择的基准元素都是最大或最小元素的情况下。</li><li>归并排序的时间复杂度稳定，始终为O(nlogn)，但它需要额外的空间来存储临时数组，在空间复杂度上可能不如快速排序。</li></ul></li></ol><h3 id="性能比较" tabindex="-1"><a class="header-anchor" href="#性能比较"><span>性能比较：</span></a></h3><ul><li>在大多数情况下，快速排序的性能比归并排序更好，因为它具有较小的常数因子和更好的空间局部性。但是，在处理大规模数据时，归并排序可能更可靠，因为它的时间复杂度稳定且不受数据分布的影响。</li></ul><p>总的来说，如果对排序算法的平均性能更为关注，并且可以接受在最坏情况下性能下降的情况，快速排序是一个不错的选择；而如果需要保证稳定的性能表现，并且可以承受额外的空间开销，归并排序可能更合适。</p><h2 id="归并排序示例" tabindex="-1"><a class="header-anchor" href="#归并排序示例"><span>归并排序示例</span></a></h2><p>归并排序（Merge Sort）是一种经典的分治算法，它将待排序的数组分成两部分，分别对这两部分进行排序，然后再将两部分合并成一个有序数组。归并排序的基本思想是先递归地将数组分成更小的部分，直到每个部分只有一个元素，然后再将这些部分合并成一个有序数组。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> arr
	<span class="token punctuation">}</span>

	mid <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
	left <span class="token operator">:=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
	right <span class="token operator">:=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
	i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>

	<span class="token keyword">for</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>
			result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			i<span class="token operator">++</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
			j<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> left<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
	result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> right<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Original array:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>

	sortedArr <span class="token operator">:=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Sorted array:&quot;</span><span class="token punctuation">,</span> sortedArr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),e=[o];function c(u,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","GO实现主要排序算法.html.vue"]]),k=JSON.parse('{"path":"/posts/go/GO%E5%AE%9E%E7%8E%B0%E4%B8%BB%E8%A6%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html","title":"GO实现主要排序算法","lang":"zh-CN","frontmatter":{"title":"GO实现主要排序算法","date":"2024-03-01T00:09:14.000Z","tags":["算法","排序","go"],"categories":"go"},"headers":[{"level":2,"title":"排序算法介绍和示例","slug":"排序算法介绍和示例","link":"#排序算法介绍和示例","children":[{"level":3,"title":"冒泡排序（Bubble Sort）：","slug":"冒泡排序-bubble-sort","link":"#冒泡排序-bubble-sort","children":[]},{"level":3,"title":"选择排序（Selection Sort）：","slug":"选择排序-selection-sort","link":"#选择排序-selection-sort","children":[]},{"level":3,"title":"插入排序（Insertion Sort）：","slug":"插入排序-insertion-sort","link":"#插入排序-insertion-sort","children":[]},{"level":3,"title":"快速排序（Quick Sort）：","slug":"快速排序-quick-sort","link":"#快速排序-quick-sort","children":[]}]},{"level":2,"title":"时间复杂度","slug":"时间复杂度","link":"#时间复杂度","children":[{"level":3,"title":"冒泡排序（Bubble Sort）：","slug":"冒泡排序-bubble-sort-1","link":"#冒泡排序-bubble-sort-1","children":[]},{"level":3,"title":"选择排序（Selection Sort）：","slug":"选择排序-selection-sort-1","link":"#选择排序-selection-sort-1","children":[]},{"level":3,"title":"插入排序（Insertion Sort）：","slug":"插入排序-insertion-sort-1","link":"#插入排序-insertion-sort-1","children":[]},{"level":3,"title":"快速排序（Quick Sort）：","slug":"快速排序-quick-sort-1","link":"#快速排序-quick-sort-1","children":[]}]},{"level":2,"title":"快速排序和归并排序","slug":"快速排序和归并排序","link":"#快速排序和归并排序","children":[{"level":3,"title":"区别：","slug":"区别","link":"#区别","children":[]},{"level":3,"title":"性能比较：","slug":"性能比较","link":"#性能比较","children":[]}]},{"level":2,"title":"归并排序示例","slug":"归并排序示例","link":"#归并排序示例","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/go/GO实现主要排序算法.md","excerpt":"<h2>排序算法介绍和示例</h2>\\n<p>以下是对冒泡排序、选择排序、插入排序和快速排序的简要介绍，并附带使用Go语言实现的代码示例：</p>\\n<h3>冒泡排序（Bubble Sort）：</h3>\\n<p>冒泡排序是一种简单的排序算法，它重复地遍历要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。</p>\\n<p><strong>Go语言实现：</strong></p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">bubbleSort</span><span class=\\"token punctuation\\">(</span>arr <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    n <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">for</span> j <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> n<span class=\\"token operator\\">-</span>i<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n                arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    arr <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">64</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">34</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">12</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">22</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">11</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">90</span><span class=\\"token punctuation\\">}</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Unsorted array:\\"</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">bubbleSort</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Sorted array:\\"</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div><h3>选择排序（Selection Sort）：</h3>\\n<p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找最小（或最大）的元素，然后放到已排序序列的末尾。</p>\\n<p><strong>Go语言实现：</strong></p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">selectionSort</span><span class=\\"token punctuation\\">(</span>arr <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    n <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n        minIndex <span class=\\"token operator\\">:=</span> i\\n        <span class=\\"token keyword\\">for</span> j <span class=\\"token operator\\">:=</span> i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> arr<span class=\\"token punctuation\\">[</span>minIndex<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n                minIndex <span class=\\"token operator\\">=</span> j\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>minIndex<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>minIndex<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    arr <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">64</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">34</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">12</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">22</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">11</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">90</span><span class=\\"token punctuation\\">}</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Unsorted array:\\"</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">selectionSort</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Sorted array:\\"</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div><h3>插入排序（Insertion Sort）：</h3>\\n<p>插入排序是一种简单直观的排序算法。它的工作原理是构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>\\n<p><strong>Go语言实现：</strong></p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">insertionSort</span><span class=\\"token punctuation\\">(</span>arr <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    n <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">for</span> i <span class=\\"token operator\\">:=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n        key <span class=\\"token operator\\">:=</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span>\\n        j <span class=\\"token operator\\">:=</span> i <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token keyword\\">for</span> j <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> key <span class=\\"token punctuation\\">{</span>\\n            arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span>\\n            j <span class=\\"token operator\\">=</span> j <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> key\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    arr <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">64</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">34</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">12</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">22</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">11</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">90</span><span class=\\"token punctuation\\">}</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Unsorted array:\\"</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">insertionSort</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Sorted array:\\"</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div><h3>快速排序（Quick Sort）：</h3>\\n<p>快速排序是一种分治思想的排序算法。它的基本思想是通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有元素都比另外一部分的所有元素都小，然后再按此方法对这两部分数据分别进行快速排序。</p>\\n<p><strong>Go语言实现：</strong></p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>arr <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> low<span class=\\"token punctuation\\">,</span> high <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> low <span class=\\"token operator\\">&lt;</span> high <span class=\\"token punctuation\\">{</span>\\n        pi <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">partition</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> low<span class=\\"token punctuation\\">,</span> high<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> low<span class=\\"token punctuation\\">,</span> pi<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> pi<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> high<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">partition</span><span class=\\"token punctuation\\">(</span>arr <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> low<span class=\\"token punctuation\\">,</span> high <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">int</span> <span class=\\"token punctuation\\">{</span>\\n    pivot <span class=\\"token operator\\">:=</span> arr<span class=\\"token punctuation\\">[</span>high<span class=\\"token punctuation\\">]</span>\\n    i <span class=\\"token operator\\">:=</span> low <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n    <span class=\\"token keyword\\">for</span> j <span class=\\"token operator\\">:=</span> low<span class=\\"token punctuation\\">;</span> j <span class=\\"token operator\\">&lt;</span> high<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">++</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> pivot <span class=\\"token punctuation\\">{</span>\\n            i<span class=\\"token operator\\">++</span>\\n            arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>high<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> arr<span class=\\"token punctuation\\">[</span>high<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">[</span>i<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">return</span> i <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    arr <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">64</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">34</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">12</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">22</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">11</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">90</span><span class=\\"token punctuation\\">}</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Unsorted array:\\"</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Sorted array:\\"</span><span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{r as comp,k as data};
