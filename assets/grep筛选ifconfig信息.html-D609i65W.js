import{_ as e,o as a,c as n,e as s}from"./app-CinGCuEv.js";const o={},c=s(`<h1 id="筛选ifconfig信息" tabindex="-1"><a class="header-anchor" href="#筛选ifconfig信息"><span>筛选ifconfig信息</span></a></h1><p>如果你只想查看带有<code>br</code>前缀的桥接接口的信息，可以使用<code>ifconfig</code>命令结合管道符（<code>|</code>）和<code>grep</code>命令来过滤输出。这里有两种常用方法来实现这一点：</p><h3 id="方法1-直接过滤接口名称" tabindex="-1"><a class="header-anchor" href="#方法1-直接过滤接口名称"><span>方法1：直接过滤接口名称</span></a></h3><p>使用<code>ifconfig</code>命令列出所有接口，然后用<code>grep</code>命令过滤出以<code>br</code>开头的行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;^br&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会列出所有以<code>br</code>开头的接口名称，但不会显示接口的详细信息。</p><h3 id="方法2-过滤详细信息" tabindex="-1"><a class="header-anchor" href="#方法2-过滤详细信息"><span>方法2：过滤详细信息</span></a></h3><p>如果你想要看到这些接口的详细信息，可以先用<code>ifconfig</code>命令获取所有接口的详细信息，然后使用<code>grep</code>的上下文显示功能：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token parameter variable">-A</span> <span class="token number">8</span> <span class="token string">&#39;^br&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，<code>-A 8</code>选项告诉<code>grep</code>在匹配行之后显示额外的8行，因为接口的详细信息通常会跨越多行。调整<code>-A</code>后的数字可以根据你的需要显示更多或更少的上下文行。</p><h3 id="方法3-使用ip命令" tabindex="-1"><a class="header-anchor" href="#方法3-使用ip命令"><span>方法3：使用<code>ip</code>命令</span></a></h3><p>另外，如果你的系统中<code>ip</code>命令可用，它通常提供更现代和灵活的网络配置和查询功能。你可以使用<code>ip</code>命令结合<code>grep</code>来达到类似的目的：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> addr show <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;^[0-9]+: br&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会显示所有以<code>br</code>为前缀的接口的详细信息，包括它们的IP地址。</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><p>以上命令中的<code>grep</code>参数：</p><ul><li><code>-E</code>表示使用扩展正则表达式。</li><li><code>&#39;^br&#39;</code>是正则表达式，匹配所有以<code>br</code>开头的行。</li><li><code>&#39;^[0-9]+: br&#39;</code>更加精确地匹配<code>ip addr show</code>输出的接口行，其中接口名称前会有一个数字和冒号。</li></ul><p>根据你的具体需求选择合适的命令。如果你需要查看特定接口的更详细信息，可以直接使用<code>ifconfig &lt;interface&gt;</code>或<code>ip addr show &lt;interface&gt;</code>命令，将<code>&lt;interface&gt;</code>替换为具体的接口名称，例如<code>br0</code>。</p>`,18),t=[c];function p(i,r){return a(),n("div",null,t)}const l=e(o,[["render",p],["__file","grep筛选ifconfig信息.html.vue"]]),g=JSON.parse(`{"path":"/posts/shell/grep%E7%AD%9B%E9%80%89ifconfig%E4%BF%A1%E6%81%AF.html","title":"筛选ifconfig信息","lang":"zh-CN","frontmatter":{"title":"筛选ifconfig信息","date":"2024-02-27T23:01:59.000Z","tags":["shell","grep"],"categories":["grep"],"description":"筛选ifconfig信息 如果你只想查看带有br前缀的桥接接口的信息，可以使用ifconfig命令结合管道符（|）和grep命令来过滤输出。这里有两种常用方法来实现这一点： 方法1：直接过滤接口名称 使用ifconfig命令列出所有接口，然后用grep命令过滤出以br开头的行： 这个命令会列出所有以br开头的接口名称，但不会显示接口的详细信息。 方法2...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/shell/grep%E7%AD%9B%E9%80%89ifconfig%E4%BF%A1%E6%81%AF.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"筛选ifconfig信息"}],["meta",{"property":"og:description","content":"筛选ifconfig信息 如果你只想查看带有br前缀的桥接接口的信息，可以使用ifconfig命令结合管道符（|）和grep命令来过滤输出。这里有两种常用方法来实现这一点： 方法1：直接过滤接口名称 使用ifconfig命令列出所有接口，然后用grep命令过滤出以br开头的行： 这个命令会列出所有以br开头的接口名称，但不会显示接口的详细信息。 方法2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"grep"}],["meta",{"property":"article:published_time","content":"2024-02-27T23:01:59.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"筛选ifconfig信息\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-27T23:01:59.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"方法1：直接过滤接口名称","slug":"方法1-直接过滤接口名称","link":"#方法1-直接过滤接口名称","children":[]},{"level":3,"title":"方法2：过滤详细信息","slug":"方法2-过滤详细信息","link":"#方法2-过滤详细信息","children":[]},{"level":3,"title":"方法3：使用ip命令","slug":"方法3-使用ip命令","link":"#方法3-使用ip命令","children":[]},{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/shell/grep筛选ifconfig信息.md","excerpt":"\\n<p>如果你只想查看带有<code>br</code>前缀的桥接接口的信息，可以使用<code>ifconfig</code>命令结合管道符（<code>|</code>）和<code>grep</code>命令来过滤输出。这里有两种常用方法来实现这一点：</p>\\n<h3>方法1：直接过滤接口名称</h3>\\n<p>使用<code>ifconfig</code>命令列出所有接口，然后用<code>grep</code>命令过滤出以<code>br</code>开头的行：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">ifconfig</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">grep</span> <span class=\\"token parameter variable\\">-E</span> <span class=\\"token string\\">'^br'</span>\\n</code></pre></div><p>这个命令会列出所有以<code>br</code>开头的接口名称，但不会显示接口的详细信息。</p>\\n<h3>方法2：过滤详细信息</h3>\\n<p>如果你想要看到这些接口的详细信息，可以先用<code>ifconfig</code>命令获取所有接口的详细信息，然后使用<code>grep</code>的上下文显示功能：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">ifconfig</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">grep</span> <span class=\\"token parameter variable\\">-E</span> <span class=\\"token parameter variable\\">-A</span> <span class=\\"token number\\">8</span> <span class=\\"token string\\">'^br'</span>\\n</code></pre></div><p>这里，<code>-A 8</code>选项告诉<code>grep</code>在匹配行之后显示额外的8行，因为接口的详细信息通常会跨越多行。调整<code>-A</code>后的数字可以根据你的需要显示更多或更少的上下文行。</p>\\n<h3>方法3：使用<code>ip</code>命令</h3>\\n<p>另外，如果你的系统中<code>ip</code>命令可用，它通常提供更现代和灵活的网络配置和查询功能。你可以使用<code>ip</code>命令结合<code>grep</code>来达到类似的目的：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">ip</span> addr show <span class=\\"token operator\\">|</span> <span class=\\"token function\\">grep</span> <span class=\\"token parameter variable\\">-E</span> <span class=\\"token string\\">'^[0-9]+: br'</span>\\n</code></pre></div><p>这个命令会显示所有以<code>br</code>为前缀的接口的详细信息，包括它们的IP地址。</p>\\n"}`);export{l as comp,g as data};
