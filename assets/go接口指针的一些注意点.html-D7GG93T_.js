import{_ as n,o as s,c as a,e}from"./app-ATJF5j0V.js";const t={},p=e(`<h2 id="值接收者和指针接收者的一点区别" tabindex="-1"><a class="header-anchor" href="#值接收者和指针接收者的一点区别"><span>值接收者和指针接收者的一点区别</span></a></h2><p>在Go语言中值接收者和指针接收者有一些区别：方法可以通过指针接收者（Pointer Receiver）或值接收者（Value Receiver）来定义。这两种接收者在使用时有本质的不同，主要体现在对原始数据的操作方式和效率上。</p><h3 id="值接收者" tabindex="-1"><a class="header-anchor" href="#值接收者"><span>值接收者</span></a></h3><ul><li>值接收者在方法调用时，使用的是原始值的一个副本。</li><li>对于值接收者的任何修改都不会影响到原始数据。</li><li>适用于小结构体或基本数据类型的情况，因为这样做的开销较小。</li><li><strong>使用值接收者定义的方法，可以通过值调用也可以通过指针调用，Go会自动进行转换。</strong></li></ul><h3 id="指针接收者" tabindex="-1"><a class="header-anchor" href="#指针接收者"><span>指针接收者</span></a></h3><ul><li>指针接收者在方法调用时，使用的是原始值的内存地址。</li><li>通过指针接收者做的任何修改都会直接影响到原始数据。</li><li>适用于大结构体或需要修改接收者中数据的情况，因为这样可以避免大量的数据复制，提高效率。</li><li><strong>使用指针接收者定义的方法，同样可以通过值调用（如果是可寻址的）和指针调用，Go会自动进行转换。</strong></li></ul><h3 id="本质区别" tabindex="-1"><a class="header-anchor" href="#本质区别"><span>本质区别</span></a></h3><ol><li><strong>修改能力</strong>：指针接收者允许直接修改原始数据，而值接收者的修改是在副本上进行，不会影响原始数据。</li><li><strong>性能考虑</strong>：对于大型结构体或需要频繁修改的场景，使用指针接收者可以减少数据复制的开销，提高性能。</li><li><strong>自动转换</strong>：Go语言在调用方法时，会根据方法定义的接收者类型（值接收者或指针接收者），自动转换调用方式，这提高了语言的灵活性和易用性。</li></ol><p>总结来说，选择值接收者还是指针接收者，需要根据实际情况考虑数据的大小、是否需要修改原始数据以及性能影响等因素。在实际开发中，推荐根据具体需求灵活选择。</p><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> MyService <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 值实现</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ms MyService<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Run method called&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ms <span class="token operator">:=</span> MyService<span class="token punctuation">{</span><span class="token punctuation">}</span>
    ms<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    pms <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyService<span class="token punctuation">{</span><span class="token punctuation">}</span>
    pms<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 指针实现</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ms <span class="token operator">*</span>MyService<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Run method called&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
 ms <span class="token operator">:=</span> MyService<span class="token punctuation">{</span><span class="token punctuation">}</span>
 ms<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
 pms <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyService<span class="token punctuation">{</span><span class="token punctuation">}</span>
 pms<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="两者实现的一点影响" tabindex="-1"><a class="header-anchor" href="#两者实现的一点影响"><span>两者实现的一点影响</span></a></h2><p>虽然不管调用主体是值还是指针，GO会自动转换调用方式。 但是在使用上还是有一点影响和区别：</p><h3 id="确保结构体实现接口" tabindex="-1"><a class="header-anchor" href="#确保结构体实现接口"><span>确保结构体实现接口</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token boolean">_</span> CrawlerServiceServer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上代码强转<code>(*MyService)</code>确保了<code>MyService</code> 或 <code>*MyService</code>必须实现<code>CrawlerServiceServer</code>接口, 但反过来不行，即：</p><ul><li><strong>值接收者方法：</strong><strong>当你为一个类型定义了一个方法，该方法的接收者是非指针类型（即值接收者），那么这个方法既属于这个类型，也属于这个类型的指针。</strong></li><li><strong>指针接收者方法：</strong><strong>如果一个方法的接收者是指针类型，那么这个方法只属于指针类型，不属于非指针类型。</strong></li></ul><h3 id="指针类型实现接口的限制" tabindex="-1"><a class="header-anchor" href="#指针类型实现接口的限制"><span>指针类型实现接口的限制</span></a></h3><p>以下代码 值实现了<code>Run</code>，则无论指针还是值都实现了<code>Run</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">type</span> MyStruct <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Handler CrawlerServiceServer
<span class="token punctuation">}</span>

<span class="token keyword">type</span> CrawlerServiceServer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> MyService <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ms MyService<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Run method called&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ms <span class="token operator">:=</span> MyService<span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// myStruct := MyStruct{</span>
	<span class="token comment">// 	Handler: ms,</span>
	<span class="token comment">// }</span>
	myStruct <span class="token operator">:=</span> MyStruct<span class="token punctuation">{</span>
		Handler<span class="token punctuation">:</span> <span class="token operator">&amp;</span>ms<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>myStruct<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果Run是指针接收实现的，那么实例没有实现Run方法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ms <span class="token operator">*</span>MyService<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Run method called&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ms <span class="token operator">:=</span> MyService<span class="token punctuation">{</span><span class="token punctuation">}</span>
	myStruct <span class="token operator">:=</span> MyStruct<span class="token punctuation">{</span>
        <span class="token comment">// ms编译报错： MyService does not implement CrawlerServiceServer (method Run has pointer receiver)</span>
	    Handler<span class="token punctuation">:</span> ms<span class="token punctuation">,</span>
        <span class="token comment">// 正确</span>
        <span class="token comment">// Handler: &amp;ms</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>myStruct<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口指针的使用" tabindex="-1"><a class="header-anchor" href="#接口指针的使用"><span>接口指针的使用</span></a></h3><p>如果一个方法是指针接收者方法实现，在接口使用和判断上会有一些局限，即传入的必须是指针类型。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> RunnerManager <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	runnerHandler Runner
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Runner <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Man <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Man<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Man run called&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	m <span class="token operator">:=</span> Man<span class="token punctuation">{</span><span class="token punctuation">}</span>
	rm <span class="token operator">:=</span> RunnerManager<span class="token punctuation">{</span>
        <span class="token comment">// m 编译报错, 因为m的指针才实现了Runner接口</span>
		runnerHandler<span class="token punctuation">:</span> m<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体成员为接口的指针的使用示例" tabindex="-1"><a class="header-anchor" href="#结构体成员为接口的指针的使用示例"><span>结构体成员为接口的指针的使用示例</span></a></h3><h4 id="传递接口指针类型给结构体" tabindex="-1"><a class="header-anchor" href="#传递接口指针类型给结构体"><span>传递接口指针类型给结构体</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 如果这里改为*Runner类型</span>
<span class="token keyword">type</span> RunnerManager <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	runnerHandler <span class="token operator">*</span>Runner
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>

m <span class="token operator">:=</span> Man<span class="token punctuation">{</span><span class="token punctuation">}</span>
rm <span class="token operator">:=</span> RunnerManager<span class="token punctuation">{</span>
    <span class="token comment">// 这里的&amp;m会报错，因为*Man实现了Runner，但是runnerHandler是一个Runner接口的指针</span>
    runnerHandler<span class="token punctuation">:</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确方法是</span>
<span class="token keyword">var</span> mr Runner <span class="token operator">=</span> <span class="token operator">&amp;</span>m <span class="token comment">// 先转换为Runner接口类型</span>
rm <span class="token operator">:=</span> RunnerManager<span class="token punctuation">{</span> 
    runnerHandler<span class="token punctuation">:</span> <span class="token operator">&amp;</span>mr<span class="token punctuation">,</span> <span class="token comment">// 去传递*Runner</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用结构体成员的接口指针" tabindex="-1"><a class="header-anchor" href="#使用结构体成员的接口指针"><span>使用结构体成员的接口指针</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 调用</span>
<span class="token keyword">var</span> m Man
<span class="token keyword">var</span> mr Runner <span class="token operator">=</span> <span class="token operator">&amp;</span>m <span class="token comment">//转为Runner接口类型</span>
rm <span class="token operator">:=</span> RunnerManager<span class="token punctuation">{</span>runnerHandler<span class="token punctuation">:</span> <span class="token operator">&amp;</span>mr<span class="token punctuation">}</span> <span class="token comment">// 初始化结构体 传入Runner接口的指针类型</span>

<span class="token punctuation">(</span><span class="token operator">*</span>rm<span class="token punctuation">.</span>runnerHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 解引用，调用接口的Run方法</span>

<span class="token comment">// 类型断言: 断定接口是*MyService类型</span>
<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>rm<span class="token punctuation">.</span>runnerHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Man<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","go接口指针的一些注意点.html.vue"]]),d=JSON.parse('{"path":"/posts/go/go%E6%8E%A5%E5%8F%A3%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9.html","title":"go接口指针的一些注意点","lang":"zh-CN","frontmatter":{"title":"go接口指针的一些注意点","date":"2024-02-23T02:53:01.000Z","tags":["go"]},"headers":[{"level":2,"title":"值接收者和指针接收者的一点区别","slug":"值接收者和指针接收者的一点区别","link":"#值接收者和指针接收者的一点区别","children":[{"level":3,"title":"值接收者","slug":"值接收者","link":"#值接收者","children":[]},{"level":3,"title":"指针接收者","slug":"指针接收者","link":"#指针接收者","children":[]},{"level":3,"title":"本质区别","slug":"本质区别","link":"#本质区别","children":[]},{"level":3,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]}]},{"level":2,"title":"两者实现的一点影响","slug":"两者实现的一点影响","link":"#两者实现的一点影响","children":[{"level":3,"title":"确保结构体实现接口","slug":"确保结构体实现接口","link":"#确保结构体实现接口","children":[]},{"level":3,"title":"指针类型实现接口的限制","slug":"指针类型实现接口的限制","link":"#指针类型实现接口的限制","children":[]},{"level":3,"title":"接口指针的使用","slug":"接口指针的使用","link":"#接口指针的使用","children":[]},{"level":3,"title":"结构体成员为接口的指针的使用示例","slug":"结构体成员为接口的指针的使用示例","link":"#结构体成员为接口的指针的使用示例","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/go/go接口指针的一些注意点.md","excerpt":"<h2>值接收者和指针接收者的一点区别</h2>\\n<p>在Go语言中值接收者和指针接收者有一些区别：方法可以通过指针接收者（Pointer Receiver）或值接收者（Value Receiver）来定义。这两种接收者在使用时有本质的不同，主要体现在对原始数据的操作方式和效率上。</p>\\n<h3>值接收者</h3>\\n<ul>\\n<li>值接收者在方法调用时，使用的是原始值的一个副本。</li>\\n<li>对于值接收者的任何修改都不会影响到原始数据。</li>\\n<li>适用于小结构体或基本数据类型的情况，因为这样做的开销较小。</li>\\n<li><strong>使用值接收者定义的方法，可以通过值调用也可以通过指针调用，Go会自动进行转换。</strong></li>\\n</ul>\\n<h3>指针接收者</h3>\\n<ul>\\n<li>指针接收者在方法调用时，使用的是原始值的内存地址。</li>\\n<li>通过指针接收者做的任何修改都会直接影响到原始数据。</li>\\n<li>适用于大结构体或需要修改接收者中数据的情况，因为这样可以避免大量的数据复制，提高效率。</li>\\n<li><strong>使用指针接收者定义的方法，同样可以通过值调用（如果是可寻址的）和指针调用，Go会自动进行转换。</strong></li>\\n</ul>\\n<h3>本质区别</h3>\\n<ol>\\n<li><strong>修改能力</strong>：指针接收者允许直接修改原始数据，而值接收者的修改是在副本上进行，不会影响原始数据。</li>\\n<li><strong>性能考虑</strong>：对于大型结构体或需要频繁修改的场景，使用指针接收者可以减少数据复制的开销，提高性能。</li>\\n<li><strong>自动转换</strong>：Go语言在调用方法时，会根据方法定义的接收者类型（值接收者或指针接收者），自动转换调用方式，这提高了语言的灵活性和易用性。</li>\\n</ol>\\n<p>总结来说，选择值接收者还是指针接收者，需要根据实际情况考虑数据的大小、是否需要修改原始数据以及性能影响等因素。在实际开发中，推荐根据具体需求灵活选择。</p>\\n<h3>使用示例</h3>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> MyService <span class=\\"token keyword\\">struct</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 值实现</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>ms MyService<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span> <span class=\\"token punctuation\\">{</span>\\n\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Run method called\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">nil</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    ms <span class=\\"token operator\\">:=</span> MyService<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    ms<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> \\n    pms <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>MyService<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    pms<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 指针实现</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>ms <span class=\\"token operator\\">*</span>MyService<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span> <span class=\\"token punctuation\\">{</span>\\n\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Run method called\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">nil</span>\\n<span class=\\"token punctuation\\">}</span>\\n ms <span class=\\"token operator\\">:=</span> MyService<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n ms<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> \\n pms <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>MyService<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n pms<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div><h2>两者实现的一点影响</h2>\\n<p>虽然不管调用主体是值还是指针，GO会自动转换调用方式。\\n但是在使用上还是有一点影响和区别：</p>\\n<h3>确保结构体实现接口</h3>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token boolean\\">_</span> CrawlerServiceServer <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>MyService<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">nil</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div><p>以上代码强转<code>(*MyService)</code>确保了<code>MyService</code> 或 <code>*MyService</code>必须实现<code>CrawlerServiceServer</code>接口, 但反过来不行，即：</p>\\n<ul>\\n<li><strong>值接收者方法：</strong>\\n<strong>当你为一个类型定义了一个方法，该方法的接收者是非指针类型（即值接收者），那么这个方法既属于这个类型，也属于这个类型的指针。</strong></li>\\n<li><strong>指针接收者方法：</strong>\\n<strong>如果一个方法的接收者是指针类型，那么这个方法只属于指针类型，不属于非指针类型。</strong></li>\\n</ul>\\n"}');export{r as comp,d as data};
