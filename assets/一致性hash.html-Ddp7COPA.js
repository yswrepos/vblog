import{_ as n,o as s,c as a,e as t}from"./app-Du_kiChf.js";const p={},o=t(`<h1 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h1><p>一致性哈希算法是为了解决分布式系统中的动态伸缩问题而提出的。它的基本思想是将哈希空间组织成一个虚拟的圆环，假设哈希函数的范围是0到2^32-1（构成一个圆环），每个服务器在这个圆环上占据一个位置，这个位置根据服务器的哈希值决定。每个要存储的键也会被哈希到这个圆环上的某个位置，然后从这个位置顺时针找到的第一个服务器就是该键所属的服务器。</p><h1 id="一致性哈希解决方案" tabindex="-1"><a class="header-anchor" href="#一致性哈希解决方案"><span>一致性哈希解决方案</span></a></h1><p>当系统需要添加或移除服务器时，只会影响到环上顺时针方向紧邻的下一个服务器，而其他服务器存储的数据不会受到影响。这样就大大减少了因服务器增减导致的数据迁移量，只有少部分数据需要迁移。</p><h1 id="基本实现" tabindex="-1"><a class="header-anchor" href="#基本实现"><span>基本实现</span></a></h1><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;crypto/sha1&quot;</span>
    <span class="token string">&quot;sort&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
    <span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// 定义一致性哈希的结构</span>
<span class="token keyword">type</span> ConsistentHashing <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    nodes  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>          <span class="token comment">// 存储所有节点的哈希值</span>
    circle <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// 哈希值到节点名称的映射</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一致性哈希实例</span>
<span class="token keyword">func</span> <span class="token function">NewConsistentHashing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>ConsistentHashing <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConsistentHashing<span class="token punctuation">{</span>
        circle<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 生成哈希值</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">generateHash</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    h <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
    hash <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 添加节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">AddNode</span><span class="token punctuation">(</span>node <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hash <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">generateHash</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span>nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span>circle<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> node
    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token comment">// 保持哈希值有序</span>
<span class="token punctuation">}</span>

<span class="token comment">// 移除节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">RemoveNode</span><span class="token punctuation">(</span>node <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hash <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">generateHash</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    index <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">SearchInts</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">.</span>circle<span class="token punctuation">[</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> node <span class="token punctuation">{</span>
        ch<span class="token punctuation">.</span>nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
        <span class="token function">delete</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>circle<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取键的节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">GetNode</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>
    hash <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">generateHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    index <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> hash
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果超过范围，表示应该映射到第一个节点</span>
        index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ch<span class="token punctuation">.</span>circle<span class="token punctuation">[</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ch <span class="token operator">:=</span> <span class="token function">NewConsistentHashing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node1&quot;</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node2&quot;</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node3&quot;</span><span class="token punctuation">)</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    ch<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node4&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;添加Node4后，存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span><span class="token function">RemoveNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node2&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;移除Node2后，存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>generateHash</code>函数的作用是将一个字符串（可以是节点名称或者键值）转换成一个整数哈希值。这个哈希值用于在一致性哈希算法中确定字符串在环上的位置。</p><p>在提供的一致性哈希示例代码中，<code>generateHash</code>函数的作用是将一个字符串（可以是节点名称或者键值）转换成一个整数哈希值。这个哈希值用于在一致性哈希算法中确定字符串在环上的位置。这里是如何实现的：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">generateHash</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    h <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">// 创建一个新的SHA-1哈希器</span>
    h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment">// 将key转换为字节序列并添加到哈希器中</span>
    hash <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>               <span class="token comment">// 计算哈希值，得到一个字节切片</span>
    <span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 将哈希值的前4个字节转换为一个整数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数首先使用SHA-1算法对输入的字符串<code>key</code>进行哈希，生成一个160位（或20字节）的哈希值。SHA-1是一种广泛使用的加密哈希函数，它可以接受任意大小的数据，并输出一个固定大小（160位）的哈希值。</p><p>然后，函数取这个哈希值的前4个字节（<code>hash[0]</code>到<code>hash[3]</code>），并将它们组合成一个32位的整数作为函数的返回值。这是通过位移和按位或操作来实现的：</p><ul><li><code>int(hash[0])&lt;&lt;24</code>：将<code>hash[0]</code>转换为整数并左移24位，这样<code>hash[0]</code>就位于结果整数的最高8位。</li><li><code>int(hash[1])&lt;&lt;16</code>：将<code>hash[1]</code>转换为整数并左移16位，这样<code>hash[1]</code>就位于结果整数的次高8位。</li><li><code>int(hash[2])&lt;&lt;8</code>：将<code>hash[2]</code>转换为整数并左移8位，这样<code>hash[2]</code>就位于结果整数的次低8位。</li><li><code>int(hash[3])</code>：将<code>hash[3]</code>转换为整数，它就位于结果整数的最低8位。</li></ul><p>通过<code>|</code>（按位或）操作，这四个部分合并成一个整数。这个整数既代表了输入字符串的哈希值，也用于在一致性哈希算法中确定该字符串对应的环上的位置。</p><p>通过这种方式，<code>generateHash</code>函数将任意长度的字符串映射到一个较小的、有限的整数范围内，从而使得字符串可以在一致性哈希的环形空间中找到一个明确的位置。</p><h1 id="增加虚拟节点的基本实现" tabindex="-1"><a class="header-anchor" href="#增加虚拟节点的基本实现"><span>增加虚拟节点的基本实现</span></a></h1><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;crypto/sha1&quot;</span>
    <span class="token string">&quot;sort&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
    <span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// 定义一致性哈希的结构</span>
<span class="token keyword">type</span> ConsistentHashing <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    nodes  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>          <span class="token comment">// 存储所有节点（包括虚拟节点）的哈希值</span>
    circle <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// 哈希值到实际节点名称的映射</span>
    virtualNodeCount <span class="token builtin">int</span>  <span class="token comment">// 每个实际节点对应的虚拟节点数量</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一致性哈希实例</span>
<span class="token keyword">func</span> <span class="token function">NewConsistentHashing</span><span class="token punctuation">(</span>virtualNodeCount <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ConsistentHashing <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ConsistentHashing<span class="token punctuation">{</span>
        circle<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        virtualNodeCount<span class="token punctuation">:</span> virtualNodeCount<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 生成哈希值</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">generateHash</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    h <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
    hash <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 添加节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">AddNode</span><span class="token punctuation">(</span>node <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ch<span class="token punctuation">.</span>virtualNodeCount<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        virtualNodeName <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s#%d&quot;</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        hash <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">generateHash</span><span class="token punctuation">(</span>virtualNodeName<span class="token punctuation">)</span>
        ch<span class="token punctuation">.</span>nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
        ch<span class="token punctuation">.</span>circle<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> node <span class="token comment">// 映射到实际节点名称</span>
    <span class="token punctuation">}</span>
    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token comment">// 保持哈希值有序</span>
<span class="token punctuation">}</span>

<span class="token comment">// 移除节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">RemoveNode</span><span class="token punctuation">(</span>node <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ch<span class="token punctuation">.</span>virtualNodeCount<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        virtualNodeName <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s#%d&quot;</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        hash <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">generateHash</span><span class="token punctuation">(</span>virtualNodeName<span class="token punctuation">)</span>
        index <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">SearchInts</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch<span class="token punctuation">.</span>circle<span class="token punctuation">[</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> node <span class="token punctuation">{</span>
            ch<span class="token punctuation">.</span>nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
            <span class="token function">delete</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>circle<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取键的节点</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ch <span class="token operator">*</span>ConsistentHashing<span class="token punctuation">)</span> <span class="token function">GetNode</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>
    hash <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">generateHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    index <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> hash
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果超过范围，表示应该映射到第一个节点</span>
        index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ch<span class="token punctuation">.</span>circle<span class="token punctuation">[</span>ch<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ch <span class="token operator">:=</span> <span class="token function">NewConsistentHashing</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 假设每个实际节点有3个虚拟节点</span>
    ch<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node1&quot;</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node2&quot;</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node3&quot;</span><span class="token punctuation">)</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    ch<span class="token punctuation">.</span><span class="token function">AddNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node4&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;添加Node4后，存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span><span class="token function">RemoveNode</span><span class="token punctuation">(</span><span class="token string">&quot;Node2&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;移除Node2后，存储在节点：&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token string">&quot;myKey1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="节点变化带来的数据迁移" tabindex="-1"><a class="header-anchor" href="#节点变化带来的数据迁移"><span>节点变化带来的数据迁移</span></a></h1><p>在实际应用中，当节点发生变化（如添加或移除节点）时，确实需要进行数据迁移以保持数据的一致性和可用性。这通常意味着以下几点：</p><ol><li><p><strong>节点添加</strong>：当新节点加入时，它会从其他节点接管部分数据。这部分数据是之前映射到它顺时针方向最近的旧节点上的。</p></li><li><p><strong>节点移除</strong>：当节点被移除时，其上的数据需要迁移到其他节点上。通常，这些数据会迁移到这个节点顺时针方向的下一个节点上。</p></li></ol><p>要实现数据迁移，需要在系统中维护更多的状态信息，并在节点变化时执行数据重分配。这通常涉及到以下几个步骤：</p><ul><li><p><strong>确定受影响的数据</strong>：首先，需要识别哪些数据需要被迁移。这可以通过比较节点变化前后数据项应该存储的位置来实现。</p></li><li><p><strong>执行数据迁移</strong>：然后，将需要迁移的数据从原节点移动到新节点。这个过程可能需要网络传输，并且要确保数据的一致性和完整性。</p></li><li><p><strong>更新状态信息</strong>：完成迁移后，需要更新系统中关于数据位置的状态信息，以反映新的数据分布。</p></li></ul>`,21),c=[o];function e(u,i){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","一致性hash.html.vue"]]),r=JSON.parse('{"path":"/posts/go/%E4%B8%80%E8%87%B4%E6%80%A7hash.html","title":"一致性哈希的Go实现","lang":"zh-CN","frontmatter":{"title":"一致性哈希的Go实现","date":"2024-02-24T17:24:59.000Z","tags":["go","哈希"],"categories":["go"]},"headers":[],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/go/一致性hash.md","excerpt":"\\n<p>一致性哈希算法是为了解决分布式系统中的动态伸缩问题而提出的。它的基本思想是将哈希空间组织成一个虚拟的圆环，假设哈希函数的范围是0到2^32-1（构成一个圆环），每个服务器在这个圆环上占据一个位置，这个位置根据服务器的哈希值决定。每个要存储的键也会被哈希到这个圆环上的某个位置，然后从这个位置顺时针找到的第一个服务器就是该键所属的服务器。</p>\\n<h1>一致性哈希解决方案</h1>\\n<p>当系统需要添加或移除服务器时，只会影响到环上顺时针方向紧邻的下一个服务器，而其他服务器存储的数据不会受到影响。这样就大大减少了因服务器增减导致的数据迁移量，只有少部分数据需要迁移。</p>\\n<h1>基本实现</h1>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token string\\">\\"crypto/sha1\\"</span>\\n    <span class=\\"token string\\">\\"sort\\"</span>\\n    <span class=\\"token string\\">\\"strconv\\"</span>\\n    <span class=\\"token string\\">\\"fmt\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 定义一致性哈希的结构</span>\\n<span class=\\"token keyword\\">type</span> ConsistentHashing <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n    nodes  <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">int</span>          <span class=\\"token comment\\">// 存储所有节点的哈希值</span>\\n    circle <span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span> <span class=\\"token comment\\">// 哈希值到节点名称的映射</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 创建一致性哈希实例</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">NewConsistentHashing</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span>ConsistentHashing <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">&amp;</span>ConsistentHashing<span class=\\"token punctuation\\">{</span>\\n        circle<span class=\\"token punctuation\\">:</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">map</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 生成哈希值</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>ch <span class=\\"token operator\\">*</span>ConsistentHashing<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">generateHash</span><span class=\\"token punctuation\\">(</span>key <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">int</span> <span class=\\"token punctuation\\">{</span>\\n    h <span class=\\"token operator\\">:=</span> sha1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">New</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    h<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Write</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token function\\">byte</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    hash <span class=\\"token operator\\">:=</span> h<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">nil</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">int</span><span class=\\"token punctuation\\">(</span>hash<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token number\\">24</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">int</span><span class=\\"token punctuation\\">(</span>hash<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token number\\">16</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">int</span><span class=\\"token punctuation\\">(</span>hash<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token number\\">8</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">int</span><span class=\\"token punctuation\\">(</span>hash<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 添加节点</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>ch <span class=\\"token operator\\">*</span>ConsistentHashing<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">AddNode</span><span class=\\"token punctuation\\">(</span>node <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    hash <span class=\\"token operator\\">:=</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generateHash</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span>\\n    ch<span class=\\"token punctuation\\">.</span>nodes <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">,</span> hash<span class=\\"token punctuation\\">)</span>\\n    ch<span class=\\"token punctuation\\">.</span>circle<span class=\\"token punctuation\\">[</span>hash<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> node\\n    sort<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Ints</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 保持哈希值有序</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 移除节点</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>ch <span class=\\"token operator\\">*</span>ConsistentHashing<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">RemoveNode</span><span class=\\"token punctuation\\">(</span>node <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    hash <span class=\\"token operator\\">:=</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generateHash</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span>\\n    index <span class=\\"token operator\\">:=</span> sort<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SearchInts</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">,</span> hash<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> index <span class=\\"token operator\\">&lt;</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> ch<span class=\\"token punctuation\\">.</span>circle<span class=\\"token punctuation\\">[</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> node <span class=\\"token punctuation\\">{</span>\\n        ch<span class=\\"token punctuation\\">.</span>nodes <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">:</span>index<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">[</span>index<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">...</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">delete</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>circle<span class=\\"token punctuation\\">,</span> hash<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 获取键的节点</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>ch <span class=\\"token operator\\">*</span>ConsistentHashing<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">GetNode</span><span class=\\"token punctuation\\">(</span>key <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"\\"</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    hash <span class=\\"token operator\\">:=</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">generateHash</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span>\\n    index <span class=\\"token operator\\">:=</span> sort<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Search</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span>i <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">bool</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;=</span> hash\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> index <span class=\\"token operator\\">==</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 如果超过范围，表示应该映射到第一个节点</span>\\n        index <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> ch<span class=\\"token punctuation\\">.</span>circle<span class=\\"token punctuation\\">[</span>ch<span class=\\"token punctuation\\">.</span>nodes<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    ch <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">NewConsistentHashing</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Node1\\"</span><span class=\\"token punctuation\\">)</span>\\n    ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Node2\\"</span><span class=\\"token punctuation\\">)</span>\\n    ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Node3\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"存储在节点：\\"</span><span class=\\"token punctuation\\">,</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"myKey1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"存储在节点：\\"</span><span class=\\"token punctuation\\">,</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"myKey2\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"存储在节点：\\"</span><span class=\\"token punctuation\\">,</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"myKey3\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n    ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Node4\\"</span><span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"添加Node4后，存储在节点：\\"</span><span class=\\"token punctuation\\">,</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"myKey1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RemoveNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Node2\\"</span><span class=\\"token punctuation\\">)</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"移除Node2后，存储在节点：\\"</span><span class=\\"token punctuation\\">,</span> ch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"myKey1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>"}');export{k as comp,r as data};
