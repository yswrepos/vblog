import{_ as e,o as a,c as l,e as i}from"./app-Du_kiChf.js";const r={},n=i(`<ul><li>多协程ffmpeg</li><li>sync.Once原理</li></ul><h2 id="线程死锁怎么产生-怎么避免" tabindex="-1"><a class="header-anchor" href="#线程死锁怎么产生-怎么避免"><span><a href="#%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E6%80%8E%E4%B9%88%E4%BA%A7%E7%94%9F-%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D">#</a> 线程死锁怎么产生？怎么避免？</span></a></h2><p><strong>死锁产生的四个必要条件</strong>：</p><ul><li>互斥：一个资源每次只能被一个进程使用</li><li>请求与保持：一个进程因请求资源而阻塞时，不释放获得的资源</li><li>不剥夺：进程已获得的资源，在未使用之前，不能强行剥夺</li><li>循环等待：进程之间循环等待着资源</li></ul><p><strong>避免死锁的方法</strong>：</p><ul><li>互斥条件不能破坏，因为加锁就是为了保证互斥</li><li>一次性申请所有的资源，避免线程占有资源而且在等待其他资源</li><li>占有部分资源的线程进一步申请其他资源时，如果申请不到，主动释放它占有的资源</li><li>按序申请资源</li></ul><h2 id="rabbitmq消息可靠性保证" tabindex="-1"><a class="header-anchor" href="#rabbitmq消息可靠性保证"><span>rabbitmq消息可靠性保证？</span></a></h2><h2 id="rabbitmq事务" tabindex="-1"><a class="header-anchor" href="#rabbitmq事务"><span>rabbitmq事务</span></a></h2><h2 id="raocketmq的流式计算" tabindex="-1"><a class="header-anchor" href="#raocketmq的流式计算"><span>raocketmq的流式计算</span></a></h2><h2 id="面向soa" tabindex="-1"><a class="header-anchor" href="#面向soa"><span>面向SOA</span></a></h2><p>简单对象访问协议（SOAP） • RESTful HTTP • Apache Thrift • Apache ActiveMQ • Java Message Service（JMS）</p><h2 id="bilibili京东问题" tabindex="-1"><a class="header-anchor" href="#bilibili京东问题"><span>bilibili京东问题</span></a></h2><h2 id="github-java-learning" tabindex="-1"><a class="header-anchor" href="#github-java-learning"><span>github java-learning</span></a></h2><h2 id="raft" tabindex="-1"><a class="header-anchor" href="#raft"><span>raft</span></a></h2><p>Raft 协议是一种用于实现分布式系统中的一致性的算法，它被设计为易于理解和实现。Raft 协议的目标是确保集群中的多个节点能够在状态和数据上保持一致，即便在部分节点发生故障的情况下也能维持系统的正常运行。Raft 实现了一种称为 &quot;共识&quot; 的机制，通过共识，集群中的所有节点最终能够同意特定的值或状态。</p><p>Raft 协议的工作过程可以概括为以下几个关键点：</p><h3 id="_1-角色分配" tabindex="-1"><a class="header-anchor" href="#_1-角色分配"><span>1. 角色分配</span></a></h3><p>Raft 协议将集群中的节点分为三种角色：Leader（领导者）、Follower（跟随者）和Candidate（候选人）。集群在任何时候只能有一个 Leader，它负责处理客户端请求和数据复制。Follower 通常处于被动接收状态，而 Candidate 用于在 Leader 故障时选举新的 Leader。</p><h3 id="_2-领导选举" tabindex="-1"><a class="header-anchor" href="#_2-领导选举"><span>2. 领导选举</span></a></h3><ul><li><strong>选举启动</strong>：当 Follower 在一定时间内没有收到来自 Leader 的消息时，它会变成 Candidate 并发起一次新的选举。</li><li><strong>投票</strong>：Candidate 为自己投票，并向其他节点请求投票。如果一个节点在当前的 &quot;选举期&quot; 内还没有投票，则它可以投票给 Candidate。</li><li><strong>选举成功</strong>：如果 Candidate 获得了集群大多数节点的投票，它就成为新的 Leader。</li></ul><h3 id="_3-日志复制" tabindex="-1"><a class="header-anchor" href="#_3-日志复制"><span>3. 日志复制</span></a></h3><ul><li><strong>日志条目</strong>：Leader 接收来自客户端的请求，将请求作为日志条目追加到自己的日志中。</li><li><strong>复制给 Follower</strong>：然后 Leader 将这些日志条目并行地复制到所有 Follower 节点上，并等待大多数 Follower 确认收到。</li><li><strong>提交条目</strong>：一旦这些条目被大多数节点接收，Leader 将条目标记为已提交，并通知 Follower 提交这些条目。</li></ul><h3 id="_4-安全性和一致性" tabindex="-1"><a class="header-anchor" href="#_4-安全性和一致性"><span>4. 安全性和一致性</span></a></h3><ul><li><strong>任期</strong>（Term）：Raft 通过任期概念来避免旧 Leader 的干扰。每次选举都会增加任期的计数，节点在投票时检查任期，确保数据的一致性和安全性。</li><li><strong>日志匹配</strong>：在日志复制过程中，Leader 会确保 Follower 的日志与自己的保持一致。如果发现不一致，Leader 会逐步回退其日志索引，直到找到一致的点，然后从那里开始重新复制。</li></ul><h3 id="_5-客户端交互" tabindex="-1"><a class="header-anchor" href="#_5-客户端交互"><span>5. 客户端交互</span></a></h3><p>客户端请求通常只能通过 Leader 进行处理。如果客户端连接到的是 Follower，Follower 会重定向请求到当前的 Leader。</p><p>Raft 协议通过这些机制提供了一种相对简单且有效的方式来实现分布式系统的共识，确保了分布式系统中数据的一致性和系统的高可用性。</p><h2 id="raft一致性" tabindex="-1"><a class="header-anchor" href="#raft一致性"><span>raft一致性</span></a></h2><p>Raft 协议体现强一致性主要通过以下几个关键机制：</p><ol><li><p><strong>领导者选举与任期机制</strong>：Raft 通过任期概念（Term）来防止过时的领导者信息干扰当前的领导者和集群状态。每个任期开始时都会选举出一个新的领导者。这保证了在任何给定的任期内，最多只有一个领导者被选举出来，确保了领导者的唯一性。当节点接收到来自领导者的请求时，它们会检查请求中的任期号。如果请求的任期号小于节点的当前任期号，请求会被拒绝。这确保了只有当前任期的领导者能够影响集群状态，从而维护了一致性。</p></li><li><p><strong>日志复制</strong>：领导者将客户端的请求作为日志条目追加到自己的日志中，然后负责将这些日志条目复制到集群中的所有跟随者。只有当大多数节点都已复制了日志条目，领导者才会将该条目标记为已提交。这种机制确保了集群中大多数节点存有相同的日志副本，进一步保证了一致性。</p></li><li><p><strong>日志一致性检查</strong>：在日志复制过程中，领导者还负责确保自己的日志和跟随者的日志保持一致。领导者在复制新的日志条目之前，会检查跟随者的日志是否与自己的日志相匹配。如果发现不匹配，领导者会逐步减少复制的日志索引，直到找到匹配的日志条目为止。这确保了所有的跟随者最终将具有与领导者相同的日志顺序，进一步强化了数据的一致性。</p></li><li><p><strong>提交与应用日志条目</strong>：日志条目只有在被大多数节点复制后才会被提交，这保证了即使在发生故障转移的情况下，已提交的日志条目也不会丢失，因为任何新的领导者都会包含大多数节点已复制的所有提交条目。这意味着系统的状态变更（基于日志条目的应用）只有在保证了跨集群多数节点的一致性后才会发生。</p></li></ol><p>通过这些机制，Raft 协议确保了即使在网络分区、节点故障等不稳定的环境下，集群也能够维持强一致性，保证任何时刻系统状态的一致性，从而使得分布式系统作为一个整体运行，对外提供一致且可靠的服务。</p><h2 id="rabbitmq集群" tabindex="-1"><a class="header-anchor" href="#rabbitmq集群"><span>rabbitmq集群</span></a></h2><p>Erlang 分布式系统：RabbitMQ 节点运行在一个 Erlang 节点上，这些 Erlang 节点形成一个分布式系统。在这个系统中，节点可以直接通过 Erlang 的消息传递机制相互通信。这种通信机制是透明的，允许跨节点的进程间通信就像是同一个节点上的进程间通信一样。</p><p>队列镜像：当在 RabbitMQ 集群中配置镜像队列时，队列的主副本将位于创建队列的节点上，而其他节点可以有一个或多个镜像副本。<strong>这些副本会订阅到主副本的状态变更事件，包括消息的发布、确认和删除</strong>。</p><p>消息同步：当生产者向镜像队列发送消息时，消息首先被发送到拥有队列主副本的节点。然后，这个节点负责将消息分发到其他拥有镜像副本的节点。这通过 Erlang 的分布式消息传递系统完成，确保所有副本都有相同的消息顺序和内容。</p><p>故障转移和选举：如果持有队列主副本的节点失败，集群中的其他节点会通过一种选举机制来选出一个新的节点作为队列的主副本。这个过程同样依赖于 Erlang 的通信机制来协调和同步状态。</p><p>心跳和健康检查：RabbitMQ 节点通过发送心跳消息来检测彼此的可达性和健康状态。这些心跳也是通过 Erlang 的分布式系统机制来实现的，帮助系统及时发现和响应节点故障。</p><h2 id="rabbitmq延迟队列" tabindex="-1"><a class="header-anchor" href="#rabbitmq延迟队列"><span>rabbitmq延迟队列</span></a></h2><h2 id="rabbitmq延迟队列的原理" tabindex="-1"><a class="header-anchor" href="#rabbitmq延迟队列的原理"><span>rabbitmq延迟队列的原理</span></a></h2><h2 id="使用ffmpeg解决视频时间戳错乱的问题【qs】" tabindex="-1"><a class="header-anchor" href="#使用ffmpeg解决视频时间戳错乱的问题【qs】"><span>使用ffmpeg解决视频时间戳错乱的问题【QS】</span></a></h2><p><code>ffmpeg</code> 提供了多种方式来处理和修正视频文件中的时间戳问题。虽然 <code>-vsync 0</code> 参数指示 <code>ffmpeg</code> 不对帧进行额外的同步（即，尽可能地保留源中的所有帧，包括那些可能导致时间戳问题的帧），但这并不意味着它会修正时间戳问题。相反，<code>-vsync</code> 参数的其他值可以用于处理不同的时间戳和帧率问题，从而间接地“修正”时间戳问题。</p><h3 id="使用-vsync-修正时间戳问题" tabindex="-1"><a class="header-anchor" href="#使用-vsync-修正时间戳问题"><span>使用 <code>-vsync</code> 修正时间戳问题</span></a></h3><ol><li><p><strong><code>-vsync 1</code> 或 <code>-vsync cfr</code></strong>（默认值）：这会使 <code>ffmpeg</code> 生成恒定帧率（CFR）的输出，通过在必要时重复或丢弃帧来确保每个输出帧都有连续的时间戳。这对于确保输出视频与预期的帧率匹配非常有用，特别是当源视频的时间戳不连续或不规则时。</p></li><li><p><strong><code>-vsync 2</code> 或 <code>-vsync vfr</code></strong>：这允许 <code>ffmpeg</code> 生成变帧率（VFR）的输出，保持源帧的原始时间戳。这在源视频的帧率确实变化时有用，但需要确保目标播放器或设备支持 VFR 视频。</p></li><li><p><strong><code>-vsync drop</code></strong>：这指示 <code>ffmpeg</code> 丢弃在视频转码过程中多余的帧，用于避免时间戳重叠或其他同步问题。这可能有助于修正源视频中由于帧过多而导致的时间戳不连续问题。</p></li></ol><h3 id="修正不连续或不规则时间戳" tabindex="-1"><a class="header-anchor" href="#修正不连续或不规则时间戳"><span>修正不连续或不规则时间戳</span></a></h3><p>如果目的是直接修正源视频中的时间戳不连续或不规则问题，可以考虑以下策略：</p><ul><li><p><strong>重新封装（不重新编码）</strong>：通过使用 <code>ffmpeg</code> 仅重新封装视频流而不重新编码，有时可以解决轻微的时间戳问题。这可以通过指定与源相同的编解码器但输出到新容器实现，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-c</span> copy output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>强制恒定帧率</strong>：对于时间戳严重不连续的视频，强制将视频转码为恒定帧率（CFR）可能有助于“平滑”时间戳，并确保输出视频的播放更加平稳。这需要重新编码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-r</span> <span class="token number">30</span> <span class="token parameter variable">-vsync</span> cfr output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，<code>-r 30</code> 指定了希望的输出帧率为 30fps。</p></li></ul><p>总的来说，<code>ffmpeg</code> 提供了灵活的选项来处理时间戳问题，但最佳的处理方法取决于问题的具体性质和目标视频的要求。在某些情况下，简单的重新封装就足够了；在其他情况下，则可能需要更复杂的处理，如重新编码。</p>`,47),t=[n];function s(d,o){return a(),l("div",null,t)}const p=e(r,[["render",s],["__file","interviewer.html.vue"]]),h=JSON.parse('{"path":"/posts/theory/interviewer.html","title":"interviewer","lang":"zh-CN","frontmatter":{"title":"interviewer","date":"2024-03-01T14:02:31.000Z"},"headers":[{"level":2,"title":"# 线程死锁怎么产生？怎么避免？","slug":"线程死锁怎么产生-怎么避免","link":"#线程死锁怎么产生-怎么避免","children":[]},{"level":2,"title":"rabbitmq消息可靠性保证？","slug":"rabbitmq消息可靠性保证","link":"#rabbitmq消息可靠性保证","children":[]},{"level":2,"title":"rabbitmq事务","slug":"rabbitmq事务","link":"#rabbitmq事务","children":[]},{"level":2,"title":"raocketmq的流式计算","slug":"raocketmq的流式计算","link":"#raocketmq的流式计算","children":[]},{"level":2,"title":"面向SOA","slug":"面向soa","link":"#面向soa","children":[]},{"level":2,"title":"bilibili京东问题","slug":"bilibili京东问题","link":"#bilibili京东问题","children":[]},{"level":2,"title":"github java-learning","slug":"github-java-learning","link":"#github-java-learning","children":[]},{"level":2,"title":"raft","slug":"raft","link":"#raft","children":[{"level":3,"title":"1. 角色分配","slug":"_1-角色分配","link":"#_1-角色分配","children":[]},{"level":3,"title":"2. 领导选举","slug":"_2-领导选举","link":"#_2-领导选举","children":[]},{"level":3,"title":"3. 日志复制","slug":"_3-日志复制","link":"#_3-日志复制","children":[]},{"level":3,"title":"4. 安全性和一致性","slug":"_4-安全性和一致性","link":"#_4-安全性和一致性","children":[]},{"level":3,"title":"5. 客户端交互","slug":"_5-客户端交互","link":"#_5-客户端交互","children":[]}]},{"level":2,"title":"raft一致性","slug":"raft一致性","link":"#raft一致性","children":[]},{"level":2,"title":"rabbitmq集群","slug":"rabbitmq集群","link":"#rabbitmq集群","children":[]},{"level":2,"title":"rabbitmq延迟队列","slug":"rabbitmq延迟队列","link":"#rabbitmq延迟队列","children":[]},{"level":2,"title":"rabbitmq延迟队列的原理","slug":"rabbitmq延迟队列的原理","link":"#rabbitmq延迟队列的原理","children":[]},{"level":2,"title":"使用ffmpeg解决视频时间戳错乱的问题【QS】","slug":"使用ffmpeg解决视频时间戳错乱的问题【qs】","link":"#使用ffmpeg解决视频时间戳错乱的问题【qs】","children":[{"level":3,"title":"使用 -vsync 修正时间戳问题","slug":"使用-vsync-修正时间戳问题","link":"#使用-vsync-修正时间戳问题","children":[]},{"level":3,"title":"修正不连续或不规则时间戳","slug":"修正不连续或不规则时间戳","link":"#修正不连续或不规则时间戳","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/theory/interviewer.md","excerpt":"<!-- jl -->\\n<ul>\\n<li>多协程ffmpeg</li>\\n<li>sync.Once原理</li>\\n</ul>\\n<h2><a class=\\"header-anchor\\" href=\\"#线程死锁怎么产生-怎么避免\\"><span></span></a><a href=\\"#%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E6%80%8E%E4%B9%88%E4%BA%A7%E7%94%9F-%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D\\">#</a> 线程死锁怎么产生？怎么避免？</h2>\\n<p><strong>死锁产生的四个必要条件</strong>：</p>"}');export{p as comp,h as data};
