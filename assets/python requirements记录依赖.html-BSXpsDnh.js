import{_ as e,o as t,c as s,e as n}from"./app-ATJF5j0V.js";const a={},i=n(`<p>在Python中，使用<code>pip install</code>安装依赖不会在您的项目目录中创建任何文件来记录依赖。Python与Node.js不同，它没有一个与<code>package.json</code>直接对应的文件来跟踪项目依赖。不过，您可以通过创建一个<code>requirements.txt</code>文件来手动管理依赖。</p><h3 id="创建-requirements-txt" tabindex="-1"><a class="header-anchor" href="#创建-requirements-txt"><span>创建 <code>requirements.txt</code></span></a></h3><ol><li><p><strong>记录依赖</strong>：您可以手动创建一个<code>requirements.txt</code>文件，在其中列出项目所需的所有包及其版本。例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>beautifulsoup4==4.9.3
requests==2.25.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>自动生成依赖列表</strong>：您也可以通过以下命令自动生成当前环境中所有已安装包的列表：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip freeze <span class="token operator">&gt;</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个<code>requirements.txt</code>文件，其中包含了所有通过pip安装的包及其精确版本号。</p></li></ol><h3 id="理解-pip-install" tabindex="-1"><a class="header-anchor" href="#理解-pip-install"><span>理解 <code>pip install</code></span></a></h3><p>当您使用<code>pip install</code>安装包时，这些包被安装到您当前激活的Python环境中，而不是您的项目目录中。这意味着：</p><ul><li><strong>全局环境安装</strong>：如果您在没有激活任何虚拟环境的情况下安装包，它们将被安装到全局Python环境中。</li><li><strong>虚拟环境安装</strong>：如果您在激活了虚拟环境的情况下安装包，它们将仅在该特定虚拟环境中可用。</li></ul><h3 id="使用虚拟环境" tabindex="-1"><a class="header-anchor" href="#使用虚拟环境"><span>使用虚拟环境</span></a></h3><p>为了更好地管理依赖和避免与系统级别的Python环境冲突，建议在虚拟环境中工作。您可以使用Conda或<code>venv</code>（Python内置的虚拟环境工具）来创建和管理虚拟环境。</p><ol><li><p><strong>创建虚拟环境（使用<code>venv</code>）</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> venv myenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>激活虚拟环境</strong>：</p><ul><li><p>在Windows上：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>myenv<span class="token punctuation">\\</span>Scripts<span class="token punctuation">\\</span>activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在Linux或macOS上：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> myenv/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>在虚拟环境中安装包</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> beautifulsoup4 requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>通过这种方式，您可以确保项目的依赖与其他项目或全局环境隔离，从而避免版本冲突和其他问题。</p>`,10),l=[i];function r(d,o){return t(),s("div",null,l)}const c=e(a,[["render",r],["__file","python requirements记录依赖.html.vue"]]),u=JSON.parse('{"path":"/posts/python/python%20requirements%E8%AE%B0%E5%BD%95%E4%BE%9D%E8%B5%96.html","title":"python requirements记录依赖","lang":"zh-CN","frontmatter":{"title":"python requirements记录依赖","date":"2024-02-22T19:47:21.000Z","tags":["python"]},"headers":[{"level":3,"title":"创建 requirements.txt","slug":"创建-requirements-txt","link":"#创建-requirements-txt","children":[]},{"level":3,"title":"理解 pip install","slug":"理解-pip-install","link":"#理解-pip-install","children":[]},{"level":3,"title":"使用虚拟环境","slug":"使用虚拟环境","link":"#使用虚拟环境","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/python/python requirements记录依赖.md","excerpt":"<p>在Python中，使用<code>pip install</code>安装依赖不会在您的项目目录中创建任何文件来记录依赖。Python与Node.js不同，它没有一个与<code>package.json</code>直接对应的文件来跟踪项目依赖。不过，您可以通过创建一个<code>requirements.txt</code>文件来手动管理依赖。</p>\\n<h3>创建 <code>requirements.txt</code></h3>\\n<ol>\\n<li>\\n<p><strong>记录依赖</strong>：您可以手动创建一个<code>requirements.txt</code>文件，在其中列出项目所需的所有包及其版本。例如：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>beautifulsoup4==4.9.3\\nrequests==2.25.1\\n</code></pre></div></li>\\n<li>\\n<p><strong>自动生成依赖列表</strong>：您也可以通过以下命令自动生成当前环境中所有已安装包的列表：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>pip freeze <span class=\\"token operator\\">&gt;</span> requirements.txt\\n</code></pre></div><p>这将创建一个<code>requirements.txt</code>文件，其中包含了所有通过pip安装的包及其精确版本号。</p>\\n</li>\\n</ol>\\n"}');export{c as comp,u as data};
