import{_ as n,o as s,c as a,e as t}from"./app-CinGCuEv.js";const p={},e=t(`<h2 id="grpc双向流" tabindex="-1"><a class="header-anchor" href="#grpc双向流"><span>GRPC双向流</span></a></h2><h3 id="proto" tabindex="-1"><a class="header-anchor" href="#proto"><span>proto</span></a></h3><div class="language-proto line-numbers-mode" data-ext="proto" data-title="proto"><pre class="language-proto"><code>syntax = &quot;proto3&quot;;

package pb;

option go_package=&quot;./;pb&quot;;

service NotificationService {
  // 双向流式RPC
  rpc Connect (stream ClientRequest) returns (stream ServerResponse);
}

message ClientRequest {
  string message = 1;
}

message ServerResponse {
  string notification = 1;
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端"><span>服务端</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;io&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
	<span class="token string">&quot;sync/atomic&quot;</span>
	<span class="token string">&quot;temp/grpc_stream/pb&quot;</span>

	<span class="token string">&quot;google.golang.org/grpc&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> server <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	pb<span class="token punctuation">.</span>UnimplementedNotificationServiceServer
<span class="token punctuation">}</span>

<span class="token keyword">var</span> clientIDCounter <span class="token builtin">int64</span> <span class="token comment">// 用于生成唯一客户端ID</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>server<span class="token punctuation">)</span> <span class="token function">Connect</span><span class="token punctuation">(</span>stream pb<span class="token punctuation">.</span>NotificationService_ConnectServer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 生成客户端ID</span>
	clientID <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clientIDCounter<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	clientLogPrefix <span class="token operator">:=</span> <span class="token string">&quot;Client &quot;</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>clientID<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span>

	<span class="token comment">// 可以选择在此处添加逻辑来处理元数据（metadata）</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		in<span class="token punctuation">,</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
			<span class="token comment">// 客户端关闭连接</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>clientLogPrefix <span class="token operator">+</span> <span class="token string">&quot;Connection closed&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token comment">// 正常关闭连接</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>clientLogPrefix<span class="token operator">+</span><span class="token string">&quot;Failed to receive a note: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">return</span> err <span class="token comment">// 返回错误，但不关闭服务器</span>
		<span class="token punctuation">}</span>

		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>clientLogPrefix <span class="token operator">+</span> in<span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token comment">// 基于客户端请求或其他逻辑，服务器可以随时发送通知</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ServerResponse<span class="token punctuation">{</span>Notification<span class="token punctuation">:</span> <span class="token string">&quot;New Notification&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>clientLogPrefix<span class="token operator">+</span><span class="token string">&quot;Failed to send a notification: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">return</span> err <span class="token comment">// 同样，返回错误但不关闭服务器</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:50051&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to listen: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	s <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	pb<span class="token punctuation">.</span><span class="token function">RegisterNotificationServiceServer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to serve: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;io&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;temp/grpc_stream/pb&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	<span class="token string">&quot;google.golang.org/grpc&quot;</span>
	<span class="token string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:50051&quot;</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>insecure<span class="token punctuation">.</span><span class="token function">NewCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;did not connect: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c <span class="token operator">:=</span> pb<span class="token punctuation">.</span><span class="token function">NewNotificationServiceClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>

	stream<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not connect: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建一个5秒后发送当前时间的通道</span>
		timeout <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token comment">// for {</span>
		<span class="token comment">// 	// 发送请求到服务器</span>
		<span class="token comment">// 	if err := stream.Send(&amp;pb.ClientRequest{Message: &quot;Hello&quot;}); err != nil {</span>
		<span class="token comment">// 		log.Fatalf(&quot;Failed to send a message: %v&quot;, err)</span>
		<span class="token comment">// 	}</span>
		<span class="token comment">// 	time.Sleep(time.Second)</span>
		<span class="token comment">// }</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>
				<span class="token comment">// 5秒后停止发送消息</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout reached, stop sending messages&quot;</span><span class="token punctuation">)</span>
				<span class="token comment">// 此方法会发送io.EOF</span>
				err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">CloseSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to close stream: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">return</span> <span class="token comment">// 使用return来退出goroutine</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
				<span class="token comment">// 发送请求到服务器</span>
				<span class="token keyword">if</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>ClientRequest<span class="token punctuation">{</span>Message<span class="token punctuation">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to send a message: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
				time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;干&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token comment">// 接收来自服务器的通知</span>
		in<span class="token punctuation">,</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
			<span class="token comment">// 服务器关闭连接</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to receive a notification : %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Received notification %s&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span>Notification<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="grpc服务端流" tabindex="-1"><a class="header-anchor" href="#grpc服务端流"><span>GRPC服务端流</span></a></h2><h3 id="proto-1" tabindex="-1"><a class="header-anchor" href="#proto-1"><span>proto</span></a></h3><div class="language-proto line-numbers-mode" data-ext="proto" data-title="proto"><pre class="language-proto"><code>syntax = &quot;proto3&quot;;

package stream_service;

option go_package=&quot;./;stream_service&quot;;

// 定义一个点
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// 定义一个特性
message Feature {
  string name = 1;
  Point location = 2;
}

// 服务定义
service StreamService {
  // 服务器端流RPC方法
  rpc ListFeatures(Point) returns (stream Feature);
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务端-1" tabindex="-1"><a class="header-anchor" href="#服务端-1"><span>服务端</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	stream_service <span class="token string">&quot;temp/grpc_server_stream/pb&quot;</span>

	<span class="token string">&quot;google.golang.org/grpc&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> server <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	stream_service<span class="token punctuation">.</span>UnimplementedStreamServiceServer
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>server<span class="token punctuation">)</span> <span class="token function">ListFeatures</span><span class="token punctuation">(</span>req <span class="token operator">*</span>stream_service<span class="token punctuation">.</span>Point<span class="token punctuation">,</span> stream stream_service<span class="token punctuation">.</span>StreamService_ListFeaturesServer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	features <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>stream_service<span class="token punctuation">.</span>Feature<span class="token punctuation">{</span>
		<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;Feature1&quot;</span><span class="token punctuation">,</span> Location<span class="token punctuation">:</span> <span class="token operator">&amp;</span>stream_service<span class="token punctuation">.</span>Point<span class="token punctuation">{</span>Latitude<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> Longitude<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;Feature2&quot;</span><span class="token punctuation">,</span> Location<span class="token punctuation">:</span> <span class="token operator">&amp;</span>stream_service<span class="token punctuation">.</span>Point<span class="token punctuation">{</span>Latitude<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> Longitude<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> feature <span class="token operator">:=</span> <span class="token keyword">range</span> features <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:50051&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to listen: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 为grpc服务器注册服务，并调用Serve开始服务</span>
	s <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	stream_service<span class="token punctuation">.</span><span class="token function">RegisterStreamServiceServer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>server<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to serve: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端-1" tabindex="-1"><a class="header-anchor" href="#客户端-1"><span>客户端</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;io&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	stream_service <span class="token string">&quot;temp/grpc_server_stream/pb&quot;</span>

	<span class="token string">&quot;google.golang.org/grpc&quot;</span>
	<span class="token string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:50051&quot;</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>insecure<span class="token punctuation">.</span><span class="token function">NewCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;did not connect: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c <span class="token operator">:=</span> stream_service<span class="token punctuation">.</span><span class="token function">NewStreamServiceClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token comment">// 创建一个Point请求</span>
	point <span class="token operator">:=</span> <span class="token operator">&amp;</span>stream_service<span class="token punctuation">.</span>Point<span class="token punctuation">{</span>Latitude<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> Longitude<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
	stream<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ListFeatures</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;could not list features: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		feature<span class="token punctuation">,</span> err <span class="token operator">:=</span> stream<span class="token punctuation">.</span><span class="token function">Recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
			<span class="token comment">// 流结束</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to receive a feature : %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Feature: %s, Location: (%d, %d)&quot;</span><span class="token punctuation">,</span> feature<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> feature<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>Latitude<span class="token punctuation">,</span> feature<span class="token punctuation">.</span>Location<span class="token punctuation">.</span>Longitude<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","grpc的几种分类.html.vue"]]),k=JSON.parse('{"path":"/posts/go/grpc%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%86%E7%B1%BB.html","title":"grpc的几种分类","lang":"zh-CN","frontmatter":{"title":"grpc的几种分类","date":"2024-02-24T13:41:25.000Z","tags":null,"description":"GRPC双向流 proto 服务端 客户端 GRPC服务端流 proto 服务端 客户端","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/go/grpc%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%86%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"grpc的几种分类"}],["meta",{"property":"og:description","content":"GRPC双向流 proto 服务端 客户端 GRPC服务端流 proto 服务端 客户端"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:published_time","content":"2024-02-24T13:41:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"grpc的几种分类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-24T13:41:25.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"GRPC双向流","slug":"grpc双向流","link":"#grpc双向流","children":[{"level":3,"title":"proto","slug":"proto","link":"#proto","children":[]},{"level":3,"title":"服务端","slug":"服务端","link":"#服务端","children":[]},{"level":3,"title":"客户端","slug":"客户端","link":"#客户端","children":[]}]},{"level":2,"title":"GRPC服务端流","slug":"grpc服务端流","link":"#grpc服务端流","children":[{"level":3,"title":"proto","slug":"proto-1","link":"#proto-1","children":[]},{"level":3,"title":"服务端","slug":"服务端-1","link":"#服务端-1","children":[]},{"level":3,"title":"客户端","slug":"客户端-1","link":"#客户端-1","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/go/grpc的几种分类.md","excerpt":"<h2>GRPC双向流</h2>\\n<h3>proto</h3>\\n<div class=\\"language-proto\\" data-ext=\\"proto\\" data-title=\\"proto\\"><pre class=\\"language-proto\\"><code>syntax = \\"proto3\\";\\n\\npackage pb;\\n\\noption go_package=\\"./;pb\\";\\n\\nservice NotificationService {\\n  // 双向流式RPC\\n  rpc Connect (stream ClientRequest) returns (stream ServerResponse);\\n}\\n\\nmessage ClientRequest {\\n  string message = 1;\\n}\\n\\nmessage ServerResponse {\\n  string notification = 1;\\n}\\n\\n</code></pre></div><h3>服务端</h3>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"io\\"</span>\\n\\t<span class=\\"token string\\">\\"log\\"</span>\\n\\t<span class=\\"token string\\">\\"net\\"</span>\\n\\t<span class=\\"token string\\">\\"strconv\\"</span>\\n\\t<span class=\\"token string\\">\\"sync/atomic\\"</span>\\n\\t<span class=\\"token string\\">\\"temp/grpc_stream/pb\\"</span>\\n\\n\\t<span class=\\"token string\\">\\"google.golang.org/grpc\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">type</span> server <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tpb<span class=\\"token punctuation\\">.</span>UnimplementedNotificationServiceServer\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">var</span> clientIDCounter <span class=\\"token builtin\\">int64</span> <span class=\\"token comment\\">// 用于生成唯一客户端ID</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token punctuation\\">(</span>s <span class=\\"token operator\\">*</span>server<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">Connect</span><span class=\\"token punctuation\\">(</span>stream pb<span class=\\"token punctuation\\">.</span>NotificationService_ConnectServer<span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">error</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// 生成客户端ID</span>\\n\\tclientID <span class=\\"token operator\\">:=</span> atomic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddInt64</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>clientIDCounter<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n\\tclientLogPrefix <span class=\\"token operator\\">:=</span> <span class=\\"token string\\">\\"Client \\"</span> <span class=\\"token operator\\">+</span> strconv<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">FormatInt</span><span class=\\"token punctuation\\">(</span>clientID<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\": \\"</span>\\n\\n\\t<span class=\\"token comment\\">// 可以选择在此处添加逻辑来处理元数据（metadata）</span>\\n\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tin<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Recv</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">==</span> io<span class=\\"token punctuation\\">.</span>EOF <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 客户端关闭连接</span>\\n\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>clientLogPrefix <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"Connection closed\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token comment\\">// 正常关闭连接</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span>clientLogPrefix<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"Failed to receive a note: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> err <span class=\\"token comment\\">// 返回错误，但不关闭服务器</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>clientLogPrefix <span class=\\"token operator\\">+</span> in<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t\\t<span class=\\"token comment\\">// 基于客户端请求或其他逻辑，服务器可以随时发送通知</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">:=</span> stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Send</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>pb<span class=\\"token punctuation\\">.</span>ServerResponse<span class=\\"token punctuation\\">{</span>Notification<span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"New Notification\\"</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span>clientLogPrefix<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"Failed to send a notification: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> err <span class=\\"token comment\\">// 同样，返回错误但不关闭服务器</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tlis<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> net<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Listen</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"tcp\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\":50051\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"failed to listen: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\ts <span class=\\"token operator\\">:=</span> grpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewServer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\tpb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RegisterNotificationServiceServer</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>server<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">:=</span> s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Serve</span><span class=\\"token punctuation\\">(</span>lis<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"failed to serve: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div><h3>客户端</h3>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"context\\"</span>\\n\\t<span class=\\"token string\\">\\"fmt\\"</span>\\n\\t<span class=\\"token string\\">\\"io\\"</span>\\n\\t<span class=\\"token string\\">\\"log\\"</span>\\n\\t<span class=\\"token string\\">\\"temp/grpc_stream/pb\\"</span>\\n\\t<span class=\\"token string\\">\\"time\\"</span>\\n\\n\\t<span class=\\"token string\\">\\"google.golang.org/grpc\\"</span>\\n\\t<span class=\\"token string\\">\\"google.golang.org/grpc/credentials/insecure\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\tconn<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> grpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dial</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"localhost:50051\\"</span><span class=\\"token punctuation\\">,</span> grpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WithTransportCredentials</span><span class=\\"token punctuation\\">(</span>insecure<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewCredentials</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> grpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WithBlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"did not connect: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">defer</span> conn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\tc <span class=\\"token operator\\">:=</span> pb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewNotificationServiceClient</span><span class=\\"token punctuation\\">(</span>conn<span class=\\"token punctuation\\">)</span>\\n\\n\\tstream<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> c<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Connect</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Background</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"could not connect: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">go</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">// 创建一个5秒后发送当前时间的通道</span>\\n\\t\\ttimeout <span class=\\"token operator\\">:=</span> time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">After</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span> <span class=\\"token operator\\">*</span> time<span class=\\"token punctuation\\">.</span>Second<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token comment\\">// for {</span>\\n\\t\\t<span class=\\"token comment\\">// \\t// 发送请求到服务器</span>\\n\\t\\t<span class=\\"token comment\\">// \\tif err := stream.Send(&amp;pb.ClientRequest{Message: \\"Hello\\"}); err != nil {</span>\\n\\t\\t<span class=\\"token comment\\">// \\t\\tlog.Fatalf(\\"Failed to send a message: %v\\", err)</span>\\n\\t\\t<span class=\\"token comment\\">// \\t}</span>\\n\\t\\t<span class=\\"token comment\\">// \\ttime.Sleep(time.Second)</span>\\n\\t\\t<span class=\\"token comment\\">// }</span>\\n\\t\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">select</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">case</span> <span class=\\"token operator\\">&lt;-</span>timeout<span class=\\"token punctuation\\">:</span>\\n\\t\\t\\t\\t<span class=\\"token comment\\">// 5秒后停止发送消息</span>\\n\\t\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Timeout reached, stop sending messages\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t<span class=\\"token comment\\">// 此方法会发送io.EOF</span>\\n\\t\\t\\t\\terr <span class=\\"token operator\\">:=</span> stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CloseSend</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Failed to close stream: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token comment\\">// 使用return来退出goroutine</span>\\n\\t\\t\\t<span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">:</span>\\n\\t\\t\\t\\t<span class=\\"token comment\\">// 发送请求到服务器</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">:=</span> stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Send</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>pb<span class=\\"token punctuation\\">.</span>ClientRequest<span class=\\"token punctuation\\">{</span>Message<span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"Hello\\"</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Failed to send a message: %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t\\ttime<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sleep</span><span class=\\"token punctuation\\">(</span>time<span class=\\"token punctuation\\">.</span>Second<span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"干\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">// 接收来自服务器的通知</span>\\n\\t\\tin<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> stream<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Recv</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">==</span> io<span class=\\"token punctuation\\">.</span>EOF <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 服务器关闭连接</span>\\n\\t\\t\\t<span class=\\"token keyword\\">break</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Failed to receive a notification : %v\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Received notification %s\\"</span><span class=\\"token punctuation\\">,</span> in<span class=\\"token punctuation\\">.</span>Notification<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>"}');export{r as comp,k as data};
