import{_ as n,o as s,c as a,e as t}from"./app-CinGCuEv.js";const e={},p=t(`<h2 id="http协议断开的取决因素" tabindex="-1"><a class="header-anchor" href="#http协议断开的取决因素"><span>http协议断开的取决因素</span></a></h2><p>HTTP 连接断开的时机主要取决于 HTTP 协议的版本（如 HTTP/1.1 或 HTTP/2）以及特定的服务器和客户端配置。这里有几种常见的情况：</p><ol><li><p><strong>HTTP/1.0 默认行为</strong>：在 HTTP/1.0 中，默认情况下，每个请求完成后连接都会关闭。这意味着对于每个新请求，客户端都需要建立一个新的连接。</p></li><li><p><strong>HTTP/1.1 持久连接</strong>：HTTP/1.1 引入了持久连接（也称为连接复用），在这种情况下，连接在发送和接收多个请求/响应后仍然保持打开状态。这样做可以减少建立和关闭连接的开销。除非显式使用 <code>Connection: close</code> 头部指示关闭，否则连接将保持开启。</p></li><li><p><strong>超时</strong>：无论是 HTTP/1.1 还是 HTTP/2，服务器和客户端通常都有一个超时设置。如果在指定的超时时间内没有数据传输，连接将自动关闭。</p></li><li><p><strong>服务器或客户端主动关闭</strong>：服务器或客户端可以随时通过发送适当的信号来主动关闭连接。</p></li><li><p><strong>错误或异常</strong>：在发生错误或异常情况（如网络故障、协议错误等）时，连接可能会被迫关闭。</p></li><li><p><strong>HTTP/2 的多路复用</strong>：HTTP/2 进一步优化了连接的使用，允许在单一连接上同时进行多个请求和响应的交换。即使多个请求同时进行，连接也会保持开启，直到客户端或服务器决定关闭或发生超时。</p></li></ol><h2 id="http协议版本选择的取决因素" tabindex="-1"><a class="header-anchor" href="#http协议版本选择的取决因素"><span>http协议版本选择的取决因素</span></a></h2><p>本（HTTP/1.0、HTTP/1.1 或 HTTP/2）实际上并不取决于 Vue 或 Axios 本身，而是取决于几个其他因素：</p><ol><li><p><strong>服务器配置</strong>：最关键的因素是你的后端服务器支持哪种 HTTP 协议版本。如果服务器配置为支持 HTTP/2，那么在支持 HTTP/2 的环境下（如客户端和网络基础设施支持），将使用 HTTP/2。否则，将回退到 HTTP/1.1 或 HTTP/1.0。</p></li><li><p><strong>客户端支持</strong>：客户端（例如浏览器）也必须支持 HTTP/2 才能使用这个协议。大多数现代浏览器都支持 HTTP/2。</p></li><li><p><strong>网络环境</strong>：有时网络环境（如代理、负载均衡器等）可能对使用的协议版本有所影响，尤其是在复杂的企业网络中。</p></li></ol><p>在实际应用中，如果你的后端服务器支持 HTTP/2，并且客户端（浏览器）也支持，那么当你使用 Axios 发出请求时，很可能是通过 HTTP/2 进行通信的。但如果服务器只支持 HTTP/1.1 或 HTTP/1.0，那么即使客户端支持 HTTP/2，通信也只能使用 HTTP/1.x。</p><p>可以通过浏览器的开发者工具（通常在“网络”或“Network”标签页中）检查实际的 HTTP 协议版本。在发送请求后，查找相关的 HTTP 请求，通常可以在响应头或请求头中找到表示 HTTP 协议版本的信息。</p><h2 id="http2协议" tabindex="-1"><a class="header-anchor" href="#http2协议"><span>HTTP2协议</span></a></h2><p>HTTP/2.0 的多路复用（Multiplexing）是一种允许在单个 TCP 连接上同时发送和接收多个请求和响应的机制。这与 HTTP/1.x 不同，在 HTTP/1.x 中，每个请求/响应循环都需要一个单独的连接或在连接上进行顺序处理（HTTP/1.1 中的流水线处理也受限于头阻塞问题）。多路复用是 HTTP/2 的关键特性之一，它带来了显著的性能提升。</p><p><strong>多路复用的工作原理：</strong></p><ul><li><p>同时处理多个请求/响应：在 HTTP/2 中，一个连接可以同时处理多个请求和响应。这意味着不同的请求可以同时在一个连接上开始和结束，而不会互相干扰。</p></li><li><p>帧和流：HTTP/2 将数据传输分解成小的帧，这些帧属于不同的流（每个流对应一个请求/响应循环）。这允许同时交错传输多个请求和响应的帧，而不会相互影响。</p></li><li><p>减少延迟和提高效率：由于避免了建立多个连接的开销和减少了头阻塞（一个请求阻塞其他请求的情况），多路复用能够减少延迟，并提高网络通信的效率</p></li></ul><h2 id="使用gin和nginx提供http2协议的web服务" tabindex="-1"><a class="header-anchor" href="#使用gin和nginx提供http2协议的web服务"><span>使用Gin和Nginx提供http2协议的web服务</span></a></h2><h3 id="gin" tabindex="-1"><a class="header-anchor" href="#gin"><span>Gin</span></a></h3><p>对于 Gin 来说，没有特殊的配置是必需的来支持 HTTP/2.0，因为它依赖于 Go 的 net/http 包，后者从 Go 1.6 版本开始默认支持 HTTP/2.0。只要你的 Go 版本高于 1.6，并且你没有在代码中禁用 HTTP/2.0，Gin 就已经准备好支持 HTTP/2.0 了。</p><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx"><span>Nginx</span></a></h3><ul><li><p><strong>确认Nginx 版本</strong>：确保你使用的 Nginx 版本支持 HTTP/2.0。从 Nginx 1.9.5 开始，HTTP/2.0 得到了支持。</p></li><li><p><strong>使用SSL/TLS</strong>：HTTP/2.0 需要 SSL/TLS（HTTPS），<strong>因为大多数浏览器仅在 HTTPS 下支持 HTTP/2.0</strong>。因此，你需要为你的 Nginx 服务器配置 SSL 证书和密钥。</p></li><li><p><strong>开启 HTTP/2.0</strong>：在 Nginx 配置文件中，你需要为监听的端口<strong>添加 http2 参数</strong>。通常，这会在 <code>server</code> 块的 <code>listen</code> 指令中指定。</p></li></ul><p><strong>示例：</strong></p><div class="language-conf line-numbers-mode" data-ext="conf" data-title="conf"><pre class="language-conf"><code>
server {
    listen 443 ssl http2;
    server_name example.com;

    ssl_certificate /path/to/your/certificate.crt;
    ssl_certificate_key /path/to/your/private.key;

    location / {
        proxy_pass http://your_gin_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务端关闭连接" tabindex="-1"><a class="header-anchor" href="#服务端关闭连接"><span>服务端关闭连接</span></a></h3><p>在服务器端，关闭连接的方式通常取决于特定的编程语言和框架。例如，对于基于 Node.js 的服务器，你可以在处理完请求后显式地关闭连接。对于其他服务器软件，如 Apache 或 Nginx，通常会根据配置的超时时间自动管理连接的关闭。</p><p>总的来说，设置超时和关闭连接的具体方法将依赖于你使用的具体技术栈和工具。需要参考相关的文档和实践来准确实施。</p><p><strong>对于常见的 Web 服务器</strong></p><ol><li><p><strong>Nginx</strong>：在 Nginx 中，你可以通过修改配置文件来设置超时参数，如 <code>keepalive_timeout</code> 和 <code>proxy_read_timeout</code>。</p><p>示例：</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    ...
    <span class="token directive"><span class="token keyword">keepalive_timeout</span> <span class="token number">30</span></span><span class="token punctuation">;</span>
    ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Apache</strong>：在 Apache 中，使用 <code>Timeout</code> 指令来设置超时时间。</p><p>示例：</p><div class="language-apache line-numbers-mode" data-ext="apache" data-title="apache"><pre class="language-apache"><code>Timeout 30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Gin设置读写超时</strong> 通过在服务器级别设置读写超时，可以在特定时间内没有活动时自动关闭连接。这不是立即关闭连接的方法，但它可以确保连接不会无限期地保持打开状态。</p></li></ol><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
    Addr<span class="token punctuation">:</span>         <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span>
    Handler<span class="token punctuation">:</span>      router<span class="token punctuation">,</span>
    ReadTimeout<span class="token punctuation">:</span>  <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
    WriteTimeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p><strong>Node.js (Express, Koa, etc.)</strong>：在 Node.js 的 HTTP 服务器中，可以使用 <code>server.timeout</code> 属性来设置超时。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">30000</span><span class="token punctuation">;</span> <span class="token comment">// Timeout in milliseconds</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="客户端主动关闭-http-连接" tabindex="-1"><a class="header-anchor" href="#客户端主动关闭-http-连接"><span>客户端主动关闭 HTTP 连接</span></a></h3><p>对于客户端来说，如何关闭连接取决于你使用的 HTTP 客户端库。</p><ol><li><p><strong>Axios (JavaScript)</strong>：在 Axios 中，你可以通过配置取消令牌（cancel token）来取消请求，从而间接关闭连接。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/12345&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">cancelToken</span><span class="token operator">:</span> source<span class="token punctuation">.</span>token
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thrown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Request canceled&#39;</span><span class="token punctuation">,</span> thrown<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理错误</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 取消请求</span>
source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">&#39;Operation canceled by the user.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>cURL(命令行)</strong>：在使用 cURL 发送请求时，你可以简单地使用 Ctrl+C 组合键来终止命令，从而关闭连接。</p></li><li><p><strong>其他编程语言和库</strong>：大多数 HTTP 客户端库都提供了取消正在进行的 HTTP 请求的方法。具体实现取决于库和编程语言。</p></li></ol>`,29),i=[p];function o(l,c){return s(),a("div",null,i)}const u=n(e,[["render",o],["__file","http协议断开时机.html.vue"]]),d=JSON.parse('{"path":"/posts/go/http%E5%8D%8F%E8%AE%AE%E6%96%AD%E5%BC%80%E6%97%B6%E6%9C%BA.html","title":"http协议断开时机","lang":"zh-CN","frontmatter":{"layout":"posts","title":"http协议断开时机","date":"2024-01-24T20:16:49.000Z","tags":["https","web","协议"],"categories":["web"],"description":"http协议断开的取决因素 HTTP 连接断开的时机主要取决于 HTTP 协议的版本（如 HTTP/1.1 或 HTTP/2）以及特定的服务器和客户端配置。这里有几种常见的情况： HTTP/1.0 默认行为：在 HTTP/1.0 中，默认情况下，每个请求完成后连接都会关闭。这意味着对于每个新请求，客户端都需要建立一个新的连接。 HTTP/1.1 持久连...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/go/http%E5%8D%8F%E8%AE%AE%E6%96%AD%E5%BC%80%E6%97%B6%E6%9C%BA.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"http协议断开时机"}],["meta",{"property":"og:description","content":"http协议断开的取决因素 HTTP 连接断开的时机主要取决于 HTTP 协议的版本（如 HTTP/1.1 或 HTTP/2）以及特定的服务器和客户端配置。这里有几种常见的情况： HTTP/1.0 默认行为：在 HTTP/1.0 中，默认情况下，每个请求完成后连接都会关闭。这意味着对于每个新请求，客户端都需要建立一个新的连接。 HTTP/1.1 持久连..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"https"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:tag","content":"协议"}],["meta",{"property":"article:published_time","content":"2024-01-24T20:16:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"http协议断开时机\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-24T20:16:49.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"http协议断开的取决因素","slug":"http协议断开的取决因素","link":"#http协议断开的取决因素","children":[]},{"level":2,"title":"http协议版本选择的取决因素","slug":"http协议版本选择的取决因素","link":"#http协议版本选择的取决因素","children":[]},{"level":2,"title":"HTTP2协议","slug":"http2协议","link":"#http2协议","children":[]},{"level":2,"title":"使用Gin和Nginx提供http2协议的web服务","slug":"使用gin和nginx提供http2协议的web服务","link":"#使用gin和nginx提供http2协议的web服务","children":[{"level":3,"title":"Gin","slug":"gin","link":"#gin","children":[]},{"level":3,"title":"Nginx","slug":"nginx","link":"#nginx","children":[]},{"level":3,"title":"服务端关闭连接","slug":"服务端关闭连接","link":"#服务端关闭连接","children":[]},{"level":3,"title":"客户端主动关闭 HTTP 连接","slug":"客户端主动关闭-http-连接","link":"#客户端主动关闭-http-连接","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/go/http协议断开时机.md","excerpt":"<h2>http协议断开的取决因素</h2>\\n<p>HTTP 连接断开的时机主要取决于 HTTP 协议的版本（如 HTTP/1.1 或 HTTP/2）以及特定的服务器和客户端配置。这里有几种常见的情况：</p>\\n<ol>\\n<li>\\n<p><strong>HTTP/1.0 默认行为</strong>：在 HTTP/1.0 中，默认情况下，每个请求完成后连接都会关闭。这意味着对于每个新请求，客户端都需要建立一个新的连接。</p>\\n</li>\\n<li>\\n<p><strong>HTTP/1.1 持久连接</strong>：HTTP/1.1 引入了持久连接（也称为连接复用），在这种情况下，连接在发送和接收多个请求/响应后仍然保持打开状态。这样做可以减少建立和关闭连接的开销。除非显式使用 <code>Connection: close</code> 头部指示关闭，否则连接将保持开启。</p>\\n</li>\\n<li>\\n<p><strong>超时</strong>：无论是 HTTP/1.1 还是 HTTP/2，服务器和客户端通常都有一个超时设置。如果在指定的超时时间内没有数据传输，连接将自动关闭。</p>\\n</li>\\n<li>\\n<p><strong>服务器或客户端主动关闭</strong>：服务器或客户端可以随时通过发送适当的信号来主动关闭连接。</p>\\n</li>\\n<li>\\n<p><strong>错误或异常</strong>：在发生错误或异常情况（如网络故障、协议错误等）时，连接可能会被迫关闭。</p>\\n</li>\\n<li>\\n<p><strong>HTTP/2 的多路复用</strong>：HTTP/2 进一步优化了连接的使用，允许在单一连接上同时进行多个请求和响应的交换。即使多个请求同时进行，连接也会保持开启，直到客户端或服务器决定关闭或发生超时。</p>\\n</li>\\n</ol>\\n"}');export{u as comp,d as data};
