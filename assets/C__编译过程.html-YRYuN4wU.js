import{_ as e,o as a,c as n,e as t}from"./app-CinGCuEv.js";const i={},d=t(`<h3 id="预处理-预编译" tabindex="-1"><a class="header-anchor" href="#预处理-预编译"><span>预处理/预编译</span></a></h3><p>对目标代码进行文本处理和翻译，包括：</p><p>头部文件(<code>#include</code>) 条件编译指令(<code>#ifdef、#endif</code>等)、宏(<code>#define</code>) 删除注释 添加行号和文件名标识</p><p>例：</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;iostream&gt; //预编译处理
// #define DEBUG //预编译处理
using namespace std;

int main(){
  string name;
  cout &lt;&lt; &quot;Enter your name:&quot;;
  cin &gt;&gt; name;
  cout &lt;&lt; &quot;Hey!&quot; &lt;&lt; name &lt;&lt; &quot;Welcome to my blog\\n&quot;;
  #ifdef DEBUG //预编译处理
  cout &lt;&lt; name &lt;&lt; endl;
  #endif
  return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>预处理字符都是以#开头</p></blockquote><h3 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h3><p>编译将原文件<code>.cpp</code>编译为汇编语言，这一步主要做语法分析、检查语法是否错误、词法分析产生汇编文件。</p><h3 id="汇编" tabindex="-1"><a class="header-anchor" href="#汇编"><span>汇编</span></a></h3><p>讲编译完的文件翻译成机器码，每一条汇编几乎可以直接翻译成一条对应的机器指令，这一步无需语义分析和优化，生成的<code>.o</code>或<code>.obj</code>后缀的二进制对象文件。</p><h3 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h3><p>链接是将生成的一个或者多个中间的文件联合生成可执行文件。链接程序的各个目标文件和库文件<code>(.a)</code>，成为一个能被操作系统执行的可执行文件。</p><h2 id="g-相关命令" tabindex="-1"><a class="header-anchor" href="#g-相关命令"><span>g++相关命令</span></a></h2><p>Preprocessing - 由预处理器cpp完成，得到<code>.i</code>后缀的文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>g++ <span class="token parameter variable">-E</span> demo.cpp <span class="token parameter variable">-o</span> demo.i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Compilation - 由编译器ccplus完成，得到<code>.s</code>后缀的汇编文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>g++ <span class="token parameter variable">-S</span> demo.i <span class="token parameter variable">-o</span> demo.s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Assembly - 由汇编器as处理，得到<code>.o</code>的二进制目标文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>g++ -c demo.s -o demo.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Linking - 链接器ld来完成，将二进制文件链接后得到可执行文件<code>.out</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>g++ demo.o <span class="token parameter variable">-o</span> demo.out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21),s=[d];function l(c,o){return a(),n("div",null,s)}const p=e(i,[["render",l],["__file","C__编译过程.html.vue"]]),m=JSON.parse('{"path":"/posts/c/C__%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.html","title":"C/C++编译过程","lang":"zh-CN","frontmatter":{"title":"C/C++编译过程","toc":true,"keywords":"c/c++","tags":["c/c++"],"categories":["后端","c/c++"],"abbrlink":"e58902ff","date":"2021-02-03T13:01:16.000Z","description":"预处理/预编译 对目标代码进行文本处理和翻译，包括： 头部文件(#include) 条件编译指令(#ifdef、#endif等)、宏(#define) 删除注释 添加行号和文件名标识 例： 预处理字符都是以#开头 编译 编译将原文件.cpp编译为汇编语言，这一步主要做语法分析、检查语法是否错误、词法分析产生汇编文件。 汇编 讲编译完的文件翻译成机器码，...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/c/C__%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"C/C++编译过程"}],["meta",{"property":"og:description","content":"预处理/预编译 对目标代码进行文本处理和翻译，包括： 头部文件(#include) 条件编译指令(#ifdef、#endif等)、宏(#define) 删除注释 添加行号和文件名标识 例： 预处理字符都是以#开头 编译 编译将原文件.cpp编译为汇编语言，这一步主要做语法分析、检查语法是否错误、词法分析产生汇编文件。 汇编 讲编译完的文件翻译成机器码，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"c/c++"}],["meta",{"property":"article:published_time","content":"2021-02-03T13:01:16.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C/C++编译过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-03T13:01:16.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"预处理/预编译","slug":"预处理-预编译","link":"#预处理-预编译","children":[]},{"level":3,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":3,"title":"汇编","slug":"汇编","link":"#汇编","children":[]},{"level":3,"title":"链接","slug":"链接","link":"#链接","children":[]},{"level":2,"title":"g++相关命令","slug":"g-相关命令","link":"#g-相关命令","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/c/C++编译过程.md","excerpt":"<h3>预处理/预编译</h3>\\n<p>对目标代码进行文本处理和翻译，包括：</p>\\n<p>头部文件(<code>#include</code>)\\n条件编译指令(<code>#ifdef、#endif</code>等)、宏(<code>#define</code>)\\n删除注释\\n添加行号和文件名标识</p>\\n"}');export{p as comp,m as data};
