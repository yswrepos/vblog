import{_ as n,o as s,c as a,e}from"./app-CinGCuEv.js";const t={},o=e(`<p>在Go语言（又称Golang）中，初始化结构体的方式多样，以下是一些常用的方法：</p><ol><li><p>使用类型字面量：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> MyStruct <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Field1 <span class="token builtin">int</span>
    Field2 <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">// 初始化一个结构体实例，字段使用零值</span>
<span class="token keyword">var</span> s1 MyStruct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><ol start="2"><li><p>使用类型字面量并赋值：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 初始化一个结构体实例并提供字段值</span>
s2 <span class="token operator">:=</span> MyStruct<span class="token punctuation">{</span>Field1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> Field2<span class="token punctuation">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>new</code>关键字：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 使用new分配内存，返回指向结构体的指针，字段使用零值</span>
s3 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>&amp;</code>运算符：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 使用&amp;获取结构体实例的地址，可与类型字面量结合用于初始化字段</span>
s4 <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyStruct<span class="token punctuation">{</span>Field1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> Field2<span class="token punctuation">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用构造函数模式（非官方语言特性，但为一种通行的习惯用法）：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 定义一个构造函数</span>
<span class="token keyword">func</span> <span class="token function">NewMyStruct</span><span class="token punctuation">(</span>f1 <span class="token builtin">int</span><span class="token punctuation">,</span> f2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>MyStruct <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>MyStruct<span class="token punctuation">{</span>Field1<span class="token punctuation">:</span> f1<span class="token punctuation">,</span> Field2<span class="token punctuation">:</span> f2<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用构造函数初始化结构体</span>
s5 <span class="token operator">:=</span> <span class="token function">NewMyStruct</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用变量：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 声明一个结构体变量</span>
<span class="token keyword">var</span> myStruct MyStruct
<span class="token comment">// 分别初始化字段</span>
myStruct<span class="token punctuation">.</span>Field1 <span class="token operator">=</span> <span class="token number">10</span>
myStruct<span class="token punctuation">.</span>Field2 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用键值对初始化（当结构体字段很多时，可以只初始化部分字段）：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s6 <span class="token operator">:=</span> MyStruct<span class="token punctuation">{</span>
    Field1<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 只初始化Field1，Field2使用零值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这些方法可以根据不同的场景和需要进行选择。通常，在需要显式初始化字段值时，会选择使用类型字面量进行初始化；而当结构体的零值就是所需状态时，使用<code>new</code>或者直接声明变量的方式会更简洁。构造函数模式通常用在需要封装初始化过程或者有额外逻辑处理时。</p>`,4),p=[o];function l(i,c){return s(),a("div",null,p)}const d=n(t,[["render",l],["__file","Go结构体初始化的几种方式.html.vue"]]),r=JSON.parse('{"path":"/posts/go/Go%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html","title":"Go结构体初始化的几种方式","lang":"zh-CN","frontmatter":{"title":"Go结构体初始化的几种方式","date":"2023-12-14T19:17:32.000Z","tags":["go"],"categories":["go"],"description":"在Go语言（又称Golang）中，初始化结构体的方式多样，以下是一些常用的方法： 使用类型字面量： 使用类型字面量并赋值： 使用new关键字： 使用&运算符： 使用构造函数模式（非官方语言特性，但为一种通行的习惯用法）： 使用变量： 使用键值对初始化（当结构体字段很多时，可以只初始化部分字段）： 这些方法可以根据不同的场景和需要进行选择。通常，在需要显...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/go/Go%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"Go结构体初始化的几种方式"}],["meta",{"property":"og:description","content":"在Go语言（又称Golang）中，初始化结构体的方式多样，以下是一些常用的方法： 使用类型字面量： 使用类型字面量并赋值： 使用new关键字： 使用&运算符： 使用构造函数模式（非官方语言特性，但为一种通行的习惯用法）： 使用变量： 使用键值对初始化（当结构体字段很多时，可以只初始化部分字段）： 这些方法可以根据不同的场景和需要进行选择。通常，在需要显..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-12-14T19:17:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go结构体初始化的几种方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-14T19:17:32.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/go/Go结构体初始化的几种方式.md","excerpt":"<p>在Go语言（又称Golang）中，初始化结构体的方式多样，以下是一些常用的方法：</p>\\n<ol>\\n<li>\\n<p>使用类型字面量：</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">type</span> MyStruct <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n    Field1 <span class=\\"token builtin\\">int</span>\\n    Field2 <span class=\\"token builtin\\">string</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 初始化一个结构体实例，字段使用零值</span>\\n<span class=\\"token keyword\\">var</span> s1 MyStruct\\n</code></pre></div></li>\\n</ol>\\n"}');export{d as comp,r as data};
