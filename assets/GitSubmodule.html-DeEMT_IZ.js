import{_ as e,o as t,c as i,e as a}from"./app-CinGCuEv.js";const n={},l=a(`<h2 id="导读" tabindex="-1"><a class="header-anchor" href="#导读"><span>导读</span></a></h2><blockquote><p>有时候我们需要在一个项目中依赖一个更新中的公共库，或者在一个大型仓库中给不同的开发人员分配各自独立的仓库，这个时候Git的子模块就很有用了。</p></blockquote><h2 id="添加一个子模块" tabindex="-1"><a class="header-anchor" href="#添加一个子模块"><span>添加一个子模块</span></a></h2><p>我们假设你已经创建了一个远端仓库<code>greet.git</code> 那么可以添加这个仓库到主项目，使之成为一个子模块：</p><div class="language-git line-numbers-mode" data-ext="git" data-title="git"><pre class="language-git"><code>git submodule add &lt;remote_url&gt; &lt;path&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加子模块并切换分支：</p><div class="language-git line-numbers-mode" data-ext="git" data-title="git"><pre class="language-git"><code>git submodule add -b &lt;branch&gt; &lt;url&gt; &lt;path&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>// 添加远程greet仓库到当前项目为greet子模块
<span class="token function">git</span> submodule <span class="token function">add</span> https://github.com/<span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>/greet.git greet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时在主项目中会多处一个<code>.gitmodules</code>的文件记录子模块的信息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[submodule &quot;greet&quot;]
	path = greet
	url = https://github.com/&lt;username&gt;/greet.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化和拉取子模块更新" tabindex="-1"><a class="header-anchor" href="#初始化和拉取子模块更新"><span>初始化和拉取子模块更新</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>git submodule update --init --recursive
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;!-- 拉取主repo和子repo --&gt;
git clone main --recursive
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>git clone &lt;main_repository&gt;
git submodule init
git submodule update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="批量操作所有子模块" tabindex="-1"><a class="header-anchor" href="#批量操作所有子模块"><span>批量操作所有子模块</span></a></h2><p>可以使用<code>git submodule foreach [--recursive] &lt;git command&gt;</code>对所有子模块进行批量操作, 如</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>git submodule foreach git pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),d=[l];function s(r,o){return t(),i("div",null,d)}const u=e(n,[["render",s],["__file","GitSubmodule.html.vue"]]),g=JSON.parse('{"path":"/posts/git/GitSubmodule.html","title":"Git子模块简单使用","lang":"zh-CN","frontmatter":{"title":"Git子模块简单使用","toc":true,"keywords":"git,github","tags":["git","github"],"categories":["开发工具"],"abbrlink":"8e690a6a","date":"2020-12-17T13:01:16.000Z","description":"导读 有时候我们需要在一个项目中依赖一个更新中的公共库，或者在一个大型仓库中给不同的开发人员分配各自独立的仓库，这个时候Git的子模块就很有用了。 添加一个子模块 我们假设你已经创建了一个远端仓库greet.git 那么可以添加这个仓库到主项目，使之成为一个子模块： 添加子模块并切换分支： 举例： 此时在主项目中会多处一个.gitmodules的文件记...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/git/GitSubmodule.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"Git子模块简单使用"}],["meta",{"property":"og:description","content":"导读 有时候我们需要在一个项目中依赖一个更新中的公共库，或者在一个大型仓库中给不同的开发人员分配各自独立的仓库，这个时候Git的子模块就很有用了。 添加一个子模块 我们假设你已经创建了一个远端仓库greet.git 那么可以添加这个仓库到主项目，使之成为一个子模块： 添加子模块并切换分支： 举例： 此时在主项目中会多处一个.gitmodules的文件记..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:tag","content":"github"}],["meta",{"property":"article:published_time","content":"2020-12-17T13:01:16.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git子模块简单使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-17T13:01:16.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"导读","slug":"导读","link":"#导读","children":[]},{"level":2,"title":"添加一个子模块","slug":"添加一个子模块","link":"#添加一个子模块","children":[]},{"level":2,"title":"初始化和拉取子模块更新","slug":"初始化和拉取子模块更新","link":"#初始化和拉取子模块更新","children":[]},{"level":2,"title":"批量操作所有子模块","slug":"批量操作所有子模块","link":"#批量操作所有子模块","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/git/GitSubmodule.md","excerpt":"<h2>导读</h2>\\n<blockquote>\\n<p>有时候我们需要在一个项目中依赖一个更新中的公共库，或者在一个大型仓库中给不同的开发人员分配各自独立的仓库，这个时候Git的子模块就很有用了。</p>\\n</blockquote>\\n<h2>添加一个子模块</h2>\\n<p>我们假设你已经创建了一个远端仓库<code>greet.git</code>\\n那么可以添加这个仓库到主项目，使之成为一个子模块：</p>\\n<div class=\\"language-git\\" data-ext=\\"git\\" data-title=\\"git\\"><pre class=\\"language-git\\"><code>git submodule add &lt;remote_url&gt; &lt;path&gt; \\n</code></pre></div>"}');export{u as comp,g as data};
