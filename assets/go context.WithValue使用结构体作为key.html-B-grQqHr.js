import{_ as t,o as e,c as o,e as l}from"./app-BLeSCfhf.js";const i={},c=l("<p>在 Go 语言中，使用一个空的结构体（如 <code>type filePathKey struct{}</code>）作为 <code>context.WithValue</code> 的键是一种常见的做法，主要有以下几个原因：</p><ol><li><p><strong>唯一性</strong>:</p><ul><li>使用自定义的空结构体作为键可以确保键的唯一性。由于这个类型是私有的（即仅在定义它的包内可见），其他包不能创建同类型的键，从而避免了键的冲突。</li></ul></li><li><p><strong>无内存开销</strong>:</p><ul><li>空的结构体在 Go 中不占用任何内存空间。这使得使用空结构体作为键成为一种高效的选择，特别是在性能敏感的应用中。</li></ul></li><li><p><strong>类型安全</strong>:</p><ul><li>使用自定义类型作为键比使用基本类型（如字符串或整数）更加类型安全。如果键是一个常见的基本类型，就有可能意外地使用了错误的值或与其他上下文值冲突。自定义类型减少了这种风险。</li></ul></li><li><p><strong>避免魔法值</strong>:</p><ul><li>使用字符串或其他基本类型作为键时，可能需要在多个地方重复使用相同的字符串或值（即“魔法值”），这增加了出错的可能性和维护成本。自定义结构体作为键避免了这个问题。</li></ul></li><li><p><strong>清晰的意图</strong>:</p><ul><li>自定义结构体作为键清楚地表明了其用途仅限于作为上下文的键，这对于代码的可读性和维护性都是有益的。</li></ul></li></ol><p>综上所述，使用空结构体作为 <code>context</code> 包中 <code>WithValue</code> 函数的键是一种确保唯一性、提高性能、增强类型安全和代码清晰度的有效方法。</p>",3),s=[c];function n(a,r){return e(),o("div",null,s)}const u=t(i,[["render",n],["__file","go context.WithValue使用结构体作为key.html.vue"]]),_=JSON.parse('{"path":"/posts/go/go%20context.WithValue%E4%BD%BF%E7%94%A8%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%9C%E4%B8%BAkey.html","title":"go context.WithValue使用结构体作为key","lang":"zh-CN","frontmatter":{"layout":"posts","title":"go context.WithValue使用结构体作为key","date":"2024-01-09T14:47:49.000Z","tags":["protoc"]},"headers":[],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/go/go context.WithValue使用结构体作为key.md","excerpt":"<p>在 Go 语言中，使用一个空的结构体（如 <code>type filePathKey struct{}</code>）作为 <code>context.WithValue</code> 的键是一种常见的做法，主要有以下几个原因：</p>\\n"}');export{u as comp,_ as data};
