import{_ as p,r as o,o as l,c,a as s,b as n,d as e,e as t}from"./app-BLeSCfhf.js";const r="/vblog/static/img/posts/xss-demo1.gif",i="/vblog/static/img/posts/xss-demo2.gif",u={},d=t('<h2 id="导读" tabindex="-1"><a class="header-anchor" href="#导读"><span>导读</span></a></h2><blockquote><p>XSS 攻击是非常常见的网页攻击了，网上有很多资料，但我始终想写一个简单的总结。</p></blockquote><h2 id="何为-xss" tabindex="-1"><a class="header-anchor" href="#何为-xss"><span>何为 XSS?</span></a></h2><p>XSS(Cross site script)指利用浏览器的特性，像指定网页提交特殊字符造成浏览器解析运行的一种攻击手段。XSS 有几种，个人觉得记这些意义不大，因此这里不再赘述，有兴趣的朋友可以在网上搜一下。</p><h2 id="如何产生-xss" tabindex="-1"><a class="header-anchor" href="#如何产生-xss"><span>如何产生 XSS</span></a></h2><p>XSS 攻击主要来自于用户的输入，如果你的站点存在着 XSS 漏洞，那么用户就可以进行 XSS 攻击，通过运行脚本代码，用户可以获取譬如 Cookie 等较为敏感的信息。</p><h2 id="一个-xss-攻击的例子" tabindex="-1"><a class="header-anchor" href="#一个-xss-攻击的例子"><span>一个 XSS 攻击的例子</span></a></h2>',7),k={href:"https://learnku.com/",target:"_blank",rel:"noopener noreferrer"},m=t('<ul><li><strong>使用 Chrome devtools 提交数据 刷新页面发生 XSS 攻击</strong></li></ul><p><img src="'+r+'" alt="xss-demo-1"></p><ul><li><strong>数据库已经有了特殊字符的数据</strong></li></ul><p><img src="'+i+`" alt="xss-demo-2"></p><p>Chrome Devtools 示例攻击提交</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://xss.test/demo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;upgrade-insecure-requests&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span>
        <span class="token string">&quot;_token=AGL1jSjzX152b71UEAQiTzwbYdRGYnECRI17WRiG&amp;title=dangerous%20content+&amp;category_id=2&amp;body=%3Cscript%3Ealert%28%27%E5%AD%98%E5%9C%A8%20XSS%20%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81%EF%BC%81%27%29%3C%2Fscript%3E&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;cors&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监测xss漏洞" tabindex="-1"><a class="header-anchor" href="#监测xss漏洞"><span>监测XSS漏洞</span></a></h2>`,7),g={href:"https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/Arachni/arachni",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/mozilla/http-observatory/",target:"_blank",rel:"noopener noreferrer"},S=t(`<h2 id="防范-xss-攻击" tabindex="-1"><a class="header-anchor" href="#防范-xss-攻击"><span>防范 XSS 攻击</span></a></h2><p>以上的例子说明，虽然各种开源的编辑器已经做了 XSS 过滤，但依然发生 XSS 攻击，这是因为后端和网页展示没有对 XSS 做过滤，因此需要前后端都对特殊字符进行过滤，以确保没有 XSS 漏洞。 XSS 攻击的本质是浏览器解析了特殊字符的脚本，因此我们只需要在用户输入、页面展示、参数传输这些地方过滤这些特殊字符就可以了：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>字符	转义后的字符
<span class="token operator">&amp;</span>	 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span>
<span class="token operator">&lt;</span>	 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>
<span class="token operator">&gt;</span>	 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
&quot;	 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>
&#39;	 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span><span class="token comment">#x27;</span>
/	 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span><span class="token comment">#x2F;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时JS中应注意使用<code>innerHTML</code>,<code>outerHTML</code>，如果使用他们渲染，将有可能出现XSS漏洞。 如果使用了React、Vue等框架，使用<code>v-html</code>,<code>dangerouslySetInnerHTML</code>也应小心谨慎。</p><ul><li><strong>使用JQuery</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div/&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>prototype.js的escabeHTML()</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&amp;amp;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&amp;lt;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&amp;gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Underscope中的escape</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// List of HTML entities for escaping.</span>
<span class="token keyword">var</span> htmlEscapes <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;&amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;amp;&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;&lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;lt;&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;&gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;&quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;quot;&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;&#39;&quot;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;#x27;&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;/&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;#x2F;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Regex containing the keys listed immediately above.</span>
<span class="token keyword">var</span> htmlEscaper <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&amp;&lt;&gt;&quot;&#39;\\/]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

<span class="token comment">// Escape a string for HTML interpolation.</span>
_<span class="token punctuation">.</span><span class="token function-variable function">escape</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>htmlEscaper<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> htmlEscapes<span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// examples</span>
_<span class="token punctuation">.</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token string">&#39;Curly, Larry &amp; Moe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; &quot;Curly, Larry &amp;amp; Moe&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其它安全措施" tabindex="-1"><a class="header-anchor" href="#其它安全措施"><span>其它安全措施</span></a></h2>`,11),b=s("strong",null,"使用Content Security Policy",-1),x={href:"https://www.ruanyifeng.com/blog/2016/09/csp.html",target:"_blank",rel:"noopener noreferrer"},f=s("li",null,[s("strong",null,"设置Cookie为HTTP-only"),n(" 这可能防止部分信息泄漏")],-1),y=s("h2",{id:"参考",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考"},[s("span",null,"参考")])],-1),_={href:"https://coderwall.com/p/ostduq/escape-html-with-javascript",target:"_blank",rel:"noopener noreferrer"},X={href:"https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20",target:"_blank",rel:"noopener noreferrer"};function q(w,E){const a=o("ExternalLinkIcon");return l(),c("div",null,[d,s("p",null,[n("这里我引用"),s("a",k,[n("LearnKu"),e(a)]),n("的两张图来说明 XSS 攻击事如何发生的 在原文中，作者使用了 所见即所得 编辑器，指出虽然所见即所得编辑器过滤了特殊的字符，但依然可能发生 XSS 攻击，原因在于非法用户可能通过其它手段提交数据：")]),m,s("p",null,[n("可以使用"),s("a",g,[n("XSS Polylot"),e(a)]),n("监测XSS漏洞，文章进行了说明并有很多demo. 也可以使用一些第三方检测工具"),s("a",v,[n("Arachni"),e(a)]),n("、"),s("a",h,[n("http-observatory"),e(a)])]),S,s("ul",null,[s("li",null,[b,s("a",x,[n("CSP"),e(a)]),n("是一个浏览器的特性，能从根本上解决XSS漏洞问题")]),f]),y,s("blockquote",null,[s("p",null,[s("a",_,[n("Escape HTML with Javascript"),e(a)]),s("a",X,[n("URL encoding the space character + or %20"),e(a)])])])])}const C=p(u,[["render",q],["__file","XSS简述.html.vue"]]),L=JSON.parse('{"path":"/posts/web%E5%AE%89%E5%85%A8/XSS%E7%AE%80%E8%BF%B0.html","title":"XSS攻击介绍","lang":"zh-CN","frontmatter":{"title":"XSS攻击介绍","toc":true,"keywords":"xss,前端xss攻击,防范xss攻击","tags":["web安全","网络安全"],"categories":["web安全"],"abbrlink":"ec76a593","date":"2021-03-01T23:01:26.000Z"},"headers":[{"level":2,"title":"导读","slug":"导读","link":"#导读","children":[]},{"level":2,"title":"何为 XSS?","slug":"何为-xss","link":"#何为-xss","children":[]},{"level":2,"title":"如何产生 XSS","slug":"如何产生-xss","link":"#如何产生-xss","children":[]},{"level":2,"title":"一个 XSS 攻击的例子","slug":"一个-xss-攻击的例子","link":"#一个-xss-攻击的例子","children":[]},{"level":2,"title":"监测XSS漏洞","slug":"监测xss漏洞","link":"#监测xss漏洞","children":[]},{"level":2,"title":"防范 XSS 攻击","slug":"防范-xss-攻击","link":"#防范-xss-攻击","children":[]},{"level":2,"title":"其它安全措施","slug":"其它安全措施","link":"#其它安全措施","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/web安全/XSS简述.md","excerpt":"<h2>导读</h2>\\n<blockquote>\\n<p>XSS 攻击是非常常见的网页攻击了，网上有很多资料，但我始终想写一个简单的总结。</p>\\n</blockquote>\\n<h2>何为 XSS?</h2>\\n<p>XSS(Cross site script)指利用浏览器的特性，像指定网页提交特殊字符造成浏览器解析运行的一种攻击手段。XSS 有几种，个人觉得记这些意义不大，因此这里不再赘述，有兴趣的朋友可以在网上搜一下。</p>\\n<h2>如何产生 XSS</h2>\\n<p>XSS 攻击主要来自于用户的输入，如果你的站点存在着 XSS 漏洞，那么用户就可以进行 XSS 攻击，通过运行脚本代码，用户可以获取譬如 Cookie 等较为敏感的信息。</p>\\n<h2>一个 XSS 攻击的例子</h2>\\n<p>这里我引用<a href=\\"https://learnku.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LearnKu</a>的两张图来说明 XSS 攻击事如何发生的\\n在原文中，作者使用了 所见即所得 编辑器，指出虽然所见即所得编辑器过滤了特殊的字符，但依然可能发生 XSS 攻击，原因在于非法用户可能通过其它手段提交数据：</p>\\n<ul>\\n<li><strong>使用 Chrome devtools 提交数据 刷新页面发生 XSS 攻击</strong></li>\\n</ul>\\n<p><img src=\\"/static/img/posts/xss-demo1.gif\\" alt=\\"xss-demo-1\\"></p>\\n"}');export{C as comp,L as data};
