import{_ as i,r as l,o as r,c as d,a as e,b as a,d as s,e as t}from"./app-CinGCuEv.js";const c={},o=e("h2",{id:"导读",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#导读"},[e("span",null,"导读")])],-1),p=e("blockquote",null,[e("p",null,"网上关于自签证书的博客资料可以说是很多了，但其中的很多写的都是含糊不清的，此篇文章将会尽量清晰的描述自签名证书和创建CA为自己的服务器颁发证书。")],-1),u=e("h2",{id:"什么是数字证书和数字签名",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是数字证书和数字签名"},[e("span",null,"什么是数字证书和数字签名")])],-1),b={href:"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="创建ca颁发数字证书" tabindex="-1"><a class="header-anchor" href="#创建ca颁发数字证书"><span>创建CA颁发数字证书</span></a></h2><p>要给我们的服务器颁发一个<code>数字证书</code>，我们首先需要自己创建一个证书颁发机构 <code>CA</code> ，通常情况下，这个CA是真实的颁发机构，我们使用Chrome访问的<code>https</code>网页时会出现一把锁，这些都是真实的CA颁发的，因此浏览器对此是信任的。</p><p><strong>为CA生成一个长度为1024的私钥</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>openssl genrsa <span class="token operator">-</span>out ca<span class="token punctuation">.</span>key <span class="token number">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>生成CA机构自己的证书申请文件(.csr)</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>openssl req <span class="token operator">-</span>new <span class="token operator">-</span>key ca<span class="token punctuation">.</span>key <span class="token operator">-</span>out ca<span class="token punctuation">.</span>csr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用私钥和证书申请文件为CA生成一个自己签名的证书，俗称自签名证书，这里也叫根证书</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>openssl x509 <span class="token operator">-</span>req <span class="token operator">-</span>in ca<span class="token punctuation">.</span>csr <span class="token operator">-</span>signkey ca<span class="token punctuation">.</span>key <span class="token operator">-</span>out ca<span class="token punctuation">.</span>crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),m=e("code",null,"req",-1),h=e("code",null,"openssl",-1),g=e("code",null,"openssl req --help",-1),f=e("code",null,"x509",-1),k={href:"https://baike.baidu.com/item/ASN.1/498523",target:"_blank",rel:"noopener noreferrer"},x={href:"https://baike.baidu.com/item/X.509/2817050",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"ca.crt",-1),y=t(`<h3 id="生成服务器私钥" tabindex="-1"><a class="header-anchor" href="#生成服务器私钥"><span>生成服务器私钥</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>openssl genrsa <span class="token parameter variable">-out</span> server.key <span class="token number">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="生成服务器证书申请文件" tabindex="-1"><a class="header-anchor" href="#生成服务器证书申请文件"><span>生成服务器证书申请文件</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server.key <span class="token parameter variable">-out</span> server.csr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用ca证书签名服务器证书文件" tabindex="-1"><a class="header-anchor" href="#使用ca证书签名服务器证书文件"><span>使用CA证书签名服务器证书文件</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-out</span> server.crt <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="自签名证书" tabindex="-1"><a class="header-anchor" href="#自签名证书"><span>自签名证书</span></a></h2><p>自签名证书顾名思义无需CA参与，自己给自己颁发一个证书，流程相对简单</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>openssl genrsa <span class="token parameter variable">-out</span> server.key <span class="token number">1024</span>
openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server.key <span class="token parameter variable">-out</span> server.csr
openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-signkey</span> server.key <span class="token parameter variable">-out</span> ca.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以省略生成密钥过程，让系统自动生成</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>openssl req -x509 -nodes -days 365 -newkey rsa:1024 \\
-keyout /tmp/server.key -out /tmp/server.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>-nodes</code> 选项禁止加密私钥文件。 <code>-days</code> 指定过期时间</p></blockquote><p>然后输入一些信息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []: 这个是你的域名或ip
Email Address []:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外也可以只省略证书请求文件，让系统在签署过程中在内存中自动创建证书请求文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>openssl req -new -x509 -key pri.pem -out server.crt -days 365
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样一个证书就申请好了。</p><h2 id="其它命令" tabindex="-1"><a class="header-anchor" href="#其它命令"><span>其它命令</span></a></h2><h3 id="查看证书申请文件" tabindex="-1"><a class="header-anchor" href="#查看证书申请文件"><span>查看证书申请文件</span></a></h3><p>一个服务器申请文件可通过<code>openssl req -in req1.csr -noout -text</code>来输出文件头部分，如下:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Certificate Request:
    Data:
        Version: <span class="token number">0</span> <span class="token punctuation">(</span>0x0<span class="token punctuation">)</span>
        Subject: <span class="token assign-left variable">C</span><span class="token operator">=</span>AU, <span class="token assign-left variable">ST</span><span class="token operator">=</span>Some-State, <span class="token assign-left variable">O</span><span class="token operator">=</span>Internet Widgits Pty Ltd //个人信息
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption  //使用的公钥算法
                Public-Key: <span class="token punctuation">(</span><span class="token number">2048</span> bit<span class="token punctuation">)</span>
                Modulus:
                    00:cf:a2:a6:65:ab:e0:38:73:25:8c:d6:33:94:ba:
                    d9:4f:6c:93:28:bc:05:81:b9:4c:07:02:93:e2:07:
                    c3:0f:57:92:ad:16:e9:57:6f:05:93:44:66:5b:2a:
                    1a:54:5f:80:96:3f:b0:5a:b6:fe:70:fb:a1:4d:f5:
                    cf:d3:fb:10:ec:8a:1c:3b:53:6c:dd:49:a8:d7:61:
                    <span class="token number">52</span>:b9:9d:06:e3:94:7a:6f:73:4d:f6:7d:7b:ad:55:
                    bf:85:28:0d:8c:dc:50:72:5d:bb:9d:f8:ed:2a:18:
                    <span class="token number">82</span>:f2:03:b6:00:61:7f:ad:ea:36:57:00:8e:77:df:
                    06:00:97:d3:fe:09:35:a6:3d:0d:47:71:24:03:26:
                    3b:b6:37:f3:24:1d:d9:2f:c7:d8:7e:d2:db:08:b2:
                    <span class="token number">49</span>:35:6d:4c:d2:d6:57:0d:e8:6f:4c:ae:5e:50:1c:
                    f4:bf:42:df:f1:fb:19:88:eb:0f:05:ad:69:32:da:
                    <span class="token number">89</span>:2e:ef:61:e2:95:58:11:27:ba:1c:9f:f4:7f:83:
                    03:de:2f:a6:73:2b:18:b5:46:82:c5:8b:85:19:c0:
                    f4:25:d4:d8:ad:b6:81:9f:e1:b2:6d:ab:eb:ef:ba:
                    2d:f3:06:fa:65:54:8c:14:81:65:4b:d2:48:b4:32:
                    fd:ae:f7:71:6d:8e:dc:9d:a6:87:47:ee:a7:11:3f:
                    ab:a9
                Exponent: <span class="token number">65537</span> <span class="token punctuation">(</span>0x10001<span class="token punctuation">)</span>
        Attributes:
            a0:00
    Signature Algorithm: sha256WithRSAEncryption   //请求文件使用的数字签名算法
         <span class="token number">95</span>:68:5f:6a:6e:f0:b6:7c:bc:97:c7:c5:ce:76:c0:a8:3f:2a:
         07:61:5f:75:ee:f0:c3:73:51:c9:b9:d7:59:68:67:06:ca:e5:
         a8:d3:68:19:32:27:ff:18:5f:4b:eb:02:6f:7c:f6:85:db:76:
         <span class="token number">36</span>:56:90:3f:b6:f9:45:4a:1a:4c:74:a9:28:b1:f9:e9:f2:af:
         2e:4f:d6:38:d5:72:b0:ba:11:36:92:55:9c:a3:48:61:6f:66:
         <span class="token number">73</span>:7b:f6:35:91:cf:8a:23:aa:e1:e1:fd:ed:b1:ea:78:6c:0d:
         1b:bf:6c:19:4c:a7:1c:dc:09:bb:a5:3f:2f:b2:aa:77:cb:d5:
         2b:e4:57:bc:14:14:7d:ed:ec:a3:d5:b4:50:93:d3:b0:3a:07:
         <span class="token number">49</span>:0b:fa:e7:42:b8:a6:bf:39:ae:bf:c6:66:37:f3:40:2b:59:
         <span class="token number">75</span>:ce:c4:08:f4:b1:18:2c:48:17:a8:2c:6d:41:1e:5a:a8:86:
         <span class="token number">34</span>:53:a7:ff:fd:e0:95:64:b7:69:9b:86:b7:66:4d:db:74:dc:
         c6:52:18:e9:dc:2a:b0:b1:f9:33:10:a8:d6:0d:1a:ef:0c:ac:
         1b:fc:c7:61:30:ab:80:01:62:21:06:f1:7b:a7:0c:7c:bf:20:
         e8:d2:b6:24:a3:9a:93:ae:94:02:cf:06:23:74:1f:54:ec:16:
         a7:7e:44:b4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出subject部分</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>openssl req -in req.csr -subject -noout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>-pubkey</code>输出请求文件中的公钥</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>openssl req -in req1.csr -pubkey -noout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是从申请证书请求时所提供的私钥中提取出公钥，那么以下输出的公钥和上面相同。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> openssl rsa -in server.key -pubout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="指定证书请求文件中的签名算法" tabindex="-1"><a class="header-anchor" href="#指定证书请求文件中的签名算法"><span>指定证书请求文件中的签名算法</span></a></h3><p>如果不指定此项，默认为<code>sha256</code>，也支持其它很多签名算法，可以通过使用<code>openssl dgst --help</code>查看</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>openssl req -new -key server.key -out server.csr -md5
openssl req -in server.csr -noout -text | grep Algo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证请求文件的数字签名-验证文件是否被篡改" tabindex="-1"><a class="header-anchor" href="#验证请求文件的数字签名-验证文件是否被篡改"><span>验证请求文件的数字签名（验证文件是否被篡改）</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>openssl req -verify -in server.csr //未被篡改会打印verify OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,32);function A(C,S){const n=l("ExternalLinkIcon");return r(),d("div",null,[o,p,u,e("p",null,[a("对于这个问题，阮一峰有一篇 "),e("strong",null,[e("a",b,[a("文章"),s(n)])]),a(" 比较形象的解释了这个问题，此处，我们主要记录如何生成。")]),v,e("blockquote",null,[e("p",null,[a("第二个命令中，"),m,a("是一个"),h,a("的一个关于证书请求文件的子命令，可以运行"),g,a("查看帮助。最后一个命令的"),f,a("是在 "),e("strong",null,[e("a",k,[a("ASN.1"),s(n)])]),a(" 中定义的 "),e("strong",null,[e("a",x,[a("一种格式"),s(n)])]),a("，X.509证书里含有公钥、身份信息(比如网络主机名，组织的名称或个体名称等)和签名信息(可以是证书签发机构CA的签名，也可以是自签名)，证书的拥有者就可以用证书及相应的私钥来创建安全的通信，对文档进行数字签名。 在nginx使用https，nginx配置好后只需将"),_,a("颁发给客户端电脑，客户端电脑信任后，浏览器浏览即可看到一把绿锁状态。")])]),y])}const q=i(c,[["render",A],["__file","使用OpensSSL自签名证书.html.vue"]]),w=JSON.parse('{"path":"/posts/web%E5%AE%89%E5%85%A8/%E4%BD%BF%E7%94%A8OpensSSL%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6.html","title":"使用OpenSSL自签名证书","lang":"zh-CN","frontmatter":{"title":"使用OpenSSL自签名证书","toc":true,"keywords":"openssl,https,ssl/tsl,自签名,证书,数字证书,cert,csr,crt,pem","tags":["web安全","密码学"],"categories":["web安全"],"abbrlink":"8e14ac7c","date":"2021-03-17T13:01:21.000Z","description":"导读 网上关于自签证书的博客资料可以说是很多了，但其中的很多写的都是含糊不清的，此篇文章将会尽量清晰的描述自签名证书和创建CA为自己的服务器颁发证书。 什么是数字证书和数字签名 对于这个问题，阮一峰有一篇 文章 比较形象的解释了这个问题，此处，我们主要记录如何生成。 创建CA颁发数字证书 要给我们的服务器颁发一个数字证书，我们首先需要自己创建一个证书颁...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/web%E5%AE%89%E5%85%A8/%E4%BD%BF%E7%94%A8OpensSSL%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"使用OpenSSL自签名证书"}],["meta",{"property":"og:description","content":"导读 网上关于自签证书的博客资料可以说是很多了，但其中的很多写的都是含糊不清的，此篇文章将会尽量清晰的描述自签名证书和创建CA为自己的服务器颁发证书。 什么是数字证书和数字签名 对于这个问题，阮一峰有一篇 文章 比较形象的解释了这个问题，此处，我们主要记录如何生成。 创建CA颁发数字证书 要给我们的服务器颁发一个数字证书，我们首先需要自己创建一个证书颁..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"web安全"}],["meta",{"property":"article:tag","content":"密码学"}],["meta",{"property":"article:published_time","content":"2021-03-17T13:01:21.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用OpenSSL自签名证书\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-17T13:01:21.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"导读","slug":"导读","link":"#导读","children":[]},{"level":2,"title":"什么是数字证书和数字签名","slug":"什么是数字证书和数字签名","link":"#什么是数字证书和数字签名","children":[]},{"level":2,"title":"创建CA颁发数字证书","slug":"创建ca颁发数字证书","link":"#创建ca颁发数字证书","children":[{"level":3,"title":"生成服务器私钥","slug":"生成服务器私钥","link":"#生成服务器私钥","children":[]},{"level":3,"title":"生成服务器证书申请文件","slug":"生成服务器证书申请文件","link":"#生成服务器证书申请文件","children":[]},{"level":3,"title":"使用CA证书签名服务器证书文件","slug":"使用ca证书签名服务器证书文件","link":"#使用ca证书签名服务器证书文件","children":[]}]},{"level":2,"title":"自签名证书","slug":"自签名证书","link":"#自签名证书","children":[]},{"level":2,"title":"其它命令","slug":"其它命令","link":"#其它命令","children":[{"level":3,"title":"查看证书申请文件","slug":"查看证书申请文件","link":"#查看证书申请文件","children":[]},{"level":3,"title":"指定证书请求文件中的签名算法","slug":"指定证书请求文件中的签名算法","link":"#指定证书请求文件中的签名算法","children":[]},{"level":3,"title":"验证请求文件的数字签名（验证文件是否被篡改）","slug":"验证请求文件的数字签名-验证文件是否被篡改","link":"#验证请求文件的数字签名-验证文件是否被篡改","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/web安全/使用OpensSSL自签名证书.md","excerpt":"<h2>导读</h2>\\n<blockquote>\\n<p>网上关于自签证书的博客资料可以说是很多了，但其中的很多写的都是含糊不清的，此篇文章将会尽量清晰的描述自签名证书和创建CA为自己的服务器颁发证书。</p>\\n</blockquote>\\n<h2>什么是数字证书和数字签名</h2>\\n<p>对于这个问题，阮一峰有一篇 <strong><a href=\\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">文章</a></strong> 比较形象的解释了这个问题，此处，我们主要记录如何生成。</p>\\n<h2>创建CA颁发数字证书</h2>\\n<p>要给我们的服务器颁发一个<code>数字证书</code>，我们首先需要自己创建一个证书颁发机构 <code>CA</code> ，通常情况下，这个CA是真实的颁发机构，我们使用Chrome访问的<code>https</code>网页时会出现一把锁，这些都是真实的CA颁发的，因此浏览器对此是信任的。</p>\\n<p><strong>为CA生成一个长度为1024的私钥</strong></p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code>openssl genrsa <span class=\\"token operator\\">-</span>out ca<span class=\\"token punctuation\\">.</span>key <span class=\\"token number\\">1024</span>\\n</code></pre></div>"}');export{q as comp,w as data};
