import{_ as n,o as s,c as a,e}from"./app-Du_kiChf.js";const t={},p=e(`<h2 id="内存的虚拟地址" tabindex="-1"><a class="header-anchor" href="#内存的虚拟地址"><span>内存的虚拟地址</span></a></h2><p>在现代计算机系统中，虚拟地址是指操作系统为程序提供的地址空间。</p><ul><li>这种地址空间是由操作系统和CPU的**内存管理单元（Memory Management Unit, MMU）**共同管理的，它与物理内存（RAM）中的实际地址是分开的。</li><li>虚拟地址为每个程序提供了一种看似连续且独立的内存空间，这使得每个程序都以为自己独占了整个系统的内存。</li></ul><h2 id="页" tabindex="-1"><a class="header-anchor" href="#页"><span>“页”</span></a></h2><p>在虚拟内存系统中，内存是以“页”为基本单元构成的。页是内存和存储设备之间交换数据的固定长度块，通常大小是4KB或更大（这取决于操作系统和硬件架构）。</p><p>操作系统通过“页表”来管理虚拟地址到物理地址的映射关系。</p><h2 id="虚拟地址和页的作用" tabindex="-1"><a class="header-anchor" href="#虚拟地址和页的作用"><span>虚拟地址和页的作用</span></a></h2><ol><li><p><strong>内存管理：</strong> 页使得操作系统可以更高效地管理内存。<strong>操作系统可以将不同的虚拟页映射到物理内存中的任何位置，<strong>甚至可以将它们映射到硬盘上的</strong>交换空间（swap space）</strong>，从而实现虚拟内存。</p></li><li><p><strong>进程隔离：</strong> 每个进程都有自己的虚拟地址空间，其中的地址被映射到物理内存的不同部分。这<strong>保证了一个进程无法直接访问或修改另一个进程的数据</strong>，从而提高了系统的安全性和稳定性。</p></li><li><p><strong>按需分配：</strong> 操作系统可以根据需要动态地加载和卸载页面。例如，<strong>当程序访问某个尚未加载的内存区域时，操作系统会加载相应的页到物理内存</strong>。同样，<strong>当内存紧张时，操作系统可以将不常用的页移动到硬盘上的交换空间。</strong></p></li></ol><h2 id="虚拟地址和页的总结" tabindex="-1"><a class="header-anchor" href="#虚拟地址和页的总结"><span>虚拟地址和页的总结</span></a></h2><p>虚拟地址是操作系统为程序提供的一种抽象的内存地址，它通过页表映射到物理内存地址。内存的最小单元是“页”，这是操作系统管理内存的基本方式，它允许灵活的内存分配、安全的进程隔离，以及有效的内存使用。虚拟内存系统的这种设计极大地提高了现代计算机系统的效率和灵活性。</p><h2 id="文件读写过程" tabindex="-1"><a class="header-anchor" href="#文件读写过程"><span>文件读写过程</span></a></h2><p>当执行传统的文件读写操作时, 一般会有以下几步：</p><h3 id="系统调用" tabindex="-1"><a class="header-anchor" href="#系统调用"><span>系统调用</span></a></h3><ul><li>用户空间操作： 当一个应用程序需要读取或写入文件时，它会执行一个系统调用，比如<code>read()</code>或<code>write()</code>。</li><li>上下文切换： 执行系统调用意味着会发生从{% post_link go/cpu的工作模式 用户模式 %}到{% post_link go/cpu的工作模式 内核模式 %}的上下文切换。这个过程中，CPU切换到内核模式，开始执行操作系统的代码。</li></ul><h3 id="内核处理" tabindex="-1"><a class="header-anchor" href="#内核处理"><span>内核处理</span></a></h3><ul><li>内核空间操作：一旦进入内核模式，操作系统的内核接管控制权。内核首先检查调用参数的有效性，比如文件描述符、内存地址、读写大小等。</li></ul><h3 id="查找页缓存" tabindex="-1"><a class="header-anchor" href="#查找页缓存"><span>查找页缓存</span></a></h3><ul><li>检查页缓存： 对于读操作，内核会先检查所需数据是否已在<code>页缓存（Page Cache）</code>中。如果是，它可以直接从内存中复制数据到用户空间的缓冲区。</li><li>从磁盘读取： 如果数据不在页缓存中，内核会从文件所在的存储设备（如硬盘）读取数据，并将其存储在页缓存中。</li></ul><h3 id="数据传输" tabindex="-1"><a class="header-anchor" href="#数据传输"><span>数据传输</span></a></h3><ul><li>数据复制到用户空间：无论数据来自页缓存还是新的磁盘读取，内核都会将数据复制到用户空间提供的缓冲区中。</li><li>缓冲区管理：这个复制操作通常是通过<code>DMA（Direct Memory Access）</code>或其他有效的内存操作完成的。</li></ul><h3 id="写操作" tabindex="-1"><a class="header-anchor" href="#写操作"><span>写操作</span></a></h3><ul><li>写入页缓存：对于写操作，内核首先将数据<strong>从用户空间的缓冲区复制到页缓存中</strong>。</li><li>**延迟写入：**实际的磁盘写入可能会被延迟执行。内核可能会等待一段时间或直到有足够的数据要写入磁盘时再执行，以提高效率。</li></ul><h3 id="完成系统调用" tabindex="-1"><a class="header-anchor" href="#完成系统调用"><span>完成系统调用</span></a></h3><ul><li>返回用户空间：一旦读写操作完成，控制权返回用户空间，系统调用返回。 对于读操作，这意味着用户程序现在可以访问缓冲区中的数据。对于写操作，数据已经被复制到页缓存中，等待最终写入磁盘。</li></ul><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p>错误和状态：如果在任何步骤中出现错误（如无效的文件描述符、读写错误等），内核会处理这些错误，并将错误信息返回给用户空间的应用程序。</p><p><strong>总之，</strong><strong>在传统的文件读写操作中，数据在用户空间和内核空间之间来回移动。读操作涉及从磁盘到页缓存，再到用户空间的传输，而写操作涉及从用户空间到页缓存，最终可能到磁盘的传输。这个过程涉及系统调用、上下文切换、数据复制和缓冲区管理等多个步骤。这种方法虽然在某些情况下效率不是最优的，但它的通用性和简单性使其成为文件操作的基础。</strong></p><h2 id="mmap" tabindex="-1"><a class="header-anchor" href="#mmap"><span>mmap</span></a></h2><p>mmap是一种在Unix-like系统中将文件映射到内存的方法。**它提供了一种高效的文件访问机制，允许程序直接从内存中读写文件，而不是使用传统的读写系统调用。**这样做的好处是可以提高文件操作的性能，<strong>特别是对于大文件的处理。</strong></p><p>当文件被mmap映射到内存后，**操作系统创建了一个内存区域，这个区域的内容直接对应于文件的内容。程序可以像访问普通内存那样访问这个区域，而操作系统会负责将任何修改同步回文件。**这就避免了额外的读写系统调用和数据复制，从而提高效率。</p><h2 id="mmap的优势和特点" tabindex="-1"><a class="header-anchor" href="#mmap的优势和特点"><span>mmap的优势和特点</span></a></h2><h3 id="内存映射" tabindex="-1"><a class="header-anchor" href="#内存映射"><span>内存映射：</span></a></h3><p>mmap将文件内容直接映射到进程的地址空间中，应用程序可以像访问内存那样访问文件数据。这减少了传统读写操作中涉及的数据复制步骤。</p><h3 id="随机访问" tabindex="-1"><a class="header-anchor" href="#随机访问"><span>随机访问：</span></a></h3><p>对于需要频繁随机访问的大文件，mmap提供了一种更高效的机制。由于整个文件（或其大部分）被映射到内存中，随机访问变得更快，无需进行系统调用。</p><h3 id="延迟加载" tabindex="-1"><a class="header-anchor" href="#延迟加载"><span>延迟加载：</span></a></h3><p>mmap映射文件时，并不立即加载整个文件到内存中。只有在访问特定区域时，相应的数据才会被加载。这对处理大文件特别有用，可以避免一次性加载大量数据到内存中。 共享内存：</p><p>mmap可以用于创建<strong>多个进程之间的共享内存区域，这对于进程间通信和快速数据交换非常有用。</strong></p><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><h3 id="普通读写文件" tabindex="-1"><a class="header-anchor" href="#普通读写文件"><span>普通读写文件</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	content <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;Hello file I/O&quot;</span><span class="token punctuation">)</span>

	err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	readContent<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>readContent<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用mmap" tabindex="-1"><a class="header-anchor" href="#使用mmap"><span>使用mmap</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go get github.com/edsrzf/mmap-go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;os&quot;</span>

    <span class="token string">&quot;github.com/edsrzf/mmap-go&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打开文件</span>
    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">&quot;example.dat&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDWR<span class="token operator">|</span>os<span class="token punctuation">.</span>O_CREATE<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 使用mmap映射文件</span>
    mmap<span class="token punctuation">,</span> err <span class="token operator">:=</span> mmap<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> mmap<span class="token punctuation">.</span>RDWR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> mmap<span class="token punctuation">.</span><span class="token function">Unmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 写入数据到映射的内存</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>mmap<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;Hello mmap!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 读取数据</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>mmap<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),l=[p];function i(o,c){return s(),a("div",null,l)}const r=n(t,[["render",i],["__file","内存基础.html.vue"]]),d=JSON.parse('{"path":"/posts/go/%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80.html","title":"内存基础","lang":"zh-CN","frontmatter":{"title":"内存基础","date":"2023-12-14T19:17:32.000Z","tags":["go","memory"],"categories":["理论","go"]},"headers":[{"level":2,"title":"内存的虚拟地址","slug":"内存的虚拟地址","link":"#内存的虚拟地址","children":[]},{"level":2,"title":"“页”","slug":"页","link":"#页","children":[]},{"level":2,"title":"虚拟地址和页的作用","slug":"虚拟地址和页的作用","link":"#虚拟地址和页的作用","children":[]},{"level":2,"title":"虚拟地址和页的总结","slug":"虚拟地址和页的总结","link":"#虚拟地址和页的总结","children":[]},{"level":2,"title":"文件读写过程","slug":"文件读写过程","link":"#文件读写过程","children":[{"level":3,"title":"系统调用","slug":"系统调用","link":"#系统调用","children":[]},{"level":3,"title":"内核处理","slug":"内核处理","link":"#内核处理","children":[]},{"level":3,"title":"查找页缓存","slug":"查找页缓存","link":"#查找页缓存","children":[]},{"level":3,"title":"数据传输","slug":"数据传输","link":"#数据传输","children":[]},{"level":3,"title":"写操作","slug":"写操作","link":"#写操作","children":[]},{"level":3,"title":"完成系统调用","slug":"完成系统调用","link":"#完成系统调用","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]}]},{"level":2,"title":"mmap","slug":"mmap","link":"#mmap","children":[]},{"level":2,"title":"mmap的优势和特点","slug":"mmap的优势和特点","link":"#mmap的优势和特点","children":[{"level":3,"title":"内存映射：","slug":"内存映射","link":"#内存映射","children":[]},{"level":3,"title":"随机访问：","slug":"随机访问","link":"#随机访问","children":[]},{"level":3,"title":"延迟加载：","slug":"延迟加载","link":"#延迟加载","children":[]}]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[{"level":3,"title":"普通读写文件","slug":"普通读写文件","link":"#普通读写文件","children":[]},{"level":3,"title":"使用mmap","slug":"使用mmap","link":"#使用mmap","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/go/内存基础.md","excerpt":"<h2>内存的虚拟地址</h2>\\n<p>在现代计算机系统中，虚拟地址是指操作系统为程序提供的地址空间。</p>\\n<ul>\\n<li>这种地址空间是由操作系统和CPU的**内存管理单元（Memory Management Unit, MMU）**共同管理的，它与物理内存（RAM）中的实际地址是分开的。</li>\\n<li>虚拟地址为每个程序提供了一种看似连续且独立的内存空间，这使得每个程序都以为自己独占了整个系统的内存。</li>\\n</ul>\\n"}');export{r as comp,d as data};
