import{_ as n,o as a,c as s,e}from"./app-ATJF5j0V.js";const t="/static/img/posts/annotation-schema.jpg",p="/static/img/posts/annotation-schema1.jpg",c={},o=e(`<h2 id="导读" tabindex="-1"><a class="header-anchor" href="#导读"><span>导读</span></a></h2><p>Java的注解从JDK5引入，有的注解仅仅帮助IDE给出相应提示，有的注解在<code>runtime</code>时会被解析成字节码，通过反射获取注解内容，有的注解专门约束其它注解类，这样的<code>Anotation</code>被称为<code>元注解</code>，本文结合自己的理解将逐一对其进行介绍。</p><h2 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解"><span>内置注解</span></a></h2><p>Java的内置注解一共有7个，3个定义在<code>java.lang</code>中，另外4个定义在<code>java.lang.annotation</code>中，为了方便，我这里把<code>java.lang</code>中定义的注解称为<code>内置注解</code>，<code>java.lang.annotation</code>定义的注解成为<code>元注解</code>。</p><h3 id="override" tabindex="-1"><a class="header-anchor" href="#override"><span>@Override</span></a></h3><p>检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</p><h3 id="deprecated" tabindex="-1"><a class="header-anchor" href="#deprecated"><span>@Deprecated</span></a></h3><p>标记过时方法，如果使用使用，编译器会给出相应警告。</p><h3 id="suppresswarnings" tabindex="-1"><a class="header-anchor" href="#suppresswarnings"><span>@SuppressWarnings</span></a></h3><p>指示编译器去忽略注解中声明的警告。比如：<code>@SuppressWarnings(&quot;deprecation&quot;)</code>,<code>@SuppressWarnings({&quot;deprecation&quot;, &quot;unused&quot;, &quot;unchecked&quot;})</code></p><h2 id="元注解-作用于其它注解上的注解" tabindex="-1"><a class="header-anchor" href="#元注解-作用于其它注解上的注解"><span>元注解（作用于其它注解上的注解）</span></a></h2><h3 id="retention" tabindex="-1"><a class="header-anchor" href="#retention"><span>@Retention</span></a></h3><p>标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。 它的值有以下几个构成：</p><ul><li><strong>RetentionPolicy.SOURCE</strong>: Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了。</li><li><strong>RetentionPolicy.CLASS</strong>: 编译器将Annotation存储于类对应的.class文件中。默认行为。</li><li><strong>RetentionPolicy.RUNTIME</strong>: 编译器将Annotation存储于class文件中，并且可由JVM读入。</li></ul><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子：</span></a></h4><p>假设有一个我们自定义了一个名叫<code>TestAnn</code>的注解</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token comment">// @Retention(RetentionPolicy.RUNTIME) #可通过反射获取注解内容</span>

<span class="token comment">// @Retention(RetentionPolicy.SOURCE) #编译器将忽视TestAnn注释</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TestAnn</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span>@Target</span></a></h2><p>对一个自定义注解约束其使用范围，有如下值可选：</p><ul><li>ElementType.TYPE - 用在类，接口，枚举，注解的声明</li><li>ElementType.FIELD - 用在字段的和枚举常量</li><li>ElementType.METHOD - 用在方法的声明</li><li>ElementType.PARAMETER - 用在参数的声明</li><li>ElementType.CONSTRUCTOR - 在构造函数的声明</li><li>ElementType.LOCAL_VARIABLE - 用在局部变量的声明</li><li>ElementType.ANNOTATION_TYPE - 用在注释的声明</li><li>ElementType.PACKAGE - 用在包的声明</li></ul><h3 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1"><span>例子：</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 约束注释只能用在字段和方法上</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TestAnn</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="documented" tabindex="-1"><a class="header-anchor" href="#documented"><span>@Documented</span></a></h2><p>标记这些注解是否包含在用户文档中。</p><h2 id="inherited" tabindex="-1"><a class="header-anchor" href="#inherited"><span>@Inherited</span></a></h2><p>标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</p><h2 id="safevarargs-java7支持" tabindex="-1"><a class="header-anchor" href="#safevarargs-java7支持"><span>@SafeVarargs (Java7支持)</span></a></h2><p>忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</p><h2 id="functionalinterface-java8支持" tabindex="-1"><a class="header-anchor" href="#functionalinterface-java8支持"><span>@FunctionalInterface（Java8支持）</span></a></h2><p>标识一个匿名函数或函数式接口。</p><h2 id="repeatable-java8支持" tabindex="-1"><a class="header-anchor" href="#repeatable-java8支持"><span>@Repeatable（Java8支持）</span></a></h2><p>标识某注解可以在同一个声明上使用多次。</p><h2 id="注解的架构" tabindex="-1"><a class="header-anchor" href="#注解的架构"><span>注解的架构</span></a></h2><p><img src="`+t+'" alt=""> Annotation 有许多实现类，包括：Deprecated, Documented, Inherited, Override 等。 <img src="'+p+`" alt=""></p><h2 id="注解代码的组成" tabindex="-1"><a class="header-anchor" href="#注解代码的组成"><span>注解代码的组成</span></a></h2><p>Annotation.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Annotation.java</span>
<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Annotation</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ElementType.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// ElementType.java</span>
<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">{</span>
    <span class="token constant">TYPE</span><span class="token punctuation">,</span>               <span class="token comment">/* 类、接口（包括注释类型）或枚举声明  */</span>

    <span class="token constant">FIELD</span><span class="token punctuation">,</span>              <span class="token comment">/* 字段声明（包括枚举常量）  */</span>

    <span class="token constant">METHOD</span><span class="token punctuation">,</span>             <span class="token comment">/* 方法声明  */</span>

    <span class="token constant">PARAMETER</span><span class="token punctuation">,</span>          <span class="token comment">/* 参数声明  */</span>

    <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span>        <span class="token comment">/* 构造方法声明  */</span>

    <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span>     <span class="token comment">/* 局部变量声明  */</span>

    <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span>    <span class="token comment">/* 注释类型声明  */</span>

    <span class="token constant">PACKAGE</span>             <span class="token comment">/* 包声明  */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RetentionPolicy.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//RetentionPolicy.java</span>
<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">{</span>
    <span class="token constant">SOURCE</span><span class="token punctuation">,</span>            <span class="token comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */</span>

    <span class="token constant">CLASS</span><span class="token punctuation">,</span>             <span class="token comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为  */</span>

    <span class="token constant">RUNTIME</span>            <span class="token comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一个简单的例子" tabindex="-1"><a class="header-anchor" href="#一个简单的例子"><span>一个简单的例子</span></a></h2><p>UlRenderBorder.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// UlRenderBorder</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">UlBorderRender</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;border: 1px solid #000&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>App.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">UlBorderRender</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> draw <span class="token operator">=</span> <span class="token class-name">Draw</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> hasUL <span class="token operator">=</span> draw<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">UlBorderRender</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Method[] methods = draw.getMethods();</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>hasUL<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">StringBuilder</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">UlBorderRender</span> ulAnn <span class="token operator">=</span> draw<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">UlBorderRender</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;ul&gt;&quot;</span> <span class="token operator">+</span> ulAnn<span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;/ul&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),l=[o];function i(u,d){return a(),s("div",null,l)}const k=n(c,[["render",i],["__file","Java注解.html.vue"]]),v=JSON.parse('{"path":"/posts/java/Java%E6%B3%A8%E8%A7%A3.html","title":"Java注解","lang":"zh-CN","frontmatter":{"title":"Java注解","toc":true,"keywords":null,"tags":["java注解","java annotation"],"categories":["后端","java"],"abbrlink":"a1501c1d","date":"2021-09-16T19:13:16.000Z"},"headers":[{"level":2,"title":"导读","slug":"导读","link":"#导读","children":[]},{"level":2,"title":"内置注解","slug":"内置注解","link":"#内置注解","children":[{"level":3,"title":"@Override","slug":"override","link":"#override","children":[]},{"level":3,"title":"@Deprecated","slug":"deprecated","link":"#deprecated","children":[]},{"level":3,"title":"@SuppressWarnings","slug":"suppresswarnings","link":"#suppresswarnings","children":[]}]},{"level":2,"title":"元注解（作用于其它注解上的注解）","slug":"元注解-作用于其它注解上的注解","link":"#元注解-作用于其它注解上的注解","children":[{"level":3,"title":"@Retention","slug":"retention","link":"#retention","children":[]}]},{"level":2,"title":"@Target","slug":"target","link":"#target","children":[{"level":3,"title":"例子：","slug":"例子-1","link":"#例子-1","children":[]}]},{"level":2,"title":"@Documented","slug":"documented","link":"#documented","children":[]},{"level":2,"title":"@Inherited","slug":"inherited","link":"#inherited","children":[]},{"level":2,"title":"@SafeVarargs (Java7支持)","slug":"safevarargs-java7支持","link":"#safevarargs-java7支持","children":[]},{"level":2,"title":"@FunctionalInterface（Java8支持）","slug":"functionalinterface-java8支持","link":"#functionalinterface-java8支持","children":[]},{"level":2,"title":"@Repeatable（Java8支持）","slug":"repeatable-java8支持","link":"#repeatable-java8支持","children":[]},{"level":2,"title":"注解的架构","slug":"注解的架构","link":"#注解的架构","children":[]},{"level":2,"title":"注解代码的组成","slug":"注解代码的组成","link":"#注解代码的组成","children":[]},{"level":2,"title":"一个简单的例子","slug":"一个简单的例子","link":"#一个简单的例子","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/java/Java注解.md","excerpt":"<h2>导读</h2>\\n<p>Java的注解从JDK5引入，有的注解仅仅帮助IDE给出相应提示，有的注解在<code>runtime</code>时会被解析成字节码，通过反射获取注解内容，有的注解专门约束其它注解类，这样的<code>Anotation</code>被称为<code>元注解</code>，本文结合自己的理解将逐一对其进行介绍。</p>\\n"}');export{k as comp,v as data};
