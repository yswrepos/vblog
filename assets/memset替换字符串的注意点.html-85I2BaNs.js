import{_ as n,o as s,c as a,e}from"./app-BLeSCfhf.js";const t={},c=e(`<h2 id="字符串只读" tabindex="-1"><a class="header-anchor" href="#字符串只读"><span>字符串只读</span></a></h2><ul><li><p>memset 原型 <code>void * memset( void * ptr, int value, size_t num )</code></p><blockquote><p>其中 size_t 即是 unsigned int</p></blockquote></li><li><p>参数说明 ptr 为要操作的内存的指针。 value 为要设置的值。你既可以向 value 传递 int 类型的值，也可以传递 char 类型的值，因为 int 和 char 可以根据 ASCII 码相互转换。 num 为 ptr 的前 num 个字节。</p></li></ul><blockquote><p>注意：参数 value 虽声明为 int，但必须是 unsigned char，所以范围在0 到255 之间。</p></blockquote><ul><li>使用</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;https://github.com&quot;</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>输出 -------github.com</p></blockquote><ul><li>错误使用 由于字符串是只读的，不能被修改。而memset必须修改目标，所以不能直接将字符指针直接指向字符串，以下使用将在运行时报错</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">&quot;https://github.com&quot;</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Bus error: <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),p=[c];function i(o,l){return s(),a("div",null,p)}const r=n(t,[["render",i],["__file","memset替换字符串的注意点.html.vue"]]),d=JSON.parse('{"path":"/posts/c/memset%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9.html","title":"memset替换字符串的注意点","lang":"zh-CN","frontmatter":{"title":"memset替换字符串的注意点","toc":true,"keywords":"memset,c/c++","tags":["c/c++","内存"],"categories":["c/c++"],"abbrlink":"d8689c7b","date":"2020-10-17T19:13:16.000Z"},"headers":[{"level":2,"title":"字符串只读","slug":"字符串只读","link":"#字符串只读","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/c/memset替换字符串的注意点.md","excerpt":"<h2>字符串只读</h2>\\n<ul>\\n<li>\\n<p>memset 原型\\n<code>void * memset( void * ptr, int value, size_t num )</code></p>\\n<blockquote>\\n<p>其中 size_t 即是 unsigned int</p>\\n</blockquote>\\n</li>\\n<li>\\n<p>参数说明\\nptr 为要操作的内存的指针。\\nvalue 为要设置的值。你既可以向 value 传递 int 类型的值，也可以传递 char 类型的值，因为 int 和 char 可以根据 ASCII 码相互转换。\\nnum 为 ptr 的前 num 个字节。</p>\\n</li>\\n</ul>\\n<blockquote>\\n<p>注意：参数 value 虽声明为 int，但必须是 unsigned char，所以范围在0 到255 之间。</p>\\n</blockquote>\\n"}');export{r as comp,d as data};
