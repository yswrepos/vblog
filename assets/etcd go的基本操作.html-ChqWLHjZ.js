import{_ as n,o as s,c as a,e as t}from"./app-Du_kiChf.js";const p={},e=t(`<h2 id="new" tabindex="-1"><a class="header-anchor" href="#new"><span>New</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	clientv3 <span class="token string">&quot;go.etcd.io/etcd/client/v3&quot;</span>
<span class="token punctuation">)</span>

cli<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientv3<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
		Endpoints<span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;localhost:2379&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		DialTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> cli<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存储" tabindex="-1"><a class="header-anchor" href="#存储"><span>存储</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token comment">// 存储</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/temp-etcd-k&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;temp-etcd-v&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取" tabindex="-1"><a class="header-anchor" href="#获取"><span>获取</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// </span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;/temp-etcd-k&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 获取k,v的值</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ev <span class="token operator">:=</span> <span class="token keyword">range</span> resp<span class="token punctuation">.</span>Kvs <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %s\\n&quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>watch</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	wctx<span class="token punctuation">,</span> wcancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Minute<span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>
	watchChan <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">Watch</span><span class="token punctuation">(</span>wctx<span class="token punctuation">,</span> <span class="token string">&quot;/temp-etcd-k&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">wcancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// wtimer := time.NewTimer(2 * time.Minute)</span>

	<span class="token comment">// go func() {</span>
	<span class="token comment">// 	select {</span>
	<span class="token comment">// 	case &lt;-wtimer.C:</span>
	<span class="token comment">// 		wcancel()</span>
	<span class="token comment">// 	}</span>
	<span class="token comment">// }()</span>

	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Watching temp-etcd-k for changing...&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> wresp<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>watchChan<span class="token punctuation">:</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Watch chan has closed.&quot;</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ev <span class="token operator">:=</span> <span class="token keyword">range</span> wresp<span class="token punctuation">.</span>Events <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;KEY EVENT CHANGE Type: %s Key:%s Value:%s\\n&quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Kv<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Kv<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","etcd go的基本操作.html.vue"]]),r=JSON.parse('{"path":"/posts/go/etcd%20go%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html","title":"etcd go的基本操作","lang":"zh-CN","frontmatter":{"title":"etcd go的基本操作","date":"2024-02-22T14:53:29.000Z","tags":["etcd","go"]},"headers":[{"level":2,"title":"New","slug":"new","link":"#new","children":[]},{"level":2,"title":"存储","slug":"存储","link":"#存储","children":[]},{"level":2,"title":"获取","slug":"获取","link":"#获取","children":[]},{"level":2,"title":"watch","slug":"watch","link":"#watch","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/go/etcd go的基本操作.md","excerpt":"<h2>New</h2>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"context\\"</span>\\n\\t<span class=\\"token string\\">\\"log\\"</span>\\n\\t<span class=\\"token string\\">\\"time\\"</span>\\n\\n\\tclientv3 <span class=\\"token string\\">\\"go.etcd.io/etcd/client/v3\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\ncli<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> clientv3<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">New</span><span class=\\"token punctuation\\">(</span>clientv3<span class=\\"token punctuation\\">.</span>Config<span class=\\"token punctuation\\">{</span>\\n\\t\\tEndpoints<span class=\\"token punctuation\\">:</span>   <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"localhost:2379\\"</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\t\\tDialTimeout<span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">5</span> <span class=\\"token operator\\">*</span> time<span class=\\"token punctuation\\">.</span>Second<span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatal</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">defer</span> cli<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div><h2>存储</h2>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code>\\t<span class=\\"token comment\\">// 存储</span>\\n\\t<span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">=</span> cli<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Put</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Background</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"/temp-etcd-k\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"temp-etcd-v\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatal</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n</code></pre></div><h2>获取</h2>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code>\\n\\tctx<span class=\\"token punctuation\\">,</span> cancel <span class=\\"token operator\\">:=</span> context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WithTimeout</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Background</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token operator\\">*</span>time<span class=\\"token punctuation\\">.</span>Second<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">defer</span> <span class=\\"token function\\">cancel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">// </span>\\n\\tresp<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> cli<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Get</span><span class=\\"token punctuation\\">(</span>ctx<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"/temp-etcd-k\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatal</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 获取k,v的值</span>\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> ev <span class=\\"token operator\\">:=</span> <span class=\\"token keyword\\">range</span> resp<span class=\\"token punctuation\\">.</span>Kvs <span class=\\"token punctuation\\">{</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%s: %s\\\\n\\"</span><span class=\\"token punctuation\\">,</span> ev<span class=\\"token punctuation\\">.</span>Key<span class=\\"token punctuation\\">,</span> ev<span class=\\"token punctuation\\">.</span>Value<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{k as comp,r as data};
