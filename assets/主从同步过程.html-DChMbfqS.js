import{_ as l,o as n,c as e,e as a}from"./app-ATJF5j0V.js";const i={},s=a('<p>MySQL的主从同步过程涉及将主服务器（Master）上的数据变更复制到一个或多个从服务器（Slave）上，以保持数据库的一致性。这个过程主要通过二进制日志（Binary Log）和中继日志（Relay Log）实现。下面是一个详细的步骤描述，包括当一个SQL插入语句在主服务器上执行时发生的事情：</p><h3 id="_1-sql插入操作在主服务器上执行" tabindex="-1"><a class="header-anchor" href="#_1-sql插入操作在主服务器上执行"><span>1. SQL插入操作在主服务器上执行</span></a></h3><p>当一个插入（INSERT）语句在主服务器上执行时：</p><ol><li><strong>执行语句</strong>：MySQL首先执行这个插入语句，将新的数据行添加到相应的表中。</li><li><strong>写入二进制日志</strong>：执行的插入语句和所产生的数据变更被记录到主服务器的二进制日志中。二进制日志是MySQL数据修改的记录，包括但不限于插入、更新和删除操作。</li></ol><h3 id="_2-从服务器请求数据变更" tabindex="-1"><a class="header-anchor" href="#_2-从服务器请求数据变更"><span>2. 从服务器请求数据变更</span></a></h3><p>从服务器通过以下步骤与主服务器同步数据：</p><ol><li><strong>读取二进制日志</strong>：从服务器上的I/O线程连接到主服务器，并请求从上次同步后的二进制日志位置开始的所有新的二进制日志条目。</li><li><strong>接收并写入中继日志</strong>：从服务器接收到二进制日志后，I/O线程会将这些日志写入本地的中继日志（Relay Log）。中继日志是从服务器上的二进制日志的一个副本。</li></ol><h3 id="_3-应用数据变更到从服务器" tabindex="-1"><a class="header-anchor" href="#_3-应用数据变更到从服务器"><span>3. 应用数据变更到从服务器</span></a></h3><p>从服务器将二进制日志中的数据变更应用到自己的数据库中：</p><ol><li><strong>读取中继日志</strong>：从服务器上的SQL线程读取中继日志中的事件。</li><li><strong>执行日志事件</strong>：SQL线程执行中继日志中的事件，包括插入操作，将数据变更应用到从服务器的数据库中。</li></ol><h3 id="_4-完成同步" tabindex="-1"><a class="header-anchor" href="#_4-完成同步"><span>4. 完成同步</span></a></h3><p>一旦SQL线程完成了中继日志中所有事件的执行，这次的数据同步过程就完成了。此时，从服务器上的数据应该与主服务器上的数据保持一致。</p><h3 id="同步模式" tabindex="-1"><a class="header-anchor" href="#同步模式"><span>同步模式</span></a></h3><p>MySQL支持几种不同的复制模式，主要包括同步复制（Synchronous Replication）和异步复制（Asynchronous Replication）。在默认配置下，MySQL使用的是异步复制，这意味着主服务器在将事件写入二进制日志后就立即返回，不会等待从服务器确认已接收和应用了这些变更。这可能导致在某些情况下（如主服务器突然崩溃）主从数据不一致的情况。为了解决这个问题，MySQL还提供了半同步复制（Semi-Synchronous Replication）作为一种可选配置，以提高数据一致性。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li><strong>数据延迟</strong>：在高负载或网络延迟的情况下，从服务器可能会与主服务器出现延时，即从服务器上的数据可能暂时落后于主服务器。</li><li><strong>配置和监控</strong>：正确配置主从复制并监控复制过程对于确保数据的一致性和可用性至关重要。</li></ul><p>通过上述过程，MySQL的主从复制提供了一种强大的机制来增强数据的可用性和读取性能，同时为数据备份和灾难恢复提供支持。</p><h2 id="半同步复制" tabindex="-1"><a class="header-anchor" href="#半同步复制"><span>半同步复制</span></a></h2><p>半同步复制（Semi-Synchronous Replication）是MySQL中的一种数据复制模式，它介于全同步复制和异步复制之间。这种复制模式旨在平衡数据一致性和复制延迟之间的关系，以提高数据的可靠性而不会显著影响主服务器的性能。</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><p>在半同步复制模式下：</p><ul><li>当主服务器执行一个事务并将其写入二进制日志后，它会等待至少一个从服务器确认它已经收到了该事务的信息，并将其写入自己的中继日志（但不需要该事务已经被应用）。</li><li>主服务器在收到至少一个从服务器的确认后，才会继续处理下一个事务。</li><li>如果在指定的等待时间内没有从服务器响应，复制将退回到异步模式，主服务器不再等待从服务器的确认。这是为了确保在从服务器无法及时响应时，不会阻塞主服务器上的事务处理。</li></ul><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li><strong>提高数据一致性</strong>：半同步复制确保了至少一个从服务器已经接收到了事务数据，这减少了主服务器突然宕机时数据丢失的风险。</li><li><strong>平衡性能与一致性</strong>：与全同步复制相比，半同步复制在确保数据一致性的同时，减少了等待所有从服务器确认的需求，从而平衡了性能与一致性的需求。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li><strong>可能的性能影响</strong>：尽管半同步复制减少了全同步复制的性能开销，但它仍然可能引入比异步复制更高的延迟，因为主服务器需要等待至少一个从服务器的确认。</li><li><strong>复杂的配置和管理</strong>：启用半同步复制需要对MySQL进行额外的配置，并且可能需要根据具体场景调整参数以获得最佳的性能和可靠性平衡。</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><p>半同步复制适用于那些对数据一致性要求较高，但又不能接受全同步复制可能带来的性能损失的场景。例如，金融服务、电子商务平台和其他需要确保数据不丢失，同时又要求系统具有较好响应性能的应用，可以考虑使用半同步复制。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>在MySQL中启用半同步复制需要安装并配置半同步复制插件，并调整相关参数以启用这一功能。具体的配置步骤可能根据MySQL的版本和具体的部署环境有所不同。</p><h2 id="主从复制过程" tabindex="-1"><a class="header-anchor" href="#主从复制过程"><span>主从复制过程</span></a></h2><p>在MySQL主从复制架构中，从服务器知道主服务器二进制日志有更新并同步到中继日志的过程是通过持续的通信和协调实现的。这个过程主要涉及两个关键组件：从服务器的I/O线程和主服务器的二进制日志。下面是详细的说明：</p><h3 id="_1-建立复制连接" tabindex="-1"><a class="header-anchor" href="#_1-建立复制连接"><span>1. 建立复制连接</span></a></h3><ul><li><strong>开始复制时</strong>：复制初始化时，从服务器上的I/O线程会连接到主服务器。这一步通常在从服务器上配置复制并启动复制过程时发生，需要指定主服务器的地址、端口以及用于复制的用户凭证。</li></ul><h3 id="_2-读取二进制日志位置" tabindex="-1"><a class="header-anchor" href="#_2-读取二进制日志位置"><span>2. 读取二进制日志位置</span></a></h3><ul><li><strong>同步点</strong>：当从服务器的I/O线程首次连接到主服务器时，它会告知主服务器最后同步的二进制日志文件和位置（也就是它上次复制到哪里）。如果是初次复制，这通常是主服务器当前二进制日志的起始位置。</li></ul><h3 id="_3-请求和接收二进制日志事件" tabindex="-1"><a class="header-anchor" href="#_3-请求和接收二进制日志事件"><span>3. 请求和接收二进制日志事件</span></a></h3><ul><li><strong>持续监听</strong>：一旦初始化复制，从服务器的I/O线程会持续监听主服务器上的二进制日志变更。主服务器在执行完事务并将其写入二进制日志后，会将这些日志事件发送给所有请求这些信息的从服务器。</li><li><strong>发送更新</strong>：主服务器上有一个专门的线程负责将二进制日志的更新发送给从服务器。每当二进制日志有新的事件时，主服务器就会将这些事件发送给所有连接的从服务器的I/O线程。</li></ul><h3 id="_4-写入中继日志" tabindex="-1"><a class="header-anchor" href="#_4-写入中继日志"><span>4. 写入中继日志</span></a></h3><ul><li><strong>写入操作</strong>：从服务器的I/O线程接收到二进制日志事件后，会将这些事件写入本地的中继日志。中继日志是从服务器本地的一个日志文件，用于存储从主服务器接收到的所有二进制日志事件。</li></ul><h3 id="_5-应用日志事件" tabindex="-1"><a class="header-anchor" href="#_5-应用日志事件"><span>5. 应用日志事件</span></a></h3><ul><li><strong>SQL线程应用更改</strong>：从服务器上的另一个组件，SQL线程，负责读取中继日志中的事件并将它们应用到从服务器的数据库中，这样从服务器的数据就与主服务器保持一致了。</li></ul><h3 id="技术细节" tabindex="-1"><a class="header-anchor" href="#技术细节"><span>技术细节</span></a></h3><ul><li><strong>心跳检测</strong>：MySQL复制可以配置心跳检测（heartbeat），以验证主从连接的活跃状态，并帮助监控复制延迟。</li><li><strong>半同步复制</strong>：如果配置了半同步复制，从服务器在写入中继日志后，会向主服务器发送一个确认，主服务器在收到至少一个从服务器的确认后才会继续处理新的事务，这样提高了数据一致性。</li></ul><p>通过这种方式，从服务器能够实时地知道主服务器上二进制日志的更新，并将这些更新同步到自己的中继日志中，进而保持与主服务器的数据一致性。</p><h2 id="主服务器的bin-dump-thread的推送" tabindex="-1"><a class="header-anchor" href="#主服务器的bin-dump-thread的推送"><span>主服务器的bin dump thread的推送</span></a></h2><h3 id="二进制日志的推送过程" tabindex="-1"><a class="header-anchor" href="#二进制日志的推送过程"><span>二进制日志的推送过程</span></a></h3><ol><li><p><strong>复制连接建立</strong>：当从服务器的I/O线程首次连接到主服务器时，它会请求从一个特定的二进制日志位置开始接收数据。这个位置是基于从服务器上已有的数据状态确定的。</p></li><li><p><strong>主动推送</strong>：在主服务器上，当有新的数据变更（如一个SQL插入操作）被写入二进制日志后，主服务器并不是等待从服务器来“监听”这些变化。相反，主服务器上有一个专门的线程（在一些描述中被称为binlog dump thread），负责主动将这些新的二进制日志事件推送给已经建立连接并请求数据的从服务器。</p></li><li><p><strong>接收并写入中继日志</strong>：从服务器的I/O线程接收到这些二进制日志事件后，将它们写入自己的中继日志中。然后，从服务器的SQL线程会读取中继日志，并执行里面的事件来更新从服务器的数据状态，以此保持与主服务器的数据一致。</p></li></ol><p>所以，&quot;监听&quot;这个动作其实是一个从服务器发起连接请求后，主服务器主动推送二进制日志更新的过程。这种设计确保了数据变更能够有效、及时地从主服务器传播到从服务器，同时避免了从服务器需要不断轮询主服务器以检查数据变更的需求，这样可以更高效地利用网络和服务器资源。</p>',49),t=[s];function r(h,o){return n(),e("div",null,t)}const d=l(i,[["render",r],["__file","主从同步过程.html.vue"]]),c=JSON.parse('{"path":"/posts/mysql/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E8%BF%87%E7%A8%8B.html","title":"主从同步过程","lang":"zh-CN","frontmatter":{"title":"主从同步过程","date":"2024-03-25T16:22:07.000Z","tags":["mysql"],"categories":"mysql"},"headers":[{"level":3,"title":"1. SQL插入操作在主服务器上执行","slug":"_1-sql插入操作在主服务器上执行","link":"#_1-sql插入操作在主服务器上执行","children":[]},{"level":3,"title":"2. 从服务器请求数据变更","slug":"_2-从服务器请求数据变更","link":"#_2-从服务器请求数据变更","children":[]},{"level":3,"title":"3. 应用数据变更到从服务器","slug":"_3-应用数据变更到从服务器","link":"#_3-应用数据变更到从服务器","children":[]},{"level":3,"title":"4. 完成同步","slug":"_4-完成同步","link":"#_4-完成同步","children":[]},{"level":3,"title":"同步模式","slug":"同步模式","link":"#同步模式","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"半同步复制","slug":"半同步复制","link":"#半同步复制","children":[{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]}]},{"level":2,"title":"主从复制过程","slug":"主从复制过程","link":"#主从复制过程","children":[{"level":3,"title":"1. 建立复制连接","slug":"_1-建立复制连接","link":"#_1-建立复制连接","children":[]},{"level":3,"title":"2. 读取二进制日志位置","slug":"_2-读取二进制日志位置","link":"#_2-读取二进制日志位置","children":[]},{"level":3,"title":"3. 请求和接收二进制日志事件","slug":"_3-请求和接收二进制日志事件","link":"#_3-请求和接收二进制日志事件","children":[]},{"level":3,"title":"4. 写入中继日志","slug":"_4-写入中继日志","link":"#_4-写入中继日志","children":[]},{"level":3,"title":"5. 应用日志事件","slug":"_5-应用日志事件","link":"#_5-应用日志事件","children":[]},{"level":3,"title":"技术细节","slug":"技术细节","link":"#技术细节","children":[]}]},{"level":2,"title":"主服务器的bin dump thread的推送","slug":"主服务器的bin-dump-thread的推送","link":"#主服务器的bin-dump-thread的推送","children":[{"level":3,"title":"二进制日志的推送过程","slug":"二进制日志的推送过程","link":"#二进制日志的推送过程","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/mysql/主从同步过程.md","excerpt":"<p>MySQL的主从同步过程涉及将主服务器（Master）上的数据变更复制到一个或多个从服务器（Slave）上，以保持数据库的一致性。这个过程主要通过二进制日志（Binary Log）和中继日志（Relay Log）实现。下面是一个详细的步骤描述，包括当一个SQL插入语句在主服务器上执行时发生的事情：</p>\\n<h3>1. SQL插入操作在主服务器上执行</h3>\\n<p>当一个插入（INSERT）语句在主服务器上执行时：</p>\\n<ol>\\n<li><strong>执行语句</strong>：MySQL首先执行这个插入语句，将新的数据行添加到相应的表中。</li>\\n<li><strong>写入二进制日志</strong>：执行的插入语句和所产生的数据变更被记录到主服务器的二进制日志中。二进制日志是MySQL数据修改的记录，包括但不限于插入、更新和删除操作。</li>\\n</ol>\\n<h3>2. 从服务器请求数据变更</h3>\\n<p>从服务器通过以下步骤与主服务器同步数据：</p>\\n<ol>\\n<li><strong>读取二进制日志</strong>：从服务器上的I/O线程连接到主服务器，并请求从上次同步后的二进制日志位置开始的所有新的二进制日志条目。</li>\\n<li><strong>接收并写入中继日志</strong>：从服务器接收到二进制日志后，I/O线程会将这些日志写入本地的中继日志（Relay Log）。中继日志是从服务器上的二进制日志的一个副本。</li>\\n</ol>\\n<h3>3. 应用数据变更到从服务器</h3>\\n<p>从服务器将二进制日志中的数据变更应用到自己的数据库中：</p>\\n<ol>\\n<li><strong>读取中继日志</strong>：从服务器上的SQL线程读取中继日志中的事件。</li>\\n<li><strong>执行日志事件</strong>：SQL线程执行中继日志中的事件，包括插入操作，将数据变更应用到从服务器的数据库中。</li>\\n</ol>\\n<h3>4. 完成同步</h3>\\n<p>一旦SQL线程完成了中继日志中所有事件的执行，这次的数据同步过程就完成了。此时，从服务器上的数据应该与主服务器上的数据保持一致。</p>\\n<h3>同步模式</h3>\\n<p>MySQL支持几种不同的复制模式，主要包括同步复制（Synchronous Replication）和异步复制（Asynchronous Replication）。在默认配置下，MySQL使用的是异步复制，这意味着主服务器在将事件写入二进制日志后就立即返回，不会等待从服务器确认已接收和应用了这些变更。这可能导致在某些情况下（如主服务器突然崩溃）主从数据不一致的情况。为了解决这个问题，MySQL还提供了半同步复制（Semi-Synchronous Replication）作为一种可选配置，以提高数据一致性。</p>\\n<h3>注意事项</h3>\\n<ul>\\n<li><strong>数据延迟</strong>：在高负载或网络延迟的情况下，从服务器可能会与主服务器出现延时，即从服务器上的数据可能暂时落后于主服务器。</li>\\n<li><strong>配置和监控</strong>：正确配置主从复制并监控复制过程对于确保数据的一致性和可用性至关重要。</li>\\n</ul>\\n<p>通过上述过程，MySQL的主从复制提供了一种强大的机制来增强数据的可用性和读取性能，同时为数据备份和灾难恢复提供支持。</p>\\n"}');export{d as comp,c as data};
