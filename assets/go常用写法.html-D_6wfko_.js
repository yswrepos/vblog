import{_ as a,o as n,c as s,e as t}from"./app-CinGCuEv.js";const e={},p=t(`<h1 id="使用path-base和filepath-base取得路径中的文件名" tabindex="-1"><a class="header-anchor" href="#使用path-base和filepath-base取得路径中的文件名"><span>使用path.Base和filepath.Base取得路径中的文件名</span></a></h1><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 使用path.Base提取文件名 硬编码的字符串足够了</span>
baseName <span class="token operator">:=</span> path<span class="token punctuation">.</span><span class="token function">Base</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Using path.Base:&quot;</span><span class="token punctuation">,</span> baseName<span class="token punctuation">)</span>


<span class="token comment">// 使用filepath.Base提取文件名; 会自动处理不同操作系统中的路径分隔符差异。在处理用户输入的路径或者从操作系统获取的路径更合适</span>
filepathBaseName <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Base</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Using filepath.Base:&quot;</span><span class="token punctuation">,</span> filepathBaseName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="结构体实现接口约束" tabindex="-1"><a class="header-anchor" href="#结构体实现接口约束"><span>结构体实现接口约束</span></a></h1><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token boolean">_</span> SomeInterface <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyService<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),o=[p];function c(i,l){return n(),s("div",null,o)}const r=a(e,[["render",c],["__file","go常用写法.html.vue"]]),d=JSON.parse('{"path":"/posts/go/go%E5%B8%B8%E7%94%A8%E5%86%99%E6%B3%95.html","title":"go常用写法","lang":"zh-CN","frontmatter":{"title":"go常用写法","date":"2024-02-22T17:58:25.000Z","tags":["go"],"description":"使用path.Base和filepath.Base取得路径中的文件名 结构体实现接口约束","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/go/go%E5%B8%B8%E7%94%A8%E5%86%99%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"go常用写法"}],["meta",{"property":"og:description","content":"使用path.Base和filepath.Base取得路径中的文件名 结构体实现接口约束"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2024-02-22T17:58:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go常用写法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-22T17:58:25.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/go/go常用写法.md","excerpt":"\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// 使用path.Base提取文件名 硬编码的字符串足够了</span>\\nbaseName <span class=\\"token operator\\">:=</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\nfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Using path.Base:\\"</span><span class=\\"token punctuation\\">,</span> baseName<span class=\\"token punctuation\\">)</span>\\n\\n\\n<span class=\\"token comment\\">// 使用filepath.Base提取文件名; 会自动处理不同操作系统中的路径分隔符差异。在处理用户输入的路径或者从操作系统获取的路径更合适</span>\\nfilepathBaseName <span class=\\"token operator\\">:=</span> filepath<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Base</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span>\\nfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Using filepath.Base:\\"</span><span class=\\"token punctuation\\">,</span> filepathBaseName<span class=\\"token punctuation\\">)</span>\\n</code></pre></div><h1>结构体实现接口约束</h1>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> <span class=\\"token boolean\\">_</span> SomeInterface <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>MyService<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">nil</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>"}');export{r as comp,d as data};
