import{_ as n,o as s,c as a,e as t}from"./app-CinGCuEv.js";const p={},o=t(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bufio&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 监听TCP端口</span>
	listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:8080&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error listening:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> listener<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Listening on :8080&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token comment">// 接受新的连接</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error accepting: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 为每个连接启动一个新的协程</span>
		<span class="token keyword">go</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// handleRequest 处理连接上的请求</span>
<span class="token keyword">func</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	writer <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token comment">// 读取客户端的数据</span>
		message<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> net<span class="token punctuation">.</span>ErrClosed <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error reading:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 处理数据（这里简单地回显）</span>
		fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Message Received:&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>
		writer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
		writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go语言的 <code>net</code> 包提供了创建和管理网络连接的高级接口。当你使用 <code>net.Listen</code> 和 <code>net.Accept</code> 方法创建和接受TCP连接时，Go的运行时系统在内部使用 <code>epoll</code>（在Linux平台上）来实现网络I/O操作的多路复用，但这个过程对于Go开发者是透明的。以下是这个机制的简化描述：</p><ol><li><p><strong>监听端口</strong>:</p><ul><li>当你调用 <code>net.Listen</code> 方法时，Go会在给定的网络地址上创建一个监听的socket。</li><li>在Linux上，这个socket会被设置为非阻塞模式，这样系统调用就不会在等待I/O时挂起当前线程。</li></ul></li><li><p><strong>等待连接</strong>:</p><ul><li>接下来，当你调用监听socket的 <code>Accept</code> 方法时，Go会注册这个socket到 <code>epoll</code> 实例上，以便异步地等待新的连接。</li><li>这时，<code>Accept</code> 方法通常会在一个无限循环中被调用，每次循环都尝试接受新的连接。</li></ul></li><li><p><strong>使用 <code>epoll</code></strong>:</p><ul><li>在运行时内部，Go使用 <code>epoll</code> 创建了一个事件循环，等待文件描述符上的事件，如可读或可写事件。</li><li>当一个新的连接到来时，<code>epoll</code> 会通知运行时系统，然后运行时会唤醒在 <code>Accept</code> 调用上阻塞的协程。</li></ul></li><li><p><strong>处理连接</strong>:</p><ul><li>每当 <code>Accept</code> 成功返回一个新的连接时，Go运行时通常会为该连接创建一个新的协程来处理。</li><li>连接socket也被设置为非阻塞，并且注册到 <code>epoll</code> 实例上，以便异步地处理读写事件。</li></ul></li><li><p><strong>协程调度</strong>:</p><ul><li>Go的协程调度器与网络I/O操作紧密集成。当协程等待网络操作时（例如：等待数据的到来），它会被标记为等待状态，并从OS线程上解绑。</li><li>当 <code>epoll</code> 检测到对应的事件（例如：数据到达）时，运行时会重新唤醒协程，协程会在某个OS线程上继续执行。</li></ul></li><li><p><strong>非阻塞I/O</strong>:</p><ul><li>由于所有网络操作都是非阻塞的，所以Go可以在少量的OS线程上管理大量的协程。</li><li>这样，即使一个协程因为I/O操作被阻塞，其他协程也可以继续在同一个线程上运行，大大提高了并发效率。</li></ul></li></ol><p>Go的运行时抽象了 <code>epoll</code> 的复杂性，允许开发者以同步的方式编写代码，就像是进行阻塞I/O调用一样。在底层，运行时使用 <code>epoll</code> 以非阻塞、高效的方式处理这些操作。这种模型使得Go非常适合编写高并发的网络服务。</p>`,4),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","一个简单的go tcp回显服务器示例.html.vue"]]),k=JSON.parse(`{"path":"/posts/go/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84go%20tcp%E5%9B%9E%E6%98%BE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A4%BA%E4%BE%8B.html","title":"一个简单的go tcp回显服务器示例","lang":"zh-CN","frontmatter":{"layout":"posts","title":"一个简单的go tcp回显服务器示例","date":"2024-01-09T14:47:49.000Z","tags":["go"],"categories":["go"],"description":"Go语言的 net 包提供了创建和管理网络连接的高级接口。当你使用 net.Listen 和 net.Accept 方法创建和接受TCP连接时，Go的运行时系统在内部使用 epoll（在Linux平台上）来实现网络I/O操作的多路复用，但这个过程对于Go开发者是透明的。以下是这个机制的简化描述： 监听端口: 当你调用 net.Listen 方法时，Go...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/go/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84go%20tcp%E5%9B%9E%E6%98%BE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A4%BA%E4%BE%8B.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"一个简单的go tcp回显服务器示例"}],["meta",{"property":"og:description","content":"Go语言的 net 包提供了创建和管理网络连接的高级接口。当你使用 net.Listen 和 net.Accept 方法创建和接受TCP连接时，Go的运行时系统在内部使用 epoll（在Linux平台上）来实现网络I/O操作的多路复用，但这个过程对于Go开发者是透明的。以下是这个机制的简化描述： 监听端口: 当你调用 net.Listen 方法时，Go..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2024-01-09T14:47:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一个简单的go tcp回显服务器示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-09T14:47:49.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/go/一个简单的go tcp回显服务器示例.md","excerpt":"<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code>\\n<span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"bufio\\"</span>\\n\\t<span class=\\"token string\\">\\"fmt\\"</span>\\n\\t<span class=\\"token string\\">\\"net\\"</span>\\n\\t<span class=\\"token string\\">\\"os\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// 监听TCP端口</span>\\n\\tlistener<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> net<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Listen</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"tcp\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\":8080\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Error listening:\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\tos<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Exit</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">defer</span> listener<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Listening on :8080\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">// 接受新的连接</span>\\n\\t\\tconn<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> listener<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Accept</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Error accepting: \\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token keyword\\">continue</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token comment\\">// 为每个连接启动一个新的协程</span>\\n\\t\\t<span class=\\"token keyword\\">go</span> <span class=\\"token function\\">handleRequest</span><span class=\\"token punctuation\\">(</span>conn<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// handleRequest 处理连接上的请求</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">handleRequest</span><span class=\\"token punctuation\\">(</span>conn net<span class=\\"token punctuation\\">.</span>Conn<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">defer</span> conn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n\\treader <span class=\\"token operator\\">:=</span> bufio<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewReader</span><span class=\\"token punctuation\\">(</span>conn<span class=\\"token punctuation\\">)</span>\\n\\twriter <span class=\\"token operator\\">:=</span> bufio<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewWriter</span><span class=\\"token punctuation\\">(</span>conn<span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">// 读取客户端的数据</span>\\n\\t\\tmessage<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> reader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadString</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">'\\\\n'</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> net<span class=\\"token punctuation\\">.</span>ErrClosed <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Error reading:\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token keyword\\">break</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t\\t<span class=\\"token comment\\">// 处理数据（这里简单地回显）</span>\\n\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Message Received:\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>message<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\twriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteString</span><span class=\\"token punctuation\\">(</span>message<span class=\\"token punctuation\\">)</span>\\n\\t\\twriter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Flush</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>"}`);export{r as comp,k as data};
