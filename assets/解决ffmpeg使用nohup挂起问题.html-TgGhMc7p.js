import{_ as a,o as s,c as e,e as n}from"./app-Du_kiChf.js";const t={},p=n(`<p>ffmpeg 默认使用stdin交互，当使用nohup后台启动后，由于没有了输入交互，所以ffmpeg选择了挂起等待， 解决方案有两个：</p><h2 id="指定-nostdin选项" tabindex="-1"><a class="header-anchor" href="#指定-nostdin选项"><span>指定<code>-nostdin</code>选项</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nohup</span> ffmpeg <span class="token parameter variable">-nostdin</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;xxx.index.m3u8&quot;</span> <span class="token parameter variable">-c</span> copy <span class="token parameter variable">-bsf:a</span> aac_adtstoasc output.mp4 <span class="token operator">&gt;</span> output.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$!</span> <span class="token operator">&gt;</span> output.pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="重定向输入" tabindex="-1"><a class="header-anchor" href="#重定向输入"><span>重定向输入</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nohup</span> ffmpeg <span class="token parameter variable">-loglevel</span> warning error <span class="token parameter variable">-i</span> <span class="token string">&quot;xxx.m3u8&quot;</span> <span class="token parameter variable">-c</span> copy <span class="token parameter variable">-bsf:a</span> aac_adtstoasc output.mp4 <span class="token operator">&gt;</span> output.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&lt;</span> /dev/null <span class="token operator">&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$!</span> <span class="token operator">&gt;</span> output.pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="命令解释" tabindex="-1"><a class="header-anchor" href="#命令解释"><span>命令解释</span></a></h2><ul><li>-i &quot;xxx&quot;: 这里-i标志指定输入文件，&quot;xxx&quot;应该替换为你的M3U8文件的实际URL。</li><li>-c copy: 这个选项指示FFmpeg复制原始数据流，不重新编码。这样做可以更快地处理文件，同时避免质量损失。</li><li>-bsf:a aac_adtstoasc: 这是一个比特流过滤器(bitstream filter)，用于将音频从ADTS容器转换为MPEG-4 Audio Layer。这对于某些使用AAC音频的HLS流非常重要，以确保音频能够在MP4容器中正确播放。 output.mp4: 指定输出文件的名称和格式。你可以根据需要更改output.mp4为其他文件名。</li></ul><h2 id="ffmepg的日志分级" tabindex="-1"><a class="header-anchor" href="#ffmepg的日志分级"><span>ffmepg的日志分级</span></a></h2><p>FFmpeg提供了不同的日志级别，以控制命令行输出的详细程度。这些日志级别可以帮助用户在需要时获取更多信息，或者减少输出以便于查看关键信息。下面是FFmpeg支持的主要日志级别，从最详细到最少信息：</p><ol><li><p><strong><code>quiet</code></strong>: 安静模式，不输出任何日志信息。</p></li><li><p><strong><code>panic</code></strong>: 仅输出非常严重的错误信息，通常是那些会导致程序立即终止的错误。</p></li><li><p><strong><code>fatal</code></strong>: 输出致命错误信息，这些错误通常是阻止程序正常进行所必须处理的。</p></li><li><p><strong><code>error</code></strong>: 输出错误信息，包括非致命错误，但是可能会影响操作的正常完成。</p></li><li><p><strong><code>warning</code></strong>: 输出警告信息，指示可能的问题，但不一定会阻止程序的正常执行。</p></li><li><p><strong><code>info</code></strong>: 输出信息性消息，这是默认的日志级别，提供进度报告、调试信息等。</p></li><li><p><strong><code>verbose</code></strong>: 输出详细信息，比info级别更详细，用于调试问题时。</p></li><li><p><strong><code>debug</code></strong>: 输出调试信息，包括很低级别的信息，对开发者或调试问题很有用。</p></li><li><p><strong><code>trace</code></strong>: 输出非常详细的跟踪信息，是所有级别中最详细的，用于深入调试。</p></li></ol><p>使用方式示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ffmpeg <span class="token parameter variable">-loglevel</span> error <span class="token parameter variable">-i</span> input.mp4 output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，<code>-loglevel error</code>指示FFmpeg仅输出错误级别的日志信息。</p><p>选择适当的日志级别可以帮助你更有效地使用FFmpeg，无论是调试复杂的问题还是简单地执行转换任务而不希望被冗余信息干扰。</p>`,14),o=[p];function l(r,i){return s(),e("div",null,o)}const d=a(t,[["render",l],["__file","解决ffmpeg使用nohup挂起问题.html.vue"]]),m=JSON.parse('{"path":"/posts/tools/%E8%A7%A3%E5%86%B3ffmpeg%E4%BD%BF%E7%94%A8nohup%E6%8C%82%E8%B5%B7%E9%97%AE%E9%A2%98.html","title":"解决ffmpeg使用nohup挂起问题","lang":"zh-CN","frontmatter":{"title":"解决ffmpeg使用nohup挂起问题","date":"2024-02-26T16:51:26.000Z","tags":["ffmpeg"],"categories":"ffmpeg"},"headers":[{"level":2,"title":"指定-nostdin选项","slug":"指定-nostdin选项","link":"#指定-nostdin选项","children":[]},{"level":2,"title":"重定向输入","slug":"重定向输入","link":"#重定向输入","children":[]},{"level":2,"title":"命令解释","slug":"命令解释","link":"#命令解释","children":[]},{"level":2,"title":"ffmepg的日志分级","slug":"ffmepg的日志分级","link":"#ffmepg的日志分级","children":[]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/tools/解决ffmpeg使用nohup挂起问题.md","excerpt":"<p>ffmpeg 默认使用stdin交互，当使用nohup后台启动后，由于没有了输入交互，所以ffmpeg选择了挂起等待，\\n解决方案有两个：</p>\\n<h2>指定<code>-nostdin</code>选项</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">nohup</span> ffmpeg <span class=\\"token parameter variable\\">-nostdin</span> <span class=\\"token parameter variable\\">-i</span> <span class=\\"token string\\">\\"xxx.index.m3u8\\"</span> <span class=\\"token parameter variable\\">-c</span> copy <span class=\\"token parameter variable\\">-bsf:a</span> aac_adtstoasc output.mp4 <span class=\\"token operator\\">&gt;</span> output.log <span class=\\"token operator\\"><span class=\\"token file-descriptor important\\">2</span>&gt;</span><span class=\\"token file-descriptor important\\">&amp;1</span> <span class=\\"token operator\\">&amp;</span> <span class=\\"token builtin class-name\\">echo</span> <span class=\\"token variable\\">$!</span> <span class=\\"token operator\\">&gt;</span> output.pid\\n</code></pre></div><h2>重定向输入</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">nohup</span> ffmpeg <span class=\\"token parameter variable\\">-loglevel</span> warning error <span class=\\"token parameter variable\\">-i</span> <span class=\\"token string\\">\\"xxx.m3u8\\"</span> <span class=\\"token parameter variable\\">-c</span> copy <span class=\\"token parameter variable\\">-bsf:a</span> aac_adtstoasc output.mp4 <span class=\\"token operator\\">&gt;</span> output.log <span class=\\"token operator\\"><span class=\\"token file-descriptor important\\">2</span>&gt;</span><span class=\\"token file-descriptor important\\">&amp;1</span> <span class=\\"token operator\\">&lt;</span> /dev/null <span class=\\"token operator\\">&amp;</span> <span class=\\"token builtin class-name\\">echo</span> <span class=\\"token variable\\">$!</span> <span class=\\"token operator\\">&gt;</span> output.pid\\n</code></pre></div>"}');export{d as comp,m as data};
