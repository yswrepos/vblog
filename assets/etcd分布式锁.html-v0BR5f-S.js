import{_ as n,o as s,c as a,e as t}from"./app-BLeSCfhf.js";const p="/vblog/static/img/posts/etcd-lock-1.png",e={},o=t(`<h2 id="实现分布式锁需要注意的事项" tabindex="-1"><a class="header-anchor" href="#实现分布式锁需要注意的事项"><span>实现分布式锁需要注意的事项</span></a></h2><ul><li><p>锁的独占性： 确保任何时候只有一个客户端可以持有锁。</p></li><li><p>死锁的预防： 如果持有锁的进程崩溃或失去连接，需要有机制释放锁，防止死锁。</p></li><li><p>锁的可靠性： 确保在网络分区或节点故障的情况下，锁的行为是可预测和正确的。</p></li><li><p>锁的公平性： 确保锁的分配是公平的，避免某些进程长时间无法获取锁。</p></li><li><p>性能和可伸缩性： 锁服务应当能够高效处理请求，且能随着系统扩展而伸缩。</p></li><li><p>重入性： 根据需求，考虑是否需要支持重入锁（同一线程可重复获得锁）。</p></li></ul><h2 id="使用-etcd-实现分布式锁的步骤" tabindex="-1"><a class="header-anchor" href="#使用-etcd-实现分布式锁的步骤"><span>使用 etcd 实现分布式锁的步骤</span></a></h2><p>etcd 提供了强一致性的键值存储，可以用于实现分布式锁。以下是使用 etcd 实现分布式锁的基本步骤：</p><ul><li><p>创建租约： 首先为锁创建一个租约（lease）。租约具有时间限制，如果客户端崩溃，租约到期后锁会自动释放。</p></li><li><p>尝试获取锁： 通过在 etcd 中写入一个带有租约的键来尝试获取锁。如果键已存在（已被其他客户端持有），则获取锁失败。</p></li><li><p>监视锁： 如果获取锁失败，客户端可以监视这个键，等待它被删除或过期，然后再次尝试获取锁。</p></li><li><p>维持租约： 一旦获取到锁，客户端需要定期续约以保持锁的持有状态。</p></li><li><p>释放锁： 当完成任务后，客户端应删除对应的键，释放锁。</p></li></ul><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;math/rand&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	clientv3 <span class="token string">&quot;go.etcd.io/etcd/client/v3&quot;</span>
	<span class="token string">&quot;go.etcd.io/etcd/client/v3/concurrency&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	LOCK_KEY <span class="token operator">=</span> <span class="token string">&quot;/tmp/go/lock&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup

<span class="token keyword">func</span> <span class="token function">watchLock</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> client <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	wChan <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Watch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> LOCK_KEY<span class="token punctuation">)</span>
	<span class="token keyword">for</span> wResp <span class="token operator">:=</span> <span class="token keyword">range</span> wChan <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ev <span class="token operator">:=</span> <span class="token keyword">range</span> wResp<span class="token punctuation">.</span>Events <span class="token punctuation">{</span>
			log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type: %s, Key: %s, Value: %s&quot;</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Kv<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> ev<span class="token punctuation">.</span>Kv<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">tryLockWithRetry</span><span class="token punctuation">(</span>client <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> retryCount <span class="token builtin">int</span><span class="token punctuation">,</span> retryInterval time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// lease, err := cli.Grant(context.TODO(), 30)</span>
	<span class="token comment">// session, err := concurrency.NewSession(cli, concurrency.WithLease(lease.ID))</span>
	session<span class="token punctuation">,</span> err <span class="token operator">:=</span> concurrency<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;%d New Session Error: %v\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> session<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mutex <span class="token operator">:=</span> concurrency<span class="token punctuation">.</span><span class="token function">NewMutex</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> LOCK_KEY<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> retryCount<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		err <span class="token operator">=</span> mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
		<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> context<span class="token punctuation">.</span>DeadlineExceeded <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d 尝试 %d 次后加锁超时，等待重试...\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
				time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>retryInterval<span class="token punctuation">)</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		min<span class="token punctuation">,</span> max <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span>
		src <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		r <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
		<span class="token comment">// rand.Intn(max-min+1) 生成一个介于 0（包含）和 max-min+1（不包含）之间的随机整数。</span>
		sleepTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second

		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d 成功获取锁，执行业务逻辑\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d 执行完毕，耗时: %.2f s\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> sleepTime<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		<span class="token keyword">if</span> err <span class="token operator">=</span> mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d 释放锁成功\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientv3<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
		Endpoints<span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;localhost:2379&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		DialTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">const</span> N <span class="token operator">=</span> <span class="token number">5</span>

	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token function">tryLockWithRetry</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;等待子程序执行...&quot;</span><span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;执行完毕 程序退出&quot;</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果"><span>运行结果</span></a></h3><p><img src="`+p+'" alt=""></p>',9),c=[o];function i(l,u){return s(),a("div",null,c)}const r=n(e,[["render",i],["__file","etcd分布式锁.html.vue"]]),d=JSON.parse('{"path":"/posts/go/etcd%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","title":"etcd分布式锁","lang":"zh-CN","frontmatter":{"title":"etcd分布式锁","date":"2024-01-16T14:52:15.000Z","tags":["go","分布式锁","redis","etcd"],"categories":["go","分布式"]},"headers":[{"level":2,"title":"实现分布式锁需要注意的事项","slug":"实现分布式锁需要注意的事项","link":"#实现分布式锁需要注意的事项","children":[]},{"level":2,"title":"使用 etcd 实现分布式锁的步骤","slug":"使用-etcd-实现分布式锁的步骤","link":"#使用-etcd-实现分布式锁的步骤","children":[]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[{"level":3,"title":"运行结果","slug":"运行结果","link":"#运行结果","children":[]}]}],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"filePathRelative":"posts/go/etcd分布式锁.md","excerpt":"<h2>实现分布式锁需要注意的事项</h2>\\n<ul>\\n<li>\\n<p>锁的独占性： 确保任何时候只有一个客户端可以持有锁。</p>\\n</li>\\n<li>\\n<p>死锁的预防： 如果持有锁的进程崩溃或失去连接，需要有机制释放锁，防止死锁。</p>\\n</li>\\n<li>\\n<p>锁的可靠性： 确保在网络分区或节点故障的情况下，锁的行为是可预测和正确的。</p>\\n</li>\\n<li>\\n<p>锁的公平性： 确保锁的分配是公平的，避免某些进程长时间无法获取锁。</p>\\n</li>\\n<li>\\n<p>性能和可伸缩性： 锁服务应当能够高效处理请求，且能随着系统扩展而伸缩。</p>\\n</li>\\n<li>\\n<p>重入性： 根据需求，考虑是否需要支持重入锁（同一线程可重复获得锁）。</p>\\n</li>\\n</ul>\\n"}');export{r as comp,d as data};
