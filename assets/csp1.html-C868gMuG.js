import{_ as t,o as e,c as s,e as n}from"./app-CinGCuEv.js";const a="/assets/csp-PXlBiuP6.png",c={},i=n(`<p>在HTML的<meta>标签中设置Content-Security-Policy（内容安全策略）作为http-equiv的值，这实际上是一种在页面级别应用内容安全策略的方法。这样做可以让你定义哪些类型的资源（如脚本、图片、CSS文件等）可以被加载，以及它们可以从哪里加载。这是提高网站安全性的一个重要手段，可以帮助防止跨站脚本（XSS）攻击和其他安全威胁。</p><p>通过<meta>标签设置CSP不会改变服务器的HTTP响应头部，但会让浏览器在处理页面时应用CSP规则。这是一种在客户端实施安全策略的方式，尤其适用于无法直接控制服务器响应头的情况。然而，通过HTTP响应头直接设置CSP通常被认为是更优的做法，因为它可以覆盖更广泛的场景，并且有些CSP功能（如违规报告）只能通过HTTP响应头来实现。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>      add_header Content-Security-Policy <span class="token string">&quot;default-src &#39;self&#39;; img-src *; script-src &#39;self&#39; https://trustedscripts.example1.com; style-src &#39;self&#39;;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token comment"># 静态文件服务</span>
        location / <span class="token punctuation">{</span>
            root /usr/share/nginx/html<span class="token punctuation">;</span>
            index index.html index.htm<span class="token punctuation">;</span>
            add_header Content-Security-Policy <span class="token string">&quot;default-src &#39;self&#39;; img-src *; script-src &#39;self&#39; https://trustedscripts.example.com; style-src &#39;self&#39;;&quot;</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+a+'" alt="csp示例"></p>',5),o=[i];function p(r,l){return e(),s("div",null,o)}const u=t(c,[["render",p],["__file","csp1.html.vue"]]),m=JSON.parse(`{"path":"/posts/frontend/csp1.html","title":"csp","lang":"zh-CN","frontmatter":{"title":"csp","date":"2024-03-27T03:48:36.000Z","tags":["webpack"],"categories":"frontend","description":"在HTML的标签中设置Content-Security-Policy（内容安全策略）作为http-equiv的值，这实际上是一种在页面级别应用内容安全策略的方法。这样做可以让你定义哪些类型的资源（如脚本、图片、CSS文件等）可以被加载，以及它们可以从哪里加载。这是提高网站安全性的一个重要手段，可以帮助防止跨站脚本（XSS）攻击和其他安全威胁。 通过标签...","head":[["meta",{"property":"og:url","content":"https://b.yongzhenxin.com/posts/frontend/csp1.html"}],["meta",{"property":"og:site_name","content":"Yunshenw"}],["meta",{"property":"og:title","content":"csp"}],["meta",{"property":"og:description","content":"在HTML的标签中设置Content-Security-Policy（内容安全策略）作为http-equiv的值，这实际上是一种在页面级别应用内容安全策略的方法。这样做可以让你定义哪些类型的资源（如脚本、图片、CSS文件等）可以被加载，以及它们可以从哪里加载。这是提高网站安全性的一个重要手段，可以帮助防止跨站脚本（XSS）攻击和其他安全威胁。 通过标签..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-04T17:19:22.000Z"}],["meta",{"property":"article:tag","content":"webpack"}],["meta",{"property":"article:published_time","content":"2024-03-27T03:48:36.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-04T17:19:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"csp\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-27T03:48:36.000Z\\",\\"dateModified\\":\\"2024-04-04T17:19:22.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1712251162000,"contributors":[{"name":"yushen","email":"85443289+yushenw@users.noreply.github.com","commits":1}]},"autoDesc":true,"filePathRelative":"posts/frontend/csp1.md","excerpt":"<p>在HTML的<meta>标签中设置Content-Security-Policy（内容安全策略）作为http-equiv的值，这实际上是一种在页面级别应用内容安全策略的方法。这样做可以让你定义哪些类型的资源（如脚本、图片、CSS文件等）可以被加载，以及它们可以从哪里加载。这是提高网站安全性的一个重要手段，可以帮助防止跨站脚本（XSS）攻击和其他安全威胁。</p>\\n<p>通过<meta>标签设置CSP不会改变服务器的HTTP响应头部，但会让浏览器在处理页面时应用CSP规则。这是一种在客户端实施安全策略的方式，尤其适用于无法直接控制服务器响应头的情况。然而，通过HTTP响应头直接设置CSP通常被认为是更优的做法，因为它可以覆盖更广泛的场景，并且有些CSP功能（如违规报告）只能通过HTTP响应头来实现。</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>      add_header Content-Security-Policy <span class=\\"token string\\">\\"default-src 'self'; img-src *; script-src 'self' https://trustedscripts.example1.com; style-src 'self';\\"</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div><div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code> <span class=\\"token comment\\"># 静态文件服务</span>\\n        location / <span class=\\"token punctuation\\">{</span>\\n            root /usr/share/nginx/html<span class=\\"token punctuation\\">;</span>\\n            index index.html index.htm<span class=\\"token punctuation\\">;</span>\\n            add_header Content-Security-Policy <span class=\\"token string\\">\\"default-src 'self'; img-src *; script-src 'self' https://trustedscripts.example.com; style-src 'self';\\"</span><span class=\\"token punctuation\\">;</span>\\n       <span class=\\"token punctuation\\">}</span>\\n</code></pre></div><p></p>\\n"}`);export{u as comp,m as data};
